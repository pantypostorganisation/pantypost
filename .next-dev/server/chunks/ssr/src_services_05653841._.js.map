{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/security.service.ts"],"sourcesContent":["// src/services/security.service.ts\r\n\r\nimport { z } from 'zod';\r\nimport * as schemas from '@/utils/validation/schemas';\r\nimport * as sanitization from '@/utils/security/sanitization';\r\nimport { getRateLimiter, RATE_LIMITS } from '@/utils/security/rate-limiter';\r\nimport { CSRFTokenManager } from '@/utils/security/validation';\r\n\r\n/**\r\n * Comprehensive security service for the application\r\n */\r\nclass SecurityService {\r\n  private csrfManager: CSRFTokenManager;\r\n  private rateLimiter: ReturnType<typeof getRateLimiter>;\r\n\r\n  constructor() {\r\n    this.csrfManager = new CSRFTokenManager();\r\n    this.rateLimiter = getRateLimiter();\r\n  }\r\n\r\n  /**\r\n   * Validate and sanitize user input\r\n   */\r\n  validateAndSanitize<T>(\r\n    data: unknown,\r\n    schema: z.ZodSchema<T>,\r\n    sanitizers?: Partial<Record<keyof T, (value: any) => any>>\r\n  ): { success: boolean; data?: T; errors?: Record<string, string> } {\r\n    try {\r\n      // First sanitize if sanitizers provided\r\n      let processedData = data;\r\n      if (sanitizers && typeof data === 'object' && data !== null) {\r\n        processedData = { ...data } as Record<string, any>;\r\n        for (const [key, sanitizer] of Object.entries(sanitizers)) {\r\n          if (key in (processedData as Record<string, any>) && typeof sanitizer === 'function') {\r\n            (processedData as Record<string, any>)[key] = sanitizer((processedData as Record<string, any>)[key]);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Then validate\r\n      const validated = schema.parse(processedData);\r\n      return { success: true, data: validated };\r\n    } catch (error) {\r\n      if (error instanceof z.ZodError) {\r\n        const errors: Record<string, string> = {};\r\n        error.errors.forEach((err) => {\r\n          const path = err.path.join('.');\r\n          errors[path] = err.message;\r\n        });\r\n        return { success: false, errors };\r\n      }\r\n      return { success: false, errors: { general: 'Validation failed' } };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check rate limit for an action\r\n   */\r\n  checkRateLimit(\r\n    action: keyof typeof RATE_LIMITS,\r\n    identifier?: string\r\n  ): { allowed: boolean; message?: string; resetTime?: Date } {\r\n    const config = RATE_LIMITS[action];\r\n    const result = this.rateLimiter.check(action, { ...config, identifier });\r\n\r\n    if (!result.allowed) {\r\n      return {\r\n        allowed: false,\r\n        message: `Too many attempts. Please wait ${result.waitTime} seconds.`,\r\n        resetTime: result.resetTime,\r\n      };\r\n    }\r\n\r\n    return { allowed: true };\r\n  }\r\n\r\n  /**\r\n   * Sanitize content for safe display\r\n   */\r\n  sanitizeForDisplay(content: string, options?: {\r\n    allowHtml?: boolean;\r\n    allowMarkdown?: boolean;\r\n    maxLength?: number;\r\n  }): string {\r\n    const { allowHtml = false, allowMarkdown = false, maxLength } = options || {};\r\n\r\n    let sanitized = content;\r\n\r\n    if (maxLength && sanitized.length > maxLength) {\r\n      sanitized = sanitized.substring(0, maxLength) + '...';\r\n    }\r\n\r\n    if (allowMarkdown) {\r\n      return sanitization.sanitizeMarkdown(sanitized);\r\n    }\r\n\r\n    if (allowHtml) {\r\n      return sanitization.sanitizeHtml(sanitized);\r\n    }\r\n\r\n    return sanitization.sanitizeStrict(sanitized);\r\n  }\r\n\r\n  /**\r\n   * Validate file upload\r\n   */\r\n  validateFileUpload(\r\n    file: File,\r\n    options: {\r\n      maxSize?: number;\r\n      allowedTypes?: string[];\r\n      allowedExtensions?: string[];\r\n    } = {}\r\n  ): { valid: boolean; error?: string } {\r\n    const {\r\n      maxSize = 5 * 1024 * 1024, // 5MB default\r\n      allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'],\r\n      allowedExtensions = ['jpg', 'jpeg', 'png', 'webp'],\r\n    } = options;\r\n\r\n    // Check file size\r\n    if (file.size > maxSize) {\r\n      return {\r\n        valid: false,\r\n        error: `File size must be less than ${Math.round(maxSize / 1024 / 1024)}MB`,\r\n      };\r\n    }\r\n\r\n    // Check MIME type\r\n    if (!allowedTypes.includes(file.type)) {\r\n      return {\r\n        valid: false,\r\n        error: `File type not allowed. Allowed types: ${allowedTypes.join(', ')}`,\r\n      };\r\n    }\r\n\r\n    // Check extension\r\n    const extension = file.name.split('.').pop()?.toLowerCase();\r\n    if (!extension || !allowedExtensions.includes(extension)) {\r\n      return {\r\n        valid: false,\r\n        error: `File extension not allowed. Allowed extensions: ${allowedExtensions.join(', ')}`,\r\n      };\r\n    }\r\n\r\n    // Additional security: check if file content matches declared type\r\n    // This would require reading file headers in production\r\n\r\n    return { valid: true };\r\n  }\r\n\r\n  /**\r\n   * Generate CSRF token\r\n   */\r\n  generateCSRFToken(): string {\r\n    return this.csrfManager.generateToken();\r\n  }\r\n\r\n  /**\r\n   * Validate CSRF token\r\n   */\r\n  validateCSRFToken(token: string): boolean {\r\n    return this.csrfManager.validateToken(token);\r\n  }\r\n\r\n  /**\r\n   * Sanitize object for API request\r\n   */\r\n  sanitizeForAPI<T extends Record<string, any>>(data: T): Partial<T> {\r\n    return sanitization.sanitizeObject(data, {\r\n      maxDepth: 5,\r\n      keySanitizer: (key) => sanitization.sanitizeStrict(key),\r\n      valueSanitizer: (value) => {\r\n        if (typeof value === 'string') {\r\n          return sanitization.sanitizeStrict(value);\r\n        }\r\n        return value;\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate and sanitize search query\r\n   */\r\n  sanitizeSearchQuery(query: string): string {\r\n    return sanitization.sanitizeSearchQuery(query);\r\n  }\r\n\r\n  /**\r\n   * Validate financial amount\r\n   */\r\n  validateAmount(\r\n    amount: string | number,\r\n    options: {\r\n      min?: number;\r\n      max?: number;\r\n      allowDecimals?: boolean;\r\n    } = {}\r\n  ): { valid: boolean; value?: number; error?: string } {\r\n    const { min = 0.01, max = 10000, allowDecimals = true } = options;\r\n\r\n    const sanitized = sanitization.sanitizeCurrency(amount);\r\n\r\n    if (sanitized < min) {\r\n      return { valid: false, error: `Amount must be at least $${min}` };\r\n    }\r\n\r\n    if (sanitized > max) {\r\n      return { valid: false, error: `Amount cannot exceed $${max}` };\r\n    }\r\n\r\n    if (!allowDecimals && sanitized % 1 !== 0) {\r\n      return { valid: false, error: 'Amount must be a whole number' };\r\n    }\r\n\r\n    return { valid: true, value: sanitized };\r\n  }\r\n\r\n  /**\r\n   * Check content for potential security issues\r\n   */\r\n  checkContentSecurity(content: string): {\r\n    safe: boolean;\r\n    issues: string[];\r\n  } {\r\n    const issues: string[] = [];\r\n\r\n    // Check for script tags\r\n    if (/<script[^>]*>.*?<\\/script>/gi.test(content)) {\r\n      issues.push('Script tags detected');\r\n    }\r\n\r\n    // Check for event handlers\r\n    if (/on\\w+\\s*=/gi.test(content)) {\r\n      issues.push('Event handlers detected');\r\n    }\r\n\r\n    // Check for iframes\r\n    if (/<iframe/gi.test(content)) {\r\n      issues.push('Iframe detected');\r\n    }\r\n\r\n    // Check for javascript: URLs\r\n    if (/javascript:/gi.test(content)) {\r\n      issues.push('JavaScript URL detected');\r\n    }\r\n\r\n    // Check for SQL-like patterns\r\n    if (/\\b(union|select|insert|update|delete|drop)\\b.*\\b(from|into|where)\\b/gi.test(content)) {\r\n      issues.push('SQL-like pattern detected');\r\n    }\r\n\r\n    return {\r\n      safe: issues.length === 0,\r\n      issues,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create secure headers for API requests\r\n   */\r\n  getSecureHeaders(): Record<string, string> {\r\n    const headers: Record<string, string> = {\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n      'X-Content-Type-Options': 'nosniff',\r\n    };\r\n\r\n    const csrfToken = this.csrfManager.getToken();\r\n    if (csrfToken) {\r\n      headers['X-CSRF-Token'] = csrfToken;\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * Validate password against common vulnerabilities\r\n   */\r\n  checkPasswordVulnerabilities(password: string, userData?: {\r\n    username?: string;\r\n    email?: string;\r\n  }): { secure: boolean; warnings: string[] } {\r\n    const warnings: string[] = [];\r\n\r\n    // Check against common passwords\r\n    const commonPasswords = [\r\n      'password', '12345678', 'qwerty', 'abc123', 'password123',\r\n      'admin', 'letmein', 'welcome', 'monkey', '1234567890'\r\n    ];\r\n\r\n    if (commonPasswords.some(common => password.toLowerCase().includes(common))) {\r\n      warnings.push('Password contains common patterns');\r\n    }\r\n\r\n    // Check if password contains username or email\r\n    if (userData?.username && password.toLowerCase().includes(userData.username.toLowerCase())) {\r\n      warnings.push('Password should not contain your username');\r\n    }\r\n\r\n    if (userData?.email) {\r\n      const emailPart = userData.email.split('@')[0];\r\n      if (password.toLowerCase().includes(emailPart.toLowerCase())) {\r\n        warnings.push('Password should not contain parts of your email');\r\n      }\r\n    }\r\n\r\n    // Check for repeated characters\r\n    if (/(.)\\1{3,}/.test(password)) {\r\n      warnings.push('Password contains too many repeated characters');\r\n    }\r\n\r\n    // Check for sequential characters\r\n    if (/(?:abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz|012|123|234|345|456|567|678|789)/i.test(password)) {\r\n      warnings.push('Password contains sequential characters');\r\n    }\r\n\r\n    return {\r\n      secure: warnings.length === 0,\r\n      warnings,\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const securityService = new SecurityService();\r\n\r\n// Export schemas for convenience\r\nexport { schemas };\r\n\r\n// Export sanitization functions\r\nexport const sanitize = {\r\n  html: sanitization.sanitizeHtml,\r\n  strict: sanitization.sanitizeStrict,\r\n  email: sanitization.sanitizeEmail,\r\n  username: sanitization.sanitizeUsername,\r\n  url: sanitization.sanitizeUrl,\r\n  fileName: sanitization.sanitizeFileName,\r\n  number: sanitization.sanitizeNumber,\r\n  currency: sanitization.sanitizeCurrency,\r\n  searchQuery: sanitization.sanitizeSearchQuery,\r\n  markdown: sanitization.sanitizeMarkdown,\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/api.config.ts"],"sourcesContent":["// src/services/api.config.ts\r\n\r\n/**\r\n * API Configuration Module\r\n * Centralizes all API-related configuration and provides environment-based settings\r\n */\r\n\r\nimport { apiConfig, appConfig, securityConfig, isDevelopment } from '@/config/environment';\r\nimport { securityService } from './security.service';\r\nimport { sanitizeUrl, sanitizeStrict } from '@/utils/security/sanitization';\r\nimport { getRateLimiter, RATE_LIMITS } from '@/utils/security/rate-limiter';\r\n\r\n// Re-export from environment config for backward compatibility\r\nexport { isDevelopment };\r\nexport const isProduction = !isDevelopment();\r\n\r\n// Use environment configuration correctly\r\nexport const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:5000';\r\nexport const FEATURES = {\r\n  USE_API_AUTH: process.env.NEXT_PUBLIC_USE_API_AUTH !== 'false',\r\n  USE_API_LISTINGS: process.env.NEXT_PUBLIC_USE_API_LISTINGS !== 'false',\r\n  USE_API_ORDERS: process.env.NEXT_PUBLIC_USE_API_ORDERS !== 'false',\r\n  USE_API_MESSAGES: process.env.NEXT_PUBLIC_USE_API_MESSAGES !== 'false',\r\n  USE_API_WALLET: process.env.NEXT_PUBLIC_USE_API_WALLET !== 'false',\r\n  USE_API_USERS: process.env.NEXT_PUBLIC_USE_API_USERS !== 'false',\r\n  USE_API_BANS: process.env.NEXT_PUBLIC_USE_API_BANS !== 'false',\r\n  USE_API_REPORTS: process.env.NEXT_PUBLIC_USE_API_REPORTS !== 'false',\r\n  USE_MOCK_API: false, // Always false - no mocks!\r\n};\r\n\r\n// API endpoints with parameter placeholders\r\nexport const API_ENDPOINTS = {\r\n  // Auth endpoints\r\n  AUTH: {\r\n    LOGIN: '/auth/login',\r\n    SIGNUP: '/auth/signup',\r\n    LOGOUT: '/auth/logout',\r\n    REFRESH: '/auth/refresh',\r\n    ME: '/auth/me',\r\n    VERIFY_USERNAME: '/auth/verify-username',\r\n    // Password reset endpoints\r\n    FORGOT_PASSWORD: '/auth/forgot-password',\r\n    VERIFY_RESET_TOKEN: '/auth/verify-reset-token',\r\n    RESET_PASSWORD: '/auth/reset-password',\r\n  },\r\n  \r\n  // User endpoints\r\n  USERS: {\r\n    PROFILE: '/users/:username/profile',\r\n    UPDATE_PROFILE: '/users/:username/profile',\r\n    VERIFICATION: '/users/:username/verification',\r\n    SETTINGS: '/users/:username/settings',\r\n    LIST: '/users',\r\n  },\r\n  \r\n  // Listing endpoints\r\n  LISTINGS: {\r\n    LIST: '/listings',\r\n    CREATE: '/listings',\r\n    GET: '/listings/:id',\r\n    UPDATE: '/listings/:id',\r\n    DELETE: '/listings/:id',\r\n    BY_SELLER: '/listings/seller/:username',\r\n    VIEWS: '/listings/:id/views',\r\n    SEARCH: '/listings/search',\r\n    POPULAR_TAGS: '/listings/popular-tags',\r\n    STATS: '/listings/stats',\r\n    BID: '/listings/:id/bid',\r\n    END_AUCTION: '/listings/:id/end-auction',\r\n  },\r\n  \r\n  // Order endpoints\r\n  ORDERS: {\r\n    LIST: '/orders',\r\n    CREATE: '/orders',\r\n    GET: '/orders/:id',\r\n    UPDATE_STATUS: '/orders/:id/status',\r\n    BY_BUYER: '/orders/buyer/:username',\r\n    BY_SELLER: '/orders/seller/:username',\r\n    SHIPPING: '/orders/:id/shipping',\r\n    UPDATE_ADDRESS: '/orders/:id/address',\r\n  },\r\n  \r\n  // Message endpoints\r\n  MESSAGES: {\r\n    THREADS: '/messages/threads',\r\n    THREAD: '/messages/threads/:threadId',\r\n    SEND: '/messages/send',\r\n    MARK_READ: '/messages/mark-read',\r\n    BLOCK_USER: '/messages/block',\r\n    UNBLOCK_USER: '/messages/unblock',\r\n    REPORT: '/messages/report',\r\n    TIP: '/messages/tip',\r\n    CUSTOM_REQUEST: '/messages/custom-request',\r\n  },\r\n  \r\n  // Wallet endpoints\r\n  WALLET: {\r\n    BALANCE: '/wallet/balance/:username',\r\n    DEPOSIT: '/wallet/deposit',\r\n    WITHDRAW: '/wallet/withdraw',\r\n    TRANSACTIONS: '/wallet/transactions/:username',\r\n    ADMIN_ACTIONS: '/wallet/admin-actions',\r\n    TRANSFER: '/wallet/transfer',\r\n  },\r\n  \r\n  // Subscription endpoints\r\n  SUBSCRIPTIONS: {\r\n    LIST: '/subscriptions/:username',\r\n    SUBSCRIBE: '/subscriptions/subscribe',\r\n    UNSUBSCRIBE: '/subscriptions/unsubscribe',\r\n    CHECK: '/subscriptions/check',\r\n  },\r\n  \r\n  // Review endpoints\r\n  REVIEWS: {\r\n    LIST: '/reviews',\r\n    CREATE: '/reviews',\r\n    GET: '/reviews/:id',\r\n    UPDATE: '/reviews/:id',\r\n    DELETE: '/reviews/:id',\r\n    BY_SELLER: '/reviews/seller/:username',\r\n    BY_BUYER: '/reviews/buyer/:username',\r\n    BY_ORDER: '/reviews/order/:orderId',\r\n    RESPONSE: '/reviews/:reviewId/response',\r\n    FLAG: '/reviews/:reviewId/flag',\r\n  },\r\n  \r\n  // Upload endpoints\r\n  UPLOAD: {\r\n    IMAGE: '/upload/image',\r\n    PROFILE: '/upload/profile',\r\n    VERIFICATION: '/upload/verification',\r\n  },\r\n  \r\n  // Custom request endpoints\r\n  REQUESTS: {\r\n    LIST: '/requests',\r\n    CREATE: '/requests',\r\n    UPDATE: '/requests/:id',\r\n    RESPOND: '/requests/:id/respond',\r\n    BY_USER: '/requests/user/:username',\r\n  },\r\n};\r\n\r\n// Request configuration from environment\r\nexport const REQUEST_CONFIG = {\r\n  TIMEOUT: parseInt(process.env.NEXT_PUBLIC_API_TIMEOUT || '30000'),\r\n  RETRY_ATTEMPTS: parseInt(process.env.NEXT_PUBLIC_API_RETRY_ATTEMPTS || '3'),\r\n  RETRY_DELAY: 1000, // 1 second\r\n  MAX_REQUEST_SIZE: 5 * 1024 * 1024, // 5MB\r\n  MAX_URL_LENGTH: 2048, // Maximum URL length\r\n  MAX_HEADER_SIZE: 8192, // Maximum header size\r\n};\r\n\r\n// Headers configuration with version from environment\r\nexport const getDefaultHeaders = (): HeadersInit => {\r\n  const headers: HeadersInit = {\r\n    'Content-Type': 'application/json',\r\n    'X-Client-Version': sanitizeStrict(process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0'),\r\n    'X-App-Name': sanitizeStrict(process.env.NEXT_PUBLIC_APP_NAME || 'PantyPost'),\r\n    'X-Content-Type-Options': 'nosniff',\r\n    'X-Frame-Options': 'DENY',\r\n    'X-XSS-Protection': '1; mode=block',\r\n    'X-Request-ID': generateRequestId(),\r\n  };\r\n\r\n  // Add CSRF token if available\r\n  try {\r\n    const csrfToken = securityService.generateCSRFToken();\r\n    if (csrfToken) {\r\n      headers['X-CSRF-Token'] = csrfToken;\r\n    }\r\n  } catch (error) {\r\n    // securityService might not be available in all contexts\r\n    console.warn('Could not generate CSRF token:', error);\r\n  }\r\n\r\n  return headers;\r\n};\r\n\r\n// Auth token management\r\nexport const AUTH_TOKEN_KEY = 'auth_token';\r\nexport const REFRESH_TOKEN_KEY = 'refresh_token';\r\n\r\n/**\r\n * Helper to build full API URL with validation\r\n * Properly handles parameter replacement and validation\r\n */\r\nexport const buildApiUrl = (endpoint: string, params?: Record<string, string>): string => {\r\n  console.log('[buildApiUrl] Called with:', { endpoint, params });\r\n  \r\n  // If endpoint is already a full URL (for direct calls), return it\r\n  if (endpoint.startsWith('http://') || endpoint.startsWith('https://')) {\r\n    console.log('[buildApiUrl] Endpoint is already a full URL, returning as-is');\r\n    return endpoint;\r\n  }\r\n  \r\n  let url = endpoint;\r\n  \r\n  // Find all parameters that need to be replaced in the URL\r\n  const requiredParams = (endpoint.match(/:(\\w+)/g) || []).map(p => p.substring(1));\r\n  console.log('[buildApiUrl] Required params in endpoint:', requiredParams);\r\n  \r\n  // If URL has parameters that need to be replaced\r\n  if (requiredParams.length > 0) {\r\n    // Check if params object was provided\r\n    if (!params) {\r\n      console.error('[buildApiUrl] ERROR: No params object provided for endpoint:', endpoint);\r\n      console.error('[buildApiUrl] Required params:', requiredParams);\r\n      throw new Error(`Missing required URL parameters for endpoint: ${endpoint}. Required: ${requiredParams.join(', ')}`);\r\n    }\r\n    \r\n    // Check each required parameter\r\n    for (const param of requiredParams) {\r\n      const value = params[param];\r\n      \r\n      // Check if parameter exists and is not empty\r\n      if (value === undefined || value === null || value === '') {\r\n        console.error(`[buildApiUrl] ERROR: Missing required parameter: ${param}`);\r\n        console.error('[buildApiUrl] Endpoint:', endpoint);\r\n        console.error('[buildApiUrl] Provided params:', params);\r\n        console.error('[buildApiUrl] Required params:', requiredParams);\r\n        throw new Error(`Missing required URL parameter: ${param} for endpoint: ${endpoint}`);\r\n      }\r\n      \r\n      // Log the parameter being replaced\r\n      console.log(`[buildApiUrl] Replacing :${param} with \"${value}\"`);\r\n    }\r\n    \r\n    // Replace all parameters in the URL\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      // Skip if value is undefined or null\r\n      if (value === undefined || value === null) {\r\n        console.warn(`[buildApiUrl] Skipping undefined/null parameter: ${key}`);\r\n        return;\r\n      }\r\n      \r\n      // Validate parameter key (no special characters that could break URLs)\r\n      const sanitizedKey = sanitizeStrict(key);\r\n      if (sanitizedKey !== key) {\r\n        console.error(`[buildApiUrl] Invalid parameter key: ${key}`);\r\n        throw new Error(`Invalid parameter key: ${key}`);\r\n      }\r\n      \r\n      // Convert value to string and sanitize\r\n      const stringValue = String(value).trim();\r\n      if (stringValue === '') {\r\n        console.warn(`[buildApiUrl] Empty parameter value for key: ${key}`);\r\n        return;\r\n      }\r\n      \r\n      // Sanitize and encode parameter value\r\n      const sanitizedValue = encodeURIComponent(sanitizeStrict(stringValue));\r\n      \r\n      // Check for path traversal attempts\r\n      if (sanitizedValue.includes('..') || sanitizedValue.includes('//')) {\r\n        console.error(`[buildApiUrl] Invalid parameter value (possible path traversal): ${value}`);\r\n        throw new Error(`Invalid parameter value: ${value}`);\r\n      }\r\n      \r\n      // Replace the parameter in the URL\r\n      const placeholder = `:${key}`;\r\n      if (url.includes(placeholder)) {\r\n        url = url.replace(placeholder, sanitizedValue);\r\n        console.log(`[buildApiUrl] Replaced ${placeholder} -> ${sanitizedValue}`);\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Check if all parameters were replaced\r\n  const unreplacedParams = url.match(/:(\\w+)/g);\r\n  if (unreplacedParams && unreplacedParams.length > 0) {\r\n    console.error('[buildApiUrl] ERROR: Unreplaced parameters found:', unreplacedParams);\r\n    console.error('[buildApiUrl] Final URL:', url);\r\n    console.error('[buildApiUrl] Original endpoint:', endpoint);\r\n    console.error('[buildApiUrl] Provided params:', params);\r\n    throw new Error(`Missing required URL parameters: ${unreplacedParams.join(', ')}`);\r\n  }\r\n  \r\n  // Build full URL with base URL\r\n  if (API_BASE_URL) {\r\n    // Ensure API_BASE_URL doesn't end with a slash\r\n    const baseUrl = API_BASE_URL.replace(/\\/$/, '');\r\n    \r\n    // FIX: Check if baseUrl already contains /api path\r\n    // If it does, don't add it again\r\n    const hasApiPath = baseUrl.endsWith('/api') || baseUrl.includes('/api/');\r\n    \r\n    // Build the full URL (only add /api if not already present)\r\n    const fullUrl = hasApiPath ? `${baseUrl}${url}` : `${baseUrl}/api${url}`;\r\n    \r\n    // Sanitize the final URL\r\n    const sanitizedUrl = sanitizeUrl(fullUrl);\r\n    \r\n    if (!sanitizedUrl) {\r\n      console.error('[buildApiUrl] ERROR: Failed to sanitize URL:', fullUrl);\r\n      throw new Error('Invalid API URL');\r\n    }\r\n    \r\n    // Check URL length\r\n    if (sanitizedUrl.length > REQUEST_CONFIG.MAX_URL_LENGTH) {\r\n      console.error('[buildApiUrl] ERROR: URL too long:', sanitizedUrl.length);\r\n      throw new Error('URL too long');\r\n    }\r\n    \r\n    console.log('[buildApiUrl] SUCCESS: Built URL:', sanitizedUrl);\r\n    return sanitizedUrl;\r\n  }\r\n  \r\n  console.log('[buildApiUrl] No API_BASE_URL, returning modified endpoint:', url);\r\n  return url;\r\n};\r\n\r\n// Error response type - UPDATED with premium fields\r\nexport interface ApiError {\r\n  message: string;\r\n  code?: string;\r\n  field?: string;\r\n  details?: any;\r\n  statusCode?: number;\r\n  requiresSubscription?: boolean;  // ADDED: For premium content errors\r\n  seller?: string;  // ADDED: Seller username for premium content context\r\n}\r\n\r\n// Success response wrapper - UPDATED with premium access meta\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: ApiError;\r\n  meta?: {\r\n    page?: number;\r\n    totalPages?: number;\r\n    totalItems?: number;\r\n    requestId?: string;\r\n    premiumAccess?: boolean;  // ADDED: Indicates if user has premium access\r\n  };\r\n}\r\n\r\n// Generate unique request ID\r\nfunction generateRequestId(): string {\r\n  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\n// Create a more robust API client with security\r\nclass ApiClient {\r\n  private static instance: ApiClient;\r\n  private abortControllers: Map<string, AbortController> = new Map();\r\n  private requestCount: number = 0;\r\n  private requestWindowStart: number = Date.now();\r\n  private pendingRequests: Set<string> = new Set();\r\n\r\n  static getInstance(): ApiClient {\r\n    if (!ApiClient.instance) {\r\n      ApiClient.instance = new ApiClient();\r\n    }\r\n    return ApiClient.instance;\r\n  }\r\n\r\n  /**\r\n   * Cancel a specific request\r\n   */\r\n  cancelRequest(key: string) {\r\n    const controller = this.abortControllers.get(key);\r\n    if (controller) {\r\n      controller.abort();\r\n      this.abortControllers.delete(key);\r\n    }\r\n    this.pendingRequests.delete(key);\r\n  }\r\n\r\n  /**\r\n   * Cancel all pending requests\r\n   */\r\n  cancelAllRequests() {\r\n    this.abortControllers.forEach(controller => controller.abort());\r\n    this.abortControllers.clear();\r\n    this.pendingRequests.clear();\r\n  }\r\n\r\n  /**\r\n   * Check rate limit\r\n   */\r\n  private checkRateLimit(): { allowed: boolean; waitTime?: number } {\r\n    if (process.env.NEXT_PUBLIC_ENABLE_RATE_LIMITING === 'false') return { allowed: true };\r\n\r\n    // Use rate limiter service if available\r\n    try {\r\n      const rateLimiter = getRateLimiter();\r\n      const result = rateLimiter.check('API_CALL', RATE_LIMITS.API_CALL);\r\n      return result;\r\n    } catch (error) {\r\n      console.warn('Rate limiter not available:', error);\r\n      return { allowed: true };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate request options\r\n   */\r\n  private validateRequestOptions(options: RequestInit): void {\r\n    // Validate request method\r\n    const allowedMethods = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'];\r\n    if (options.method && !allowedMethods.includes(options.method.toUpperCase())) {\r\n      throw new Error('Invalid request method');\r\n    }\r\n\r\n    // Validate request body size\r\n    if (options.body) {\r\n      const bodySize = typeof options.body === 'string' \r\n        ? new Blob([options.body]).size \r\n        : 0;\r\n      \r\n      if (bodySize > REQUEST_CONFIG.MAX_REQUEST_SIZE) {\r\n        throw new Error('Request body too large');\r\n      }\r\n      \r\n      // Validate JSON structure if content type is JSON\r\n      if (typeof options.body === 'string' && \r\n          options.headers && \r\n          (options.headers as any)['Content-Type'] === 'application/json') {\r\n        try {\r\n          JSON.parse(options.body);\r\n        } catch {\r\n          throw new Error('Invalid JSON in request body');\r\n        }\r\n      }\r\n    }\r\n\r\n    // Validate headers\r\n    if (options.headers) {\r\n      const headers = options.headers as Record<string, string>;\r\n      let totalHeaderSize = 0;\r\n      \r\n      Object.entries(headers).forEach(([key, value]) => {\r\n        // Prevent header injection\r\n        if (key.includes('\\n') || key.includes('\\r') || \r\n            value.includes('\\n') || value.includes('\\r')) {\r\n          throw new Error('Invalid header format');\r\n        }\r\n        \r\n        // Check header size\r\n        totalHeaderSize += key.length + value.length + 4; // +4 for ': ' and '\\r\\n'\r\n        \r\n        // Validate header names\r\n        if (!/^[a-zA-Z0-9\\-]+$/.test(key)) {\r\n          throw new Error(`Invalid header name: ${key}`);\r\n        }\r\n      });\r\n      \r\n      if (totalHeaderSize > REQUEST_CONFIG.MAX_HEADER_SIZE) {\r\n        throw new Error('Headers too large');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sanitize response data\r\n   */\r\n  private sanitizeResponse<T>(data: any): T {\r\n    // Basic sanitization for common attack vectors\r\n    if (typeof data === 'string') {\r\n      // Check for potential XSS in string responses\r\n      try {\r\n        const sanitized = securityService.sanitizeForDisplay(data, {\r\n          allowHtml: false,\r\n          allowMarkdown: false,\r\n        });\r\n        return sanitized as unknown as T;\r\n      } catch (error) {\r\n        console.warn('Could not sanitize string response:', error);\r\n        return data as T;\r\n      }\r\n    }\r\n    \r\n    if (typeof data === 'object' && data !== null) {\r\n      // Sanitize object responses\r\n      try {\r\n        return securityService.sanitizeForAPI(data) as T;\r\n      } catch (error) {\r\n        console.warn('Could not sanitize object response:', error);\r\n        return data as T;\r\n      }\r\n    }\r\n    \r\n    return data as T;\r\n  }\r\n\r\n  /**\r\n   * Validate response\r\n   */\r\n  private validateResponse(response: Response): void {\r\n    // Check for suspicious response headers\r\n    const suspiciousHeaders = ['X-Powered-By', 'Server'];\r\n    suspiciousHeaders.forEach(header => {\r\n      if (response.headers.has(header)) {\r\n        console.warn(`Suspicious header detected: ${header}`);\r\n      }\r\n    });\r\n    \r\n    // Validate content type\r\n    const contentType = response.headers.get('content-type');\r\n    if (contentType && contentType.includes('text/html') && !response.url.includes('.html')) {\r\n      console.warn('Unexpected HTML response');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get auth token from storage\r\n   */\r\n  private getAuthToken(): string | null {\r\n    if (typeof window === 'undefined') return null;\r\n    \r\n    try {\r\n      // Try sessionStorage first (where AuthContext stores tokens)\r\n      const authTokens = sessionStorage.getItem('auth_tokens');\r\n      if (authTokens) {\r\n        const parsed = JSON.parse(authTokens);\r\n        return parsed.token;\r\n      }\r\n      \r\n      // Fallback to localStorage\r\n      return localStorage.getItem('auth_token');\r\n    } catch (error) {\r\n      console.warn('Failed to get auth token:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make an API call with abort capability and security\r\n   */\r\n  async call<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {},\r\n    requestKey?: string\r\n  ): Promise<ApiResponse<T>> {\r\n    const requestId = generateRequestId();\r\n    const startTime = Date.now();\r\n    \r\n    console.log('[ApiClient.call] Starting request:', { endpoint, method: options.method || 'GET', requestId });\r\n    \r\n    // Check for duplicate requests\r\n    if (requestKey && this.pendingRequests.has(requestKey)) {\r\n      console.warn('[ApiClient.call] Duplicate request detected:', requestKey);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: 'Request already in progress',\r\n          code: 'DUPLICATE_REQUEST',\r\n        },\r\n        meta: { requestId },\r\n      };\r\n    }\r\n    \r\n    if (requestKey) {\r\n      this.pendingRequests.add(requestKey);\r\n    }\r\n\r\n    // Check rate limit\r\n    const rateLimitResult = this.checkRateLimit();\r\n    if (!rateLimitResult.allowed) {\r\n      this.pendingRequests.delete(requestKey || '');\r\n      console.warn('[ApiClient.call] Rate limit exceeded');\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: `Rate limit exceeded. Please wait ${rateLimitResult.waitTime} seconds.`,\r\n          code: 'RATE_LIMIT_EXCEEDED',\r\n        },\r\n        meta: { requestId },\r\n      };\r\n    }\r\n\r\n    // Validate request options\r\n    try {\r\n      this.validateRequestOptions(options);\r\n    } catch (error) {\r\n      this.pendingRequests.delete(requestKey || '');\r\n      console.error('[ApiClient.call] Invalid request options:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: error instanceof Error ? error.message : 'Invalid request',\r\n          code: 'VALIDATION_ERROR',\r\n        },\r\n        meta: { requestId },\r\n      };\r\n    }\r\n\r\n    // Cancel previous request with same key if exists\r\n    if (requestKey) {\r\n      this.cancelRequest(requestKey);\r\n    }\r\n\r\n    // Create new abort controller\r\n    const abortController = new AbortController();\r\n    if (requestKey) {\r\n      this.abortControllers.set(requestKey, abortController);\r\n    }\r\n\r\n    // Set timeout\r\n    const timeoutId = setTimeout(() => {\r\n      console.warn('[ApiClient.call] Request timeout:', endpoint);\r\n      abortController.abort();\r\n    }, REQUEST_CONFIG.TIMEOUT);\r\n\r\n    try {\r\n      // Handle URL - if it's already a full URL, use it directly, otherwise build it\r\n      let url: string;\r\n      if (endpoint.startsWith('http://') || endpoint.startsWith('https://')) {\r\n        // Already a full URL (from buildApiUrl or direct call)\r\n        url = endpoint;\r\n        console.log('[ApiClient.call] Using full URL:', url);\r\n      } else if (endpoint.startsWith('/')) {\r\n        // Relative endpoint, build full URL\r\n        url = buildApiUrl(endpoint);\r\n        console.log('[ApiClient.call] Built URL from endpoint:', url);\r\n      } else {\r\n        // Invalid endpoint format\r\n        console.error('[ApiClient.call] Invalid endpoint format:', endpoint);\r\n        throw new Error('Invalid endpoint format - must start with / or be a full URL');\r\n      }\r\n      \r\n      const token = this.getAuthToken();\r\n      \r\n      const headers: Record<string, string> = {\r\n        ...getDefaultHeaders() as Record<string, string>,\r\n        ...(options.headers || {}) as Record<string, string>,\r\n      };\r\n      \r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n      \r\n      // Add request ID to headers\r\n      headers['X-Request-ID'] = requestId;\r\n      \r\n      console.log(`[ApiClient.call] Making request to: ${url}`);\r\n      console.log(`[ApiClient.call] Method: ${options.method || 'GET'}`);\r\n      \r\n      const response = await fetch(url, {\r\n        ...options,\r\n        headers,\r\n        signal: abortController.signal,\r\n        credentials: 'same-origin', // Prevent CSRF\r\n        mode: 'cors', // Enable CORS\r\n        redirect: 'follow', // Follow redirects but limit\r\n      });\r\n      \r\n      clearTimeout(timeoutId);\r\n      \r\n      // Remove from active requests\r\n      if (requestKey) {\r\n        this.abortControllers.delete(requestKey);\r\n        this.pendingRequests.delete(requestKey);\r\n      }\r\n      \r\n      // Validate response\r\n      this.validateResponse(response);\r\n      \r\n      let data: any;\r\n      \r\n      // Parse response based on content type\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType && contentType.includes('application/json')) {\r\n        data = await response.json();\r\n      } else {\r\n        // Handle non-JSON responses\r\n        const text = await response.text();\r\n        console.warn('[ApiClient.call] Non-JSON response:', text);\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid response format', code: 'INVALID_CONTENT_TYPE' },\r\n          meta: { requestId },\r\n        };\r\n      }\r\n      \r\n      const elapsed = Date.now() - startTime;\r\n      console.log(`[ApiClient.call] Response [${response.status}] in ${elapsed}ms:`, data);\r\n      \r\n      if (!response.ok) {\r\n        // Log error for monitoring\r\n        console.error(`[ApiClient.call] API Error [${response.status}]:`, data.error || data);\r\n        \r\n        return {\r\n          success: false,\r\n          error: data.error || { message: data.message || 'An error occurred', code: String(response.status) },\r\n          meta: { requestId },\r\n        };\r\n      }\r\n      \r\n      // Handle backend response format\r\n      if (data.success !== undefined) {\r\n        // Backend returns { success, data, error } format\r\n        if (data.success) {\r\n          const sanitizedData = this.sanitizeResponse<T>(data.data);\r\n          return {\r\n            success: true,\r\n            data: sanitizedData,\r\n            meta: {\r\n              ...data.meta,\r\n              requestId,\r\n            },\r\n          };\r\n        } else {\r\n          return {\r\n            success: false,\r\n            error: data.error || { message: 'Unknown error' },\r\n            meta: { requestId },\r\n          };\r\n        }\r\n      } else {\r\n        // Backend returns data directly\r\n        const sanitizedData = this.sanitizeResponse<T>(data);\r\n        return {\r\n          success: true,\r\n          data: sanitizedData,\r\n          meta: { requestId },\r\n        };\r\n      }\r\n    } catch (error) {\r\n      clearTimeout(timeoutId);\r\n      \r\n      // Remove from active requests\r\n      if (requestKey) {\r\n        this.abortControllers.delete(requestKey);\r\n        this.pendingRequests.delete(requestKey);\r\n      }\r\n\r\n      // Handle abort errors\r\n      if (error instanceof Error && error.name === 'AbortError') {\r\n        console.warn('[ApiClient.call] Request aborted:', endpoint);\r\n        return {\r\n          success: false,\r\n          error: { message: 'Request timeout or cancelled', code: 'REQUEST_ABORTED' },\r\n          meta: { requestId },\r\n        };\r\n      }\r\n\r\n      console.error('[ApiClient.call] API call error:', error);\r\n      \r\n      // Check for network errors\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            message: 'Network error. Please check your connection.',\r\n            code: 'NETWORK_ERROR',\r\n          },\r\n          meta: { requestId },\r\n        };\r\n      }\r\n      \r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: error instanceof Error ? error.message : 'Unknown error occurred',\r\n          code: 'UNKNOWN_ERROR',\r\n        },\r\n        meta: { requestId },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton API client\r\nexport const apiClient = ApiClient.getInstance();\r\n\r\n// Generic API call wrapper with security\r\nexport async function apiCall<T>(\r\n  endpoint: string,\r\n  options: RequestInit = {}\r\n): Promise<ApiResponse<T>> {\r\n  return apiClient.call<T>(endpoint, options);\r\n}\r\n\r\n// Retry utility for failed requests with exponential backoff\r\nexport async function apiCallWithRetry<T>(\r\n  endpoint: string,\r\n  options: RequestInit = {},\r\n  maxRetries = REQUEST_CONFIG.RETRY_ATTEMPTS\r\n): Promise<ApiResponse<T>> {\r\n  let lastError: ApiError | undefined;\r\n  \r\n  for (let i = 0; i < maxRetries; i++) {\r\n    const result = await apiCall<T>(endpoint, options);\r\n    \r\n    if (result.success) {\r\n      return result;\r\n    }\r\n    \r\n    lastError = result.error;\r\n    \r\n    // Don't retry on client errors (4xx), rate limits, or validation errors\r\n    if (lastError?.code && \r\n        (lastError.code.startsWith('4') || \r\n         lastError.code === 'RATE_LIMIT_EXCEEDED' ||\r\n         lastError.code === 'VALIDATION_ERROR' ||\r\n         lastError.code === 'DUPLICATE_REQUEST')) {\r\n      return result;\r\n    }\r\n    \r\n    // Exponential backoff with jitter\r\n    if (i < maxRetries - 1) {\r\n      const baseDelay = Math.min(REQUEST_CONFIG.RETRY_DELAY * Math.pow(2, i), 10000);\r\n      const jitter = Math.random() * 0.3 * baseDelay; // 30% jitter\r\n      const delay = baseDelay + jitter;\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n  }\r\n  \r\n  return {\r\n    success: false,\r\n    error: lastError || { message: 'Max retries exceeded', code: 'MAX_RETRIES' },\r\n  };\r\n}\r\n\r\n// Health check function\r\nexport async function checkApiHealth(): Promise<boolean> {\r\n  try {\r\n    const response = await apiCall<{ status: string }>('/health', {\r\n      method: 'GET',\r\n    });\r\n    return response.success && response.data?.status === 'ok';\r\n  } catch {\r\n    return false;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1045, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/storage.service.ts"],"sourcesContent":["// src/services/storage.service.ts\r\n\r\nimport { FEATURES, ApiResponse } from './api.config';\r\nimport { sanitizeStrict, sanitizeObject } from '@/utils/security/sanitization';\r\nimport { getRateLimiter, RATE_LIMITS } from '@/utils/security/rate-limiter';\r\nimport { z } from 'zod';\r\n\r\n/**\r\n * Enhanced Storage Service with transaction support and error recovery\r\n */\r\n\r\ninterface StorageTransaction {\r\n  operations: Array<{\r\n    type: 'set' | 'remove';\r\n    key: string;\r\n    value?: any;\r\n  }>;\r\n  backup: Map<string, string | null>;\r\n}\r\n\r\n// Constants for security limits\r\nconst STORAGE_LIMITS = {\r\n  MAX_KEY_LENGTH: 100,\r\n  MAX_VALUE_SIZE: 1 * 1024 * 1024, // 1MB per value\r\n  MAX_TOTAL_SIZE: 5 * 1024 * 1024, // 5MB total\r\n  MAX_KEYS: 1000,\r\n  MAX_BATCH_SIZE: 50,\r\n  ALLOWED_KEY_PATTERN: /^[a-zA-Z0-9_-]+$/,\r\n  RESERVED_PREFIXES: ['system_', 'internal_'],\r\n  // Allow these specific system keys that the app uses\r\n  ALLOWED_SYSTEM_KEYS: ['__walletMockDataCleared__', '__lastSyncTime__', '__initialized__', 'currentUser', 'session_fingerprint', 'auth_token', 'refresh_token', 'auth_token_data', 'panty_custom_requests'],\r\n};\r\n\r\n// Validation schemas\r\nconst storageKeySchema = z.string()\r\n  .min(1, 'Key cannot be empty')\r\n  .max(STORAGE_LIMITS.MAX_KEY_LENGTH, `Key cannot exceed ${STORAGE_LIMITS.MAX_KEY_LENGTH} characters`)\r\n  .regex(STORAGE_LIMITS.ALLOWED_KEY_PATTERN, 'Key contains invalid characters')\r\n  .refine(key => {\r\n    // Allow specific system keys\r\n    if (STORAGE_LIMITS.ALLOWED_SYSTEM_KEYS.includes(key)) {\r\n      return true;\r\n    }\r\n    // Otherwise check for reserved prefixes\r\n    return !STORAGE_LIMITS.RESERVED_PREFIXES.some(prefix => key.startsWith(prefix));\r\n  }, {\r\n    message: 'Key uses reserved prefix'\r\n  });\r\n\r\nexport class StorageService {\r\n  private static transactionInProgress = false;\r\n  private static operationQueue: Array<() => Promise<void>> = [];\r\n  private static isProcessingQueue = false;\r\n  private rateLimiter = getRateLimiter();\r\n  // Track auth-related operations separately with more lenient limits\r\n  private static authOperationCount = 0;\r\n  private static authOperationResetTime = 0;\r\n\r\n  /**\r\n   * Validate storage key\r\n   */\r\n  private validateKey(key: string): string {\r\n    const result = storageKeySchema.safeParse(key);\r\n    if (!result.success) {\r\n      throw new Error(`Invalid storage key: ${result.error.errors[0]?.message}`);\r\n    }\r\n    return sanitizeStrict(result.data);\r\n  }\r\n\r\n  /**\r\n   * Check if value size is within limits\r\n   */\r\n  private validateValueSize(value: any): void {\r\n    const serialized = JSON.stringify(value);\r\n    if (serialized.length > STORAGE_LIMITS.MAX_VALUE_SIZE) {\r\n      throw new Error(`Value size exceeds limit of ${STORAGE_LIMITS.MAX_VALUE_SIZE / 1024}KB`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check storage quota before writing\r\n   */\r\n  private async checkStorageQuota(): Promise<void> {\r\n    const info = await this.getStorageInfo();\r\n    if (info.percentage > 90) {\r\n      throw new Error('Storage quota exceeded (90% full)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if this is an auth-related operation\r\n   */\r\n  private isAuthOperation(key: string): boolean {\r\n    const authKeys = ['currentUser', 'auth_token', 'refresh_token', 'auth_token_data', 'session_fingerprint'];\r\n    return authKeys.includes(key);\r\n  }\r\n\r\n  /**\r\n   * Check rate limit for auth operations (more lenient)\r\n   */\r\n  private checkAuthRateLimit(): boolean {\r\n    const now = Date.now();\r\n    \r\n    // Reset counter every minute\r\n    if (now - StorageService.authOperationResetTime > 60000) {\r\n      StorageService.authOperationCount = 0;\r\n      StorageService.authOperationResetTime = now;\r\n    }\r\n    \r\n    // Allow up to 500 auth operations per minute for testing\r\n    if (StorageService.authOperationCount >= 500) {\r\n      return false;\r\n    }\r\n    \r\n    StorageService.authOperationCount++;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Execute a function with retry logic\r\n   */\r\n  private async withRetry<T>(\r\n    operation: () => T,\r\n    maxRetries: number = 3,\r\n    delay: number = 100\r\n  ): Promise<T> {\r\n    let lastError: Error | null = null;\r\n    \r\n    for (let i = 0; i < maxRetries; i++) {\r\n      try {\r\n        return operation();\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        if (i < maxRetries - 1) {\r\n          await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));\r\n        }\r\n      }\r\n    }\r\n    \r\n    throw lastError || new Error('Operation failed after retries');\r\n  }\r\n\r\n  /**\r\n   * Process queued operations sequentially\r\n   */\r\n  private async processQueue(): Promise<void> {\r\n    if (StorageService.isProcessingQueue || StorageService.operationQueue.length === 0) {\r\n      return;\r\n    }\r\n\r\n    StorageService.isProcessingQueue = true;\r\n\r\n    while (StorageService.operationQueue.length > 0) {\r\n      const operation = StorageService.operationQueue.shift();\r\n      if (operation) {\r\n        try {\r\n          await operation();\r\n        } catch (error) {\r\n          console.error('Queue operation failed:', error);\r\n        }\r\n      }\r\n    }\r\n\r\n    StorageService.isProcessingQueue = false;\r\n  }\r\n\r\n  /**\r\n   * Queue an operation to prevent race conditions\r\n   */\r\n  private async queueOperation<T>(operation: () => Promise<T>, key?: string): Promise<T> {\r\n    // For auth operations, use more lenient rate limiting\r\n    if (key && this.isAuthOperation(key)) {\r\n      if (!this.checkAuthRateLimit()) {\r\n        throw new Error('Auth operation rate limit exceeded. Please wait a moment.');\r\n      }\r\n    } else {\r\n      // Check rate limit for non-auth storage operations\r\n      const rateLimitResult = this.rateLimiter.check('API_CALL', {\r\n        ...RATE_LIMITS.API_CALL,\r\n        maxAttempts: 1000, // Increased for testing\r\n        windowMs: 60 * 1000 // 1 minute window\r\n      });\r\n      \r\n      if (!rateLimitResult.allowed) {\r\n        throw new Error(`Rate limit exceeded. Please wait ${rateLimitResult.waitTime} seconds.`);\r\n      }\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      StorageService.operationQueue.push(async () => {\r\n        try {\r\n          const result = await operation();\r\n          resolve(result);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      });\r\n      \r\n      // Start processing queue if not already processing\r\n      this.processQueue();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get item from storage with validation\r\n   */\r\n  async getItem<T>(key: string, defaultValue: T): Promise<T> {\r\n    try {\r\n      // Validate key\r\n      const validatedKey = this.validateKey(key);\r\n\r\n      if (FEATURES.USE_MOCK_API) {\r\n        await new Promise(resolve => setTimeout(resolve, 50));\r\n      }\r\n\r\n      const item = await this.withRetry(() => localStorage.getItem(validatedKey));\r\n      \r\n      if (item === null) {\r\n        return defaultValue;\r\n      }\r\n\r\n      try {\r\n        const parsed = JSON.parse(item);\r\n        \r\n        // Sanitize the retrieved data\r\n        const sanitized = this.sanitizeStoredData(parsed);\r\n        \r\n        // Validate the parsed data matches expected type structure\r\n        if (this.isValidData(sanitized, defaultValue)) {\r\n          return sanitized as T;\r\n        } else {\r\n          console.warn(`Invalid data structure for key \"${validatedKey}\", using default`);\r\n          return defaultValue;\r\n        }\r\n      } catch (parseError) {\r\n        console.error(`Error parsing item \"${validatedKey}\":`, parseError);\r\n        \r\n        // Try to parse as number for backward compatibility\r\n        if (typeof defaultValue === 'number' && !isNaN(Number(item))) {\r\n          return Number(item) as T;\r\n        }\r\n        \r\n        return defaultValue;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error getting item \"${key}\" from storage:`, error);\r\n      return defaultValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set item in storage with queuing\r\n   */\r\n  async setItem<T>(key: string, value: T): Promise<boolean> {\r\n    return this.queueOperation(async () => {\r\n      try {\r\n        // Validate key\r\n        const validatedKey = this.validateKey(key);\r\n        \r\n        // Validate value size\r\n        this.validateValueSize(value);\r\n        \r\n        // Check storage quota\r\n        await this.checkStorageQuota();\r\n\r\n        if (FEATURES.USE_MOCK_API) {\r\n          await new Promise(resolve => setTimeout(resolve, 50));\r\n        }\r\n\r\n        const serialized = JSON.stringify(value);\r\n        \r\n        await this.withRetry(() => {\r\n          localStorage.setItem(validatedKey, serialized);\r\n          \r\n          // Verify write was successful\r\n          const verification = localStorage.getItem(validatedKey);\r\n          if (verification !== serialized) {\r\n            throw new Error('Storage write verification failed');\r\n          }\r\n        });\r\n\r\n        return true;\r\n      } catch (error) {\r\n        console.error(`Error setting item \"${key}\" in storage:`, error);\r\n        return false;\r\n      }\r\n    }, key);\r\n  }\r\n\r\n  /**\r\n   * Remove item from storage\r\n   */\r\n  async removeItem(key: string): Promise<boolean> {\r\n    return this.queueOperation(async () => {\r\n      try {\r\n        // Validate key\r\n        const validatedKey = this.validateKey(key);\r\n\r\n        if (FEATURES.USE_MOCK_API) {\r\n          await new Promise(resolve => setTimeout(resolve, 20));\r\n        }\r\n\r\n        await this.withRetry(() => localStorage.removeItem(validatedKey));\r\n        return true;\r\n      } catch (error) {\r\n        console.error(`Error removing item \"${key}\" from storage:`, error);\r\n        return false;\r\n      }\r\n    }, key);\r\n  }\r\n\r\n  /**\r\n   * Begin a transaction for atomic operations\r\n   */\r\n  beginTransaction(): StorageTransaction {\r\n    if (StorageService.transactionInProgress) {\r\n      throw new Error('Another transaction is already in progress');\r\n    }\r\n    \r\n    StorageService.transactionInProgress = true;\r\n    \r\n    return {\r\n      operations: [],\r\n      backup: new Map()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Commit a transaction atomically\r\n   */\r\n  async commitTransaction(transaction: StorageTransaction): Promise<boolean> {\r\n    try {\r\n      // Validate all operations first\r\n      for (const op of transaction.operations) {\r\n        this.validateKey(op.key);\r\n        if (op.type === 'set' && op.value !== undefined) {\r\n          this.validateValueSize(op.value);\r\n        }\r\n      }\r\n\r\n      // Check storage quota\r\n      await this.checkStorageQuota();\r\n\r\n      // Backup current values\r\n      for (const op of transaction.operations) {\r\n        if (op.type === 'set' || op.type === 'remove') {\r\n          const currentValue = localStorage.getItem(op.key);\r\n          transaction.backup.set(op.key, currentValue);\r\n        }\r\n      }\r\n\r\n      // Execute all operations\r\n      for (const op of transaction.operations) {\r\n        if (op.type === 'set') {\r\n          localStorage.setItem(op.key, JSON.stringify(op.value));\r\n        } else if (op.type === 'remove') {\r\n          localStorage.removeItem(op.key);\r\n        }\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      // Rollback on error\r\n      console.error('Transaction failed, rolling back:', error);\r\n      await this.rollbackTransaction(transaction);\r\n      return false;\r\n    } finally {\r\n      StorageService.transactionInProgress = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rollback a transaction\r\n   */\r\n  private async rollbackTransaction(transaction: StorageTransaction): Promise<void> {\r\n    try {\r\n      for (const [key, value] of transaction.backup.entries()) {\r\n        if (value === null) {\r\n          localStorage.removeItem(key);\r\n        } else {\r\n          localStorage.setItem(key, value);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Rollback failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update specific fields of an object in storage atomically\r\n   */\r\n  async updateItem<T extends object>(\r\n    key: string,\r\n    updates: Partial<T>\r\n  ): Promise<boolean> {\r\n    return this.queueOperation(async () => {\r\n      try {\r\n        // Validate key\r\n        const validatedKey = this.validateKey(key);\r\n        \r\n        const current = await this.getItem<T | null>(validatedKey, null);\r\n        \r\n        if (current === null) {\r\n          return await this.setItem(validatedKey, updates as T);\r\n        }\r\n\r\n        const updated = { ...current, ...updates };\r\n        return await this.setItem(validatedKey, updated);\r\n      } catch (error) {\r\n        console.error(`Error updating item \"${key}\" in storage:`, error);\r\n        return false;\r\n      }\r\n    }, key);\r\n  }\r\n\r\n  /**\r\n   * Get all keys matching a pattern\r\n   */\r\n  async getKeys(pattern?: string): Promise<string[]> {\r\n    try {\r\n      // Validate and sanitize pattern to prevent regex injection\r\n      const sanitizedPattern = pattern ? sanitizeStrict(pattern).substring(0, 50) : undefined;\r\n      \r\n      if (FEATURES.USE_MOCK_API) {\r\n        await new Promise(resolve => setTimeout(resolve, 20));\r\n      }\r\n\r\n      const keys: string[] = [];\r\n      const totalKeys = localStorage.length;\r\n      \r\n      // Limit the number of keys to prevent DoS\r\n      if (totalKeys > STORAGE_LIMITS.MAX_KEYS) {\r\n        console.warn(`Storage contains ${totalKeys} keys, limiting to ${STORAGE_LIMITS.MAX_KEYS}`);\r\n      }\r\n\r\n      for (let i = 0; i < Math.min(totalKeys, STORAGE_LIMITS.MAX_KEYS); i++) {\r\n        const key = localStorage.key(i);\r\n        if (key && (!sanitizedPattern || key.includes(sanitizedPattern))) {\r\n          // Only return keys that pass validation\r\n          try {\r\n            this.validateKey(key);\r\n            keys.push(key);\r\n          } catch {\r\n            // Skip invalid keys\r\n          }\r\n        }\r\n      }\r\n      return keys;\r\n    } catch (error) {\r\n      console.error('Error getting keys from storage:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if key exists\r\n   */\r\n  async hasKey(key: string): Promise<boolean> {\r\n    try {\r\n      // Validate key\r\n      const validatedKey = this.validateKey(key);\r\n\r\n      if (FEATURES.USE_MOCK_API) {\r\n        await new Promise(resolve => setTimeout(resolve, 10));\r\n      }\r\n\r\n      return localStorage.getItem(validatedKey) !== null;\r\n    } catch (error) {\r\n      console.error(`Error checking if key \"${key}\" exists:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all storage\r\n   */\r\n  async clear(preserveKeys?: string[]): Promise<boolean> {\r\n    return this.queueOperation(async () => {\r\n      try {\r\n        // Validate preserve keys\r\n        const validatedPreserveKeys = preserveKeys?.map(key => this.validateKey(key));\r\n\r\n        if (FEATURES.USE_MOCK_API) {\r\n          await new Promise(resolve => setTimeout(resolve, 100));\r\n        }\r\n\r\n        if (validatedPreserveKeys && validatedPreserveKeys.length > 0) {\r\n          // Preserve specified keys\r\n          const preserved: { [key: string]: any } = {};\r\n          for (const key of validatedPreserveKeys) {\r\n            const value = localStorage.getItem(key);\r\n            if (value !== null) {\r\n              preserved[key] = value;\r\n            }\r\n          }\r\n\r\n          localStorage.clear();\r\n\r\n          // Restore preserved keys\r\n          for (const [key, value] of Object.entries(preserved)) {\r\n            localStorage.setItem(key, value);\r\n          }\r\n        } else {\r\n          localStorage.clear();\r\n        }\r\n\r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error clearing storage:', error);\r\n        return false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get storage size information\r\n   */\r\n  async getStorageInfo(): Promise<{\r\n    used: number;\r\n    quota: number;\r\n    percentage: number;\r\n  }> {\r\n    try {\r\n      if ('storage' in navigator && 'estimate' in navigator.storage) {\r\n        const estimate = await navigator.storage.estimate();\r\n        return {\r\n          used: estimate.usage || 0,\r\n          quota: estimate.quota || 0,\r\n          percentage: estimate.quota ? ((estimate.usage || 0) / estimate.quota) * 100 : 0,\r\n        };\r\n      }\r\n\r\n      // Fallback calculation\r\n      let totalSize = 0;\r\n      let keyCount = 0;\r\n      \r\n      for (let i = 0; i < localStorage.length && i < STORAGE_LIMITS.MAX_KEYS; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key) {\r\n          totalSize += key.length + (localStorage.getItem(key) || '').length;\r\n          keyCount++;\r\n        }\r\n      }\r\n\r\n      return {\r\n        used: totalSize,\r\n        quota: STORAGE_LIMITS.MAX_TOTAL_SIZE,\r\n        percentage: (totalSize / STORAGE_LIMITS.MAX_TOTAL_SIZE) * 100,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error getting storage info:', error);\r\n      return { used: 0, quota: 0, percentage: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Batch set multiple items atomically\r\n   */\r\n  async batchSet(items: Array<{ key: string; value: any }>): Promise<boolean> {\r\n    // Limit batch size to prevent DoS\r\n    if (items.length > STORAGE_LIMITS.MAX_BATCH_SIZE) {\r\n      throw new Error(`Batch size exceeds limit of ${STORAGE_LIMITS.MAX_BATCH_SIZE} items`);\r\n    }\r\n\r\n    const transaction = this.beginTransaction();\r\n    \r\n    for (const item of items) {\r\n      transaction.operations.push({\r\n        type: 'set',\r\n        key: item.key,\r\n        value: item.value\r\n      });\r\n    }\r\n    \r\n    return this.commitTransaction(transaction);\r\n  }\r\n\r\n  /**\r\n   * Validate data structure matches expected type\r\n   */\r\n  private isValidData<T>(data: any, defaultValue: T): boolean {\r\n    // If default is null, accept any non-null value\r\n    if (defaultValue === null) {\r\n      return data !== null && data !== undefined;\r\n    }\r\n    \r\n    // For primitive types (string, number, boolean), just check type\r\n    const primitiveTypes = ['string', 'number', 'boolean'];\r\n    if (primitiveTypes.includes(typeof defaultValue)) {\r\n      return typeof data === typeof defaultValue;\r\n    }\r\n\r\n    // Array validation\r\n    if (Array.isArray(defaultValue)) {\r\n      return Array.isArray(data);\r\n    }\r\n\r\n    // Object validation\r\n    if (typeof defaultValue === 'object') {\r\n      if (data === null || typeof data !== 'object') {\r\n        return false;\r\n      }\r\n      \r\n      // Check if critical keys exist\r\n      const defaultKeys = Object.keys(defaultValue);\r\n      \r\n      // Allow data to have more keys than default (for backward compatibility)\r\n      // but it must have at least the default keys\r\n      for (const key of defaultKeys) {\r\n        if (!(key in data)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sanitize data retrieved from storage\r\n   */\r\n  private sanitizeStoredData(data: any): any {\r\n    if (data === null || data === undefined) {\r\n      return data;\r\n    }\r\n\r\n    if (typeof data === 'string') {\r\n      return sanitizeStrict(data);\r\n    }\r\n\r\n    if (typeof data === 'object') {\r\n      return sanitizeObject(data, {\r\n        maxDepth: 10,\r\n        keySanitizer: (key) => sanitizeStrict(key),\r\n        valueSanitizer: (value) => {\r\n          if (typeof value === 'string') {\r\n            return sanitizeStrict(value);\r\n          }\r\n          return value;\r\n        },\r\n      });\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Export all wallet data for backup\r\n   */\r\n  async exportWalletData(): Promise<any> {\r\n    // Check rate limit for export operations\r\n    const rateLimitResult = this.rateLimiter.check('API_CALL', {\r\n      maxAttempts: 5,\r\n      windowMs: 60 * 60 * 1000 // 5 exports per hour\r\n    });\r\n    if (!rateLimitResult.allowed) {\r\n      throw new Error(`Export rate limit exceeded. Please wait ${rateLimitResult.waitTime} seconds.`);\r\n    }\r\n\r\n    const walletKeys = await this.getKeys('wallet_');\r\n    const data: any = {};\r\n    \r\n    // Limit export size\r\n    let exportSize = 0;\r\n    const maxExportSize = 2 * 1024 * 1024; // 2MB limit for exports\r\n    \r\n    for (const key of walletKeys) {\r\n      const value = await this.getItem(key, null);\r\n      if (value !== null) {\r\n        const serialized = JSON.stringify(value);\r\n        exportSize += serialized.length;\r\n        \r\n        if (exportSize > maxExportSize) {\r\n          throw new Error('Export size exceeds 2MB limit');\r\n        }\r\n        \r\n        data[key] = value;\r\n      }\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Import wallet data from backup\r\n   */\r\n  async importWalletData(data: any): Promise<boolean> {\r\n    try {\r\n      // Validate import data structure\r\n      if (!data || typeof data !== 'object') {\r\n        throw new Error('Invalid import data format');\r\n      }\r\n\r\n      // Check rate limit for import operations\r\n      const rateLimitResult = this.rateLimiter.check('API_CALL', {\r\n        maxAttempts: 3,\r\n        windowMs: 60 * 60 * 1000 // 3 imports per hour\r\n      });\r\n      if (!rateLimitResult.allowed) {\r\n        throw new Error(`Import rate limit exceeded. Please wait ${rateLimitResult.waitTime} seconds.`);\r\n      }\r\n\r\n      // Validate and sanitize all keys and values\r\n      const items: Array<{ key: string; value: any }> = [];\r\n      \r\n      for (const [key, value] of Object.entries(data)) {\r\n        // Only allow wallet_ prefixed keys\r\n        if (!key.startsWith('wallet_')) {\r\n          console.warn(`Skipping non-wallet key during import: ${key}`);\r\n          continue;\r\n        }\r\n        \r\n        try {\r\n          const validatedKey = this.validateKey(key);\r\n          const sanitizedValue = this.sanitizeStoredData(value);\r\n          \r\n          items.push({\r\n            key: validatedKey,\r\n            value: sanitizedValue\r\n          });\r\n        } catch (error) {\r\n          console.error(`Failed to import key \"${key}\":`, error);\r\n        }\r\n      }\r\n      \r\n      if (items.length === 0) {\r\n        throw new Error('No valid data to import');\r\n      }\r\n      \r\n      return await this.batchSet(items);\r\n    } catch (error) {\r\n      console.error('Error importing wallet data:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const storageService = new StorageService();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1669, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/auth.service.ts"],"sourcesContent":["// src/services/auth.service.ts\r\n\r\nimport { User } from '@/context/AuthContext';\r\nimport { storageService } from './storage.service';\r\nimport { FEATURES, API_ENDPOINTS, API_BASE_URL, buildApiUrl, apiCall, ApiResponse, AUTH_TOKEN_KEY, REFRESH_TOKEN_KEY } from './api.config';\r\n\r\nexport interface LoginRequest {\r\n  username: string;\r\n  password?: string;\r\n  role: 'buyer' | 'seller' | 'admin';\r\n}\r\n\r\nexport interface SignupRequest {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  role: 'buyer' | 'seller';\r\n}\r\n\r\nexport interface AuthResponse {\r\n  user: User;\r\n  token?: string;\r\n  refreshToken?: string;\r\n}\r\n\r\nexport interface UsernameCheckResponse {\r\n  available: boolean;\r\n  message?: string;\r\n}\r\n\r\nexport interface PasswordResetResponse {\r\n  message: string;\r\n}\r\n\r\n/**\r\n * Authentication Service - API Only\r\n */\r\nexport class AuthService {\r\n  private tokenRefreshTimer: NodeJS.Timeout | null = null;\r\n  private isRefreshing = false;\r\n  private refreshSubscribers: ((token: string) => void)[] = [];\r\n  private readonly TOKEN_REFRESH_INTERVAL = 25 * 60 * 1000; // 25 minutes\r\n\r\n  constructor() {\r\n    if (typeof window !== 'undefined') {\r\n      this.initializeInterceptor();\r\n      this.initializeSessionPersistence();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize fetch interceptor for auth headers\r\n   */\r\n  private initializeInterceptor() {\r\n    const originalFetch = window.fetch;\r\n\r\n    window.fetch = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {\r\n      const token = await this.getValidToken();\r\n      \r\n      if (token && API_BASE_URL) {\r\n        const url = typeof input === 'string' ? input : input.toString();\r\n        if (url.startsWith(API_BASE_URL)) {\r\n          init = init || {};\r\n          init.headers = {\r\n            ...init.headers,\r\n            'Authorization': `Bearer ${token}`,\r\n          };\r\n        }\r\n      }\r\n\r\n      const response = await originalFetch(input, init);\r\n\r\n      // Handle 401 responses\r\n      if (response.status === 401) {\r\n        if (!this.isRefreshing) {\r\n          this.isRefreshing = true;\r\n\r\n          try {\r\n            const refreshResult = await this.refreshToken();\r\n            \r\n            if (refreshResult.success && refreshResult.data) {\r\n              await this.storeTokens(refreshResult.data.token, refreshResult.data.refreshToken);\r\n              this.refreshSubscribers.forEach(callback => callback(refreshResult.data!.token));\r\n              this.refreshSubscribers = [];\r\n\r\n              if (init?.headers) {\r\n                (init.headers as any)['Authorization'] = `Bearer ${refreshResult.data.token}`;\r\n              }\r\n              return originalFetch(input, init);\r\n            } else {\r\n              await this.logout();\r\n              window.location.href = '/login';\r\n            }\r\n          } finally {\r\n            this.isRefreshing = false;\r\n          }\r\n        } else {\r\n          return new Promise((resolve) => {\r\n            this.refreshSubscribers.push((token: string) => {\r\n              if (init?.headers) {\r\n                (init.headers as any)['Authorization'] = `Bearer ${token}`;\r\n              }\r\n              resolve(originalFetch(input, init));\r\n            });\r\n          });\r\n        }\r\n      }\r\n\r\n      return response;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get valid token from storage\r\n   */\r\n  private async getValidToken(): Promise<string | null> {\r\n    const token = await storageService.getItem<string | null>(AUTH_TOKEN_KEY, null);\r\n    return token;\r\n  }\r\n\r\n  /**\r\n   * Store tokens securely\r\n   */\r\n  private async storeTokens(token: string, refreshToken?: string): Promise<void> {\r\n    await storageService.setItem(AUTH_TOKEN_KEY, token);\r\n    \r\n    if (refreshToken) {\r\n      await storageService.setItem(REFRESH_TOKEN_KEY, refreshToken);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize session persistence\r\n   */\r\n  private async initializeSessionPersistence() {\r\n    try {\r\n      const token = await storageService.getItem<string | null>(AUTH_TOKEN_KEY, null);\r\n      const user = await storageService.getItem<User | null>('currentUser', null);\r\n\r\n      if (token && user) {\r\n        const result = await apiCall<User>(API_ENDPOINTS.AUTH.ME);\r\n        \r\n        if (result.success && result.data) {\r\n          await storageService.setItem('currentUser', result.data);\r\n          this.setupTokenRefreshTimer();\r\n        } else {\r\n          await this.clearAuthState();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Session persistence error:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up automatic token refresh\r\n   */\r\n  private setupTokenRefreshTimer() {\r\n    if (this.tokenRefreshTimer) {\r\n      clearTimeout(this.tokenRefreshTimer);\r\n    }\r\n\r\n    this.tokenRefreshTimer = setTimeout(async () => {\r\n      const result = await this.refreshToken();\r\n      if (result.success) {\r\n        this.setupTokenRefreshTimer();\r\n      }\r\n    }, this.TOKEN_REFRESH_INTERVAL);\r\n  }\r\n\r\n  /**\r\n   * Clear authentication state\r\n   */\r\n  private async clearAuthState() {\r\n    await storageService.removeItem('currentUser');\r\n    await storageService.removeItem(AUTH_TOKEN_KEY);\r\n    await storageService.removeItem(REFRESH_TOKEN_KEY);\r\n    \r\n    if (this.tokenRefreshTimer) {\r\n      clearTimeout(this.tokenRefreshTimer);\r\n      this.tokenRefreshTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login user\r\n   */\r\n  async login(request: LoginRequest): Promise<ApiResponse<AuthResponse>> {\r\n    try {\r\n      const response = await apiCall<AuthResponse>(API_ENDPOINTS.AUTH.LOGIN, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          username: request.username,\r\n          password: request.password,\r\n          role: request.role,\r\n        }),\r\n      });\r\n\r\n      if (response.success && response.data) {\r\n        if (response.data.token) {\r\n          await this.storeTokens(response.data.token, response.data.refreshToken);\r\n        }\r\n\r\n        await storageService.setItem('currentUser', response.data.user);\r\n        this.setupTokenRefreshTimer();\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: 'Login failed. Please try again.',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sign up new user\r\n   */\r\n  async signup(request: SignupRequest): Promise<ApiResponse<AuthResponse>> {\r\n    try {\r\n      const response = await apiCall<AuthResponse>(API_ENDPOINTS.AUTH.SIGNUP, {\r\n        method: 'POST',\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (response.success && response.data) {\r\n        if (response.data.token) {\r\n          await this.storeTokens(response.data.token, response.data.refreshToken);\r\n        }\r\n\r\n        await storageService.setItem('currentUser', response.data.user);\r\n        this.setupTokenRefreshTimer();\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Signup error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: 'Signup failed. Please try again.',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logout current user\r\n   */\r\n  async logout(): Promise<ApiResponse<void>> {\r\n    try {\r\n      await apiCall(API_ENDPOINTS.AUTH.LOGOUT, {\r\n        method: 'POST',\r\n      });\r\n    } catch (error) {\r\n      console.error('Logout API error:', error);\r\n    }\r\n\r\n    await this.clearAuthState();\r\n    return { success: true };\r\n  }\r\n\r\n  /**\r\n   * Get current authenticated user\r\n   */\r\n  async getCurrentUser(): Promise<ApiResponse<User | null>> {\r\n    try {\r\n      const user = await storageService.getItem<User | null>('currentUser', null);\r\n      \r\n      if (!user) {\r\n        return { success: true, data: null };\r\n      }\r\n\r\n      const token = await storageService.getItem<string | null>(AUTH_TOKEN_KEY, null);\r\n      if (!token) {\r\n        return { success: true, data: null };\r\n      }\r\n\r\n      const response = await apiCall<User>(API_ENDPOINTS.AUTH.ME);\r\n      if (response.success && response.data) {\r\n        await storageService.setItem('currentUser', response.data);\r\n        return response;\r\n      }\r\n\r\n      return { success: true, data: user };\r\n    } catch (error) {\r\n      console.error('Get current user error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get current user' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update current user\r\n   */\r\n  async updateCurrentUser(updates: Partial<User>): Promise<ApiResponse<User>> {\r\n    try {\r\n      const currentUserResult = await this.getCurrentUser();\r\n      if (!currentUserResult.success || !currentUserResult.data) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'No user to update' },\r\n        };\r\n      }\r\n\r\n      const currentUser = currentUserResult.data;\r\n      \r\n      const response = await apiCall<User>(\r\n        buildApiUrl(API_ENDPOINTS.USERS.UPDATE_PROFILE, { username: currentUser.username }),\r\n        {\r\n          method: 'PATCH',\r\n          body: JSON.stringify(updates),\r\n        }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        await storageService.setItem('currentUser', response.data);\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Update user error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to update user' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if username is available\r\n   */\r\n  async checkUsername(username: string): Promise<ApiResponse<UsernameCheckResponse>> {\r\n    try {\r\n      return await apiCall<UsernameCheckResponse>(\r\n        `${API_ENDPOINTS.AUTH.VERIFY_USERNAME}?username=${encodeURIComponent(username)}`\r\n      );\r\n    } catch (error) {\r\n      console.error('Check username error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to check username availability' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh authentication token\r\n   */\r\n  async refreshToken(): Promise<ApiResponse<{ token: string; refreshToken: string }>> {\r\n    try {\r\n      const refreshToken = await storageService.getItem<string | null>(REFRESH_TOKEN_KEY, null);\r\n      if (!refreshToken) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'No refresh token available' },\r\n        };\r\n      }\r\n\r\n      const response = await apiCall<{ token: string; refreshToken: string }>(\r\n        API_ENDPOINTS.AUTH.REFRESH,\r\n        {\r\n          method: 'POST',\r\n          body: JSON.stringify({ refreshToken }),\r\n        }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        await this.storeTokens(response.data.token, response.data.refreshToken);\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Refresh token error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to refresh token' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user is authenticated\r\n   */\r\n  async isAuthenticated(): Promise<boolean> {\r\n    const token = await this.getValidToken();\r\n    return !!token;\r\n  }\r\n\r\n  /**\r\n   * Get stored auth token\r\n   */\r\n  async getAuthToken(): Promise<string | null> {\r\n    return this.getValidToken();\r\n  }\r\n\r\n  /**\r\n   * Request password reset\r\n   */\r\n  async forgotPassword(email: string): Promise<ApiResponse<PasswordResetResponse>> {\r\n    try {\r\n      return await apiCall<PasswordResetResponse>(API_ENDPOINTS.AUTH.FORGOT_PASSWORD, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ email }),\r\n      });\r\n    } catch (error) {\r\n      console.error('Forgot password error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: 'Failed to process password reset request. Please try again.',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset password with token\r\n   */\r\n  async resetPassword(token: string, newPassword: string): Promise<ApiResponse<PasswordResetResponse>> {\r\n    try {\r\n      return await apiCall<PasswordResetResponse>(API_ENDPOINTS.AUTH.RESET_PASSWORD, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          token,\r\n          newPassword,\r\n        }),\r\n      });\r\n    } catch (error) {\r\n      console.error('Reset password error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: 'Failed to reset password. Please try again.',\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const authService = new AuthService();"],"names":[],"mappings":"AAAA,+BAA+B;;;;;AAG/B;AACA;AAAA;;;AAiCO,MAAM;IACH,oBAA2C,KAAK;IAChD,eAAe,MAAM;IACrB,qBAAkD,EAAE,CAAC;IAC5C,yBAAyB,KAAK,KAAK,KAAK;IAEzD,aAAc;QACZ;;IAIF;IAEA;;GAEC,GACD,AAAQ,wBAAwB;QAC9B,MAAM,gBAAgB,OAAO,KAAK;QAElC,OAAO,KAAK,GAAG,OAAO,OAA0B;YAC9C,MAAM,QAAQ,MAAM,IAAI,CAAC,aAAa;YAEtC,IAAI,SAAS,gJAAA,CAAA,eAAY,EAAE;gBACzB,MAAM,MAAM,OAAO,UAAU,WAAW,QAAQ,MAAM,QAAQ;gBAC9D,IAAI,IAAI,UAAU,CAAC,gJAAA,CAAA,eAAY,GAAG;oBAChC,OAAO,QAAQ,CAAC;oBAChB,KAAK,OAAO,GAAG;wBACb,GAAG,KAAK,OAAO;wBACf,iBAAiB,CAAC,OAAO,EAAE,OAAO;oBACpC;gBACF;YACF;YAEA,MAAM,WAAW,MAAM,cAAc,OAAO;YAE5C,uBAAuB;YACvB,IAAI,SAAS,MAAM,KAAK,KAAK;gBAC3B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;oBACtB,IAAI,CAAC,YAAY,GAAG;oBAEpB,IAAI;wBACF,MAAM,gBAAgB,MAAM,IAAI,CAAC,YAAY;wBAE7C,IAAI,cAAc,OAAO,IAAI,cAAc,IAAI,EAAE;4BAC/C,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,IAAI,CAAC,KAAK,EAAE,cAAc,IAAI,CAAC,YAAY;4BAChF,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAA,WAAY,SAAS,cAAc,IAAI,CAAE,KAAK;4BAC9E,IAAI,CAAC,kBAAkB,GAAG,EAAE;4BAE5B,IAAI,MAAM,SAAS;gCAChB,KAAK,OAAO,AAAQ,CAAC,gBAAgB,GAAG,CAAC,OAAO,EAAE,cAAc,IAAI,CAAC,KAAK,EAAE;4BAC/E;4BACA,OAAO,cAAc,OAAO;wBAC9B,OAAO;4BACL,MAAM,IAAI,CAAC,MAAM;4BACjB,OAAO,QAAQ,CAAC,IAAI,GAAG;wBACzB;oBACF,SAAU;wBACR,IAAI,CAAC,YAAY,GAAG;oBACtB;gBACF,OAAO;oBACL,OAAO,IAAI,QAAQ,CAAC;wBAClB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;4BAC5B,IAAI,MAAM,SAAS;gCAChB,KAAK,OAAO,AAAQ,CAAC,gBAAgB,GAAG,CAAC,OAAO,EAAE,OAAO;4BAC5D;4BACA,QAAQ,cAAc,OAAO;wBAC/B;oBACF;gBACF;YACF;YAEA,OAAO;QACT;IACF;IAEA;;GAEC,GACD,MAAc,gBAAwC;QACpD,MAAM,QAAQ,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAgB,gJAAA,CAAA,iBAAc,EAAE;QAC1E,OAAO;IACT;IAEA;;GAEC,GACD,MAAc,YAAY,KAAa,EAAE,YAAqB,EAAiB;QAC7E,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,gJAAA,CAAA,iBAAc,EAAE;QAE7C,IAAI,cAAc;YAChB,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,gJAAA,CAAA,oBAAiB,EAAE;QAClD;IACF;IAEA;;GAEC,GACD,MAAc,+BAA+B;QAC3C,IAAI;YACF,MAAM,QAAQ,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAgB,gJAAA,CAAA,iBAAc,EAAE;YAC1E,MAAM,OAAO,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAc,eAAe;YAEtE,IAAI,SAAS,MAAM;gBACjB,MAAM,SAAS,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAQ,gJAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,EAAE;gBAExD,IAAI,OAAO,OAAO,IAAI,OAAO,IAAI,EAAE;oBACjC,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,eAAe,OAAO,IAAI;oBACvD,IAAI,CAAC,sBAAsB;gBAC7B,OAAO;oBACL,MAAM,IAAI,CAAC,cAAc;gBAC3B;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;QAC9C;IACF;IAEA;;GAEC,GACD,AAAQ,yBAAyB;QAC/B,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,aAAa,IAAI,CAAC,iBAAiB;QACrC;QAEA,IAAI,CAAC,iBAAiB,GAAG,WAAW;YAClC,MAAM,SAAS,MAAM,IAAI,CAAC,YAAY;YACtC,IAAI,OAAO,OAAO,EAAE;gBAClB,IAAI,CAAC,sBAAsB;YAC7B;QACF,GAAG,IAAI,CAAC,sBAAsB;IAChC;IAEA;;GAEC,GACD,MAAc,iBAAiB;QAC7B,MAAM,qIAAA,CAAA,iBAAc,CAAC,UAAU,CAAC;QAChC,MAAM,qIAAA,CAAA,iBAAc,CAAC,UAAU,CAAC,gJAAA,CAAA,iBAAc;QAC9C,MAAM,qIAAA,CAAA,iBAAc,CAAC,UAAU,CAAC,gJAAA,CAAA,oBAAiB;QAEjD,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,aAAa,IAAI,CAAC,iBAAiB;YACnC,IAAI,CAAC,iBAAiB,GAAG;QAC3B;IACF;IAEA;;GAEC,GACD,MAAM,MAAM,OAAqB,EAAsC;QACrE,IAAI;YACF,MAAM,WAAW,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAgB,gJAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,KAAK,EAAE;gBACrE,QAAQ;gBACR,MAAM,KAAK,SAAS,CAAC;oBACnB,UAAU,QAAQ,QAAQ;oBAC1B,UAAU,QAAQ,QAAQ;oBAC1B,MAAM,QAAQ,IAAI;gBACpB;YACF;YAEA,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,IAAI,SAAS,IAAI,CAAC,KAAK,EAAE;oBACvB,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE,SAAS,IAAI,CAAC,YAAY;gBACxE;gBAEA,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,eAAe,SAAS,IAAI,CAAC,IAAI;gBAC9D,IAAI,CAAC,sBAAsB;YAC7B;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gBAAgB;YAC9B,OAAO;gBACL,SAAS;gBACT,OAAO;oBACL,SAAS;gBACX;YACF;QACF;IACF;IAEA;;GAEC,GACD,MAAM,OAAO,OAAsB,EAAsC;QACvE,IAAI;YACF,MAAM,WAAW,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAgB,gJAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,MAAM,EAAE;gBACtE,QAAQ;gBACR,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,IAAI,SAAS,IAAI,CAAC,KAAK,EAAE;oBACvB,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE,SAAS,IAAI,CAAC,YAAY;gBACxE;gBAEA,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,eAAe,SAAS,IAAI,CAAC,IAAI;gBAC9D,IAAI,CAAC,sBAAsB;YAC7B;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iBAAiB;YAC/B,OAAO;gBACL,SAAS;gBACT,OAAO;oBACL,SAAS;gBACX;YACF;QACF;IACF;IAEA;;GAEC,GACD,MAAM,SAAqC;QACzC,IAAI;YACF,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAE,gJAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,MAAM,EAAE;gBACvC,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qBAAqB;QACrC;QAEA,MAAM,IAAI,CAAC,cAAc;QACzB,OAAO;YAAE,SAAS;QAAK;IACzB;IAEA;;GAEC,GACD,MAAM,iBAAoD;QACxD,IAAI;YACF,MAAM,OAAO,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAc,eAAe;YAEtE,IAAI,CAAC,MAAM;gBACT,OAAO;oBAAE,SAAS;oBAAM,MAAM;gBAAK;YACrC;YAEA,MAAM,QAAQ,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAgB,gJAAA,CAAA,iBAAc,EAAE;YAC1E,IAAI,CAAC,OAAO;gBACV,OAAO;oBAAE,SAAS;oBAAM,MAAM;gBAAK;YACrC;YAEA,MAAM,WAAW,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAQ,gJAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,EAAE;YAC1D,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,eAAe,SAAS,IAAI;gBACzD,OAAO;YACT;YAEA,OAAO;gBAAE,SAAS;gBAAM,MAAM;YAAK;QACrC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO;gBACL,SAAS;gBACT,OAAO;oBAAE,SAAS;gBAA6B;YACjD;QACF;IACF;IAEA;;GAEC,GACD,MAAM,kBAAkB,OAAsB,EAA8B;QAC1E,IAAI;YACF,MAAM,oBAAoB,MAAM,IAAI,CAAC,cAAc;YACnD,IAAI,CAAC,kBAAkB,OAAO,IAAI,CAAC,kBAAkB,IAAI,EAAE;gBACzD,OAAO;oBACL,SAAS;oBACT,OAAO;wBAAE,SAAS;oBAAoB;gBACxC;YACF;YAEA,MAAM,cAAc,kBAAkB,IAAI;YAE1C,MAAM,WAAW,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAC3B,CAAA,GAAA,gJAAA,CAAA,cAAW,AAAD,EAAE,gJAAA,CAAA,gBAAa,CAAC,KAAK,CAAC,cAAc,EAAE;gBAAE,UAAU,YAAY,QAAQ;YAAC,IACjF;gBACE,QAAQ;gBACR,MAAM,KAAK,SAAS,CAAC;YACvB;YAGF,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,eAAe,SAAS,IAAI;YAC3D;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,sBAAsB;YACpC,OAAO;gBACL,SAAS;gBACT,OAAO;oBAAE,SAAS;gBAAwB;YAC5C;QACF;IACF;IAEA;;GAEC,GACD,MAAM,cAAc,QAAgB,EAA+C;QACjF,IAAI;YACF,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EACjB,GAAG,gJAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,mBAAmB,WAAW;QAEpF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO;gBACL,SAAS;gBACT,OAAO;oBAAE,SAAS;gBAAwC;YAC5D;QACF;IACF;IAEA;;GAEC,GACD,MAAM,eAA8E;QAClF,IAAI;YACF,MAAM,eAAe,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAgB,gJAAA,CAAA,oBAAiB,EAAE;YACpF,IAAI,CAAC,cAAc;gBACjB,OAAO;oBACL,SAAS;oBACT,OAAO;wBAAE,SAAS;oBAA6B;gBACjD;YACF;YAEA,MAAM,WAAW,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAC3B,gJAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,OAAO,EAC1B;gBACE,QAAQ;gBACR,MAAM,KAAK,SAAS,CAAC;oBAAE;gBAAa;YACtC;YAGF,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE,SAAS,IAAI,CAAC,YAAY;YACxE;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;YACtC,OAAO;gBACL,SAAS;gBACT,OAAO;oBAAE,SAAS;gBAA0B;YAC9C;QACF;IACF;IAEA;;GAEC,GACD,MAAM,kBAAoC;QACxC,MAAM,QAAQ,MAAM,IAAI,CAAC,aAAa;QACtC,OAAO,CAAC,CAAC;IACX;IAEA;;GAEC,GACD,MAAM,eAAuC;QAC3C,OAAO,IAAI,CAAC,aAAa;IAC3B;IAEA;;GAEC,GACD,MAAM,eAAe,KAAa,EAA+C;QAC/E,IAAI;YACF,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAyB,gJAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,eAAe,EAAE;gBAC9E,QAAQ;gBACR,MAAM,KAAK,SAAS,CAAC;oBAAE;gBAAM;YAC/B;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO;gBACL,SAAS;gBACT,OAAO;oBACL,SAAS;gBACX;YACF;QACF;IACF;IAEA;;GAEC,GACD,MAAM,cAAc,KAAa,EAAE,WAAmB,EAA+C;QACnG,IAAI;YACF,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAyB,gJAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,cAAc,EAAE;gBAC7E,QAAQ;gBACR,MAAM,KAAK,SAAS,CAAC;oBACnB;oBACA;gBACF;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO;gBACL,SAAS;gBACT,OAAO;oBACL,SAAS;gBACX;YACF;QACF;IACF;AACF;AAGO,MAAM,cAAc,IAAI","debugId":null}},
    {"offset": {"line": 2045, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/users.service.enhanced.ts"],"sourcesContent":["// src/services/users.service.enhanced.ts\r\n\r\nimport { User } from '@/context/AuthContext';\r\nimport { storageService } from './storage.service';\r\nimport { FEATURES, API_ENDPOINTS, apiCall, ApiResponse, API_BASE_URL } from './api.config';\r\nimport { securityService } from './security.service';\r\nimport { sanitizeStrict, sanitizeUsername, sanitizeUrl, sanitizeEmail } from '@/utils/security/sanitization';\r\nimport { getRateLimiter } from '@/utils/security/rate-limiter';\r\nimport { z } from 'zod';\r\nimport { validateSchema } from '@/utils/validation/schemas';\r\nimport {\r\n  UserProfile,\r\n  UserPreferences,\r\n  UserSearchParams,\r\n  VerificationRequest,\r\n  BanRequest,\r\n  BatchUserUpdate,\r\n  BatchOperationResult,\r\n  CachedUser,\r\n  CachedUserProfile,\r\n  UserError,\r\n  UserErrorCode,\r\n  UsersResponse,\r\n  ProfileResponse,\r\n  SubscriptionInfo,\r\n  UserActivity,\r\n  isValidUsername,\r\n  isValidBio,\r\n  isValidSubscriptionPrice,\r\n  calculateProfileCompleteness,\r\n} from '@/types/users';\r\n\r\n// Cache configuration\r\nconst CACHE_CONFIG = {\r\n  USER_TTL: 5 * 60 * 1000,    // 5 minutes\r\n  PROFILE_TTL: 3 * 60 * 1000, // 3 minutes\r\n  LIST_TTL: 60 * 1000,        // 1 minute\r\n};\r\n\r\n// Security limits\r\nconst SECURITY_LIMITS = {\r\n  MAX_BATCH_SIZE: 100,\r\n  MAX_QUERY_LENGTH: 100,\r\n  MAX_PAGE_SIZE: 100,\r\n  MAX_ACTIVITY_HISTORY: 1000,\r\n  MAX_GALLERY_IMAGES: 20,\r\n  MAX_FILE_SIZE: 5 * 1024 * 1024, // 5MB\r\n};\r\n\r\n// Custom validator for profile picture URLs that accepts placeholders\r\nconst profilePicValidator = z.string().refine(\r\n  (val) => {\r\n    // Accept null/empty\r\n    if (!val || val === '') return true;\r\n    \r\n    // Accept placeholder URLs\r\n    if (val.includes('placeholder')) return true;\r\n    \r\n    // Accept relative URLs from backend\r\n    if (val.startsWith('/uploads/')) return true;\r\n    \r\n    // Validate standard URLs\r\n    try {\r\n      const url = new URL(val);\r\n      return url.protocol === 'http:' || url.protocol === 'https:';\r\n    } catch {\r\n      return false;\r\n    }\r\n  },\r\n  { message: 'Invalid profile picture URL' }\r\n);\r\n\r\n// Custom validator for gallery images\r\nconst galleryImageValidator = z.string().refine(\r\n  (val) => {\r\n    // Accept relative URLs from backend\r\n    if (val.startsWith('/uploads/')) return true;\r\n    \r\n    // Validate standard URLs\r\n    try {\r\n      const url = new URL(val);\r\n      return url.protocol === 'http:' || url.protocol === 'https:';\r\n    } catch {\r\n      return false;\r\n    }\r\n  },\r\n  { message: 'Invalid gallery image URL' }\r\n);\r\n\r\n// Validation schemas (local to this file)\r\nconst userSearchSchema = z.object({\r\n  query: z.string().max(SECURITY_LIMITS.MAX_QUERY_LENGTH).transform(sanitizeStrict).optional(),\r\n  role: z.enum(['buyer', 'seller', 'admin']).optional(),\r\n  verified: z.boolean().optional(),\r\n  tier: z.enum(['Tease', 'Flirt', 'Obsession', 'Desire', 'Goddess']).optional(),\r\n  minRating: z.number().min(0).max(5).optional(),\r\n  hasListings: z.boolean().optional(),\r\n  isActive: z.boolean().optional(),\r\n  sortBy: z.enum(['username', 'joinDate', 'rating', 'sales', 'lastActive']).optional(),\r\n  sortOrder: z.enum(['asc', 'desc']).optional(),\r\n  page: z.number().int().min(1).optional(),\r\n  limit: z.number().int().min(1).max(SECURITY_LIMITS.MAX_PAGE_SIZE).optional(),\r\n});\r\n\r\nconst userProfileUpdateSchema = z.object({\r\n  bio: z.string().max(500).transform(sanitizeStrict).optional(),\r\n  profilePic: profilePicValidator.nullable().optional(),\r\n  // Always KEEP this as string; convert numbers to string before sending\r\n  subscriptionPrice: z.string().regex(/^\\d+(\\.\\d{1,2})?$/).optional(),\r\n  galleryImages: z.array(galleryImageValidator).max(SECURITY_LIMITS.MAX_GALLERY_IMAGES).optional(),\r\n  socialLinks: z\r\n    .object({\r\n      twitter: z.string().url().transform(sanitizeUrl).optional(),\r\n      instagram: z.string().url().transform(sanitizeUrl).optional(),\r\n      tiktok: z.string().url().transform(sanitizeUrl).optional(),\r\n      website: z.string().url().transform(sanitizeUrl).optional(),\r\n    })\r\n    .optional(),\r\n});\r\n\r\nconst userPreferencesSchema = z\r\n  .object({\r\n    notifications: z\r\n      .object({\r\n        messages: z.boolean(),\r\n        orders: z.boolean(),\r\n        promotions: z.boolean(),\r\n        newsletters: z.boolean(),\r\n      })\r\n      .partial(),\r\n    privacy: z\r\n      .object({\r\n        showOnlineStatus: z.boolean(),\r\n        allowDirectMessages: z.boolean(),\r\n        profileVisibility: z.enum(['public', 'subscribers', 'private']),\r\n      })\r\n      .partial(),\r\n    language: z.string().max(10),\r\n    currency: z.string().max(10),\r\n    timezone: z.string().max(50),\r\n  })\r\n  .partial();\r\n\r\nconst verificationRequestSchema = z.object({\r\n  codePhoto: z.string().url().optional(),\r\n  idFront: z.string().url().optional(),\r\n  idBack: z.string().url().optional(),\r\n  passport: z.string().url().optional(),\r\n  code: z.string().max(20).transform(sanitizeStrict).optional(),\r\n  submittedAt: z.string().datetime().optional(),\r\n});\r\n\r\nconst activitySchema = z.object({\r\n  userId: z.string().transform(sanitizeUsername),\r\n  type: z.enum(['login', 'profile_update', 'listing_created', 'order_placed', 'message_sent']),\r\n  details: z.record(z.any()).optional(),\r\n  ipAddress: z.string().optional(),\r\n  userAgent: z.string().optional(),\r\n});\r\n\r\n/**\r\n * Helpers – enforce string types for storage & profile fields\r\n */\r\nfunction toStringSafe(val: unknown, fallback = ''): string {\r\n  if (val === undefined || val === null) return fallback;\r\n  return String(val);\r\n}\r\n\r\nfunction toPriceString(val: unknown): string {\r\n  // normalize numbers or strings into a valid price string; caller ensures regex match if needed\r\n  if (typeof val === 'number') return String(val);\r\n  return toStringSafe(val, '0');\r\n}\r\n\r\nfunction sanitizeUrlOrUndefined(url: unknown): string | undefined {\r\n  const s = typeof url === 'string' ? sanitizeUrl(url) : null;\r\n  return s || undefined;\r\n}\r\n\r\nfunction sanitizeUrlOrNull(url: unknown): string | null {\r\n  // Special handling for placeholder URLs\r\n  if (typeof url === 'string' && url.includes('placeholder')) {\r\n    return url;\r\n  }\r\n  const s = typeof url === 'string' ? sanitizeUrl(url) : null;\r\n  return s || null;\r\n}\r\n\r\n/**\r\n * Enhanced Users Service with caching, validation, and better error handling\r\n */\r\nexport class EnhancedUsersService {\r\n  // In-memory caches\r\n  private userCache = new Map<string, CachedUser>();\r\n  private profileCache = new Map<string, CachedUserProfile>();\r\n  private listCache = new Map<string, { data: any; expiresAt: number }>();\r\n\r\n  // Request deduplication\r\n  private pendingRequests = new Map<string, Promise<any>>();\r\n\r\n  // Rate limiter\r\n  private rateLimiter = getRateLimiter();\r\n\r\n  // Clear cache methods\r\n  private clearUserCache(username?: string) {\r\n    if (username) {\r\n      this.userCache.delete(username);\r\n      this.profileCache.delete(username);\r\n    } else {\r\n      this.userCache.clear();\r\n      this.profileCache.clear();\r\n    }\r\n    this.listCache.clear();\r\n  }\r\n\r\n  /**\r\n   * Get user with caching and deduplication\r\n   */\r\n  async getUser(username: string): Promise<ApiResponse<User | null>> {\r\n    try {\r\n      // Validate username\r\n      if (!username || !isValidUsername(username)) {\r\n        console.error('[EnhancedUsersService.getUser] Invalid username:', username);\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.INVALID_USERNAME,\r\n            message: 'Invalid username format',\r\n            field: 'username',\r\n          },\r\n        };\r\n      }\r\n\r\n      // Sanitize username\r\n      const sanitizedUsername = sanitizeUsername(username);\r\n      console.log('[EnhancedUsersService.getUser] Getting user:', sanitizedUsername);\r\n\r\n      // Check cache first\r\n      const cached = this.userCache.get(sanitizedUsername);\r\n      if (cached && cached.expiresAt > Date.now()) {\r\n        console.log('[EnhancedUsersService.getUser] Returning cached user');\r\n        return { success: true, data: cached.data };\r\n      }\r\n\r\n      // Check for pending request\r\n      const pendingKey = `user:${sanitizedUsername}`;\r\n      if (this.pendingRequests.has(pendingKey)) {\r\n        console.log('[EnhancedUsersService.getUser] Awaiting pending request');\r\n        return await this.pendingRequests.get(pendingKey)!;\r\n      }\r\n\r\n      // Create new request\r\n      const request = this._fetchUser(sanitizedUsername);\r\n      this.pendingRequests.set(pendingKey, request);\r\n\r\n      try {\r\n        const result = await request;\r\n        this.pendingRequests.delete(pendingKey);\r\n        return result;\r\n      } catch (error) {\r\n        this.pendingRequests.delete(pendingKey);\r\n        throw error;\r\n      }\r\n    } catch (error) {\r\n      console.error('[EnhancedUsersService.getUser] Error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: UserErrorCode.NETWORK_ERROR,\r\n          message: 'Failed to get user',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  private async _fetchUser(username: string): Promise<ApiResponse<User | null>> {\r\n    console.log('[EnhancedUsersService._fetchUser] Fetching user:', username);\r\n\r\n    if (!username) {\r\n      console.error('[EnhancedUsersService._fetchUser] Username is empty');\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: UserErrorCode.INVALID_USERNAME,\r\n          message: 'Username is required',\r\n        },\r\n      };\r\n    }\r\n\r\n    if (FEATURES.USE_API_USERS) {\r\n      // Build URL directly to avoid parameter issues\r\n      const url = `${API_BASE_URL}/api/users/${encodeURIComponent(username)}/profile`;\r\n      console.log('[EnhancedUsersService._fetchUser] API URL:', url);\r\n\r\n      const response = await apiCall<User>(url);\r\n\r\n      if (response.success && response.data) {\r\n        // Sanitize user data\r\n        const sanitizedUser = this.sanitizeUserData(response.data);\r\n\r\n        // Cache the result\r\n        this.userCache.set(username, {\r\n          data: sanitizedUser,\r\n          timestamp: Date.now(),\r\n          expiresAt: Date.now() + CACHE_CONFIG.USER_TTL,\r\n        });\r\n\r\n        return { ...response, data: sanitizedUser };\r\n      }\r\n\r\n      return response;\r\n    }\r\n\r\n    // LocalStorage implementation\r\n    const allUsers = await storageService.getItem<Record<string, any>>('all_users_v2', {});\r\n    const user = allUsers[username] || null;\r\n\r\n    if (user) {\r\n      // Sanitize user data\r\n      const sanitizedUser = this.sanitizeUserData(user);\r\n\r\n      // Cache the result\r\n      this.userCache.set(username, {\r\n        data: sanitizedUser,\r\n        timestamp: Date.now(),\r\n        expiresAt: Date.now() + CACHE_CONFIG.USER_TTL,\r\n      });\r\n\r\n      return { success: true, data: sanitizedUser };\r\n    }\r\n\r\n    return { success: true, data: null };\r\n  }\r\n\r\n  /**\r\n   * Get users with advanced filtering and caching\r\n   */\r\n  async getUsers(params?: UserSearchParams): Promise<ApiResponse<UsersResponse>> {\r\n    try {\r\n      // Validate and sanitize params\r\n      let validatedParams: UserSearchParams | undefined;\r\n      if (params) {\r\n        const validation = validateSchema(userSearchSchema, params);\r\n        if (!validation.success) {\r\n          return {\r\n            success: false,\r\n            error: {\r\n              code: UserErrorCode.VALIDATION_ERROR,\r\n              message: 'Invalid search parameters',\r\n            },\r\n          };\r\n        }\r\n        validatedParams = validation.data;\r\n      }\r\n\r\n      // Create cache key from params\r\n      const cacheKey = `users:${JSON.stringify(validatedParams || {})}`;\r\n      const cached = this.listCache.get(cacheKey);\r\n\r\n      if (cached && cached.expiresAt > Date.now()) {\r\n        return { success: true, data: cached.data };\r\n      }\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        const queryParams = new URLSearchParams();\r\n        if (validatedParams) {\r\n          Object.entries(validatedParams).forEach(([key, value]) => {\r\n            if (value !== undefined) {\r\n              queryParams.append(key, String(value));\r\n            }\r\n          });\r\n        }\r\n\r\n        const response = await apiCall<any>(`${API_ENDPOINTS.USERS.LIST}?${queryParams.toString()}`);\r\n\r\n        if (response.success && response.data) {\r\n          // Handle both response formats\r\n          let sanitizedResponse: UsersResponse;\r\n\r\n          if (Array.isArray(response.data)) {\r\n            // Backend returns array directly\r\n            const sanitizedUsers = response.data.map((u: any) => this.sanitizeUserData(u));\r\n            sanitizedResponse = {\r\n              users: sanitizedUsers,\r\n              total: sanitizedUsers.length,\r\n              page: validatedParams?.page || 1,\r\n              totalPages: 1,\r\n            };\r\n          } else {\r\n            // Backend returns UsersResponse object\r\n            const sanitizedUsers = response.data.users?.map((u: any) => this.sanitizeUserData(u)) || [];\r\n            sanitizedResponse = {\r\n              ...response.data,\r\n              users: sanitizedUsers,\r\n            };\r\n          }\r\n\r\n          // Cache the result\r\n          this.listCache.set(cacheKey, {\r\n            data: sanitizedResponse,\r\n            expiresAt: Date.now() + CACHE_CONFIG.LIST_TTL,\r\n          });\r\n\r\n          return {\r\n            success: true,\r\n            data: sanitizedResponse,\r\n            error: response.error,\r\n            meta: response.meta,\r\n          };\r\n        }\r\n\r\n        return {\r\n          success: false,\r\n          error: response.error || { code: UserErrorCode.NETWORK_ERROR, message: 'Failed to get users' },\r\n        };\r\n      }\r\n\r\n      // LocalStorage implementation with advanced filtering\r\n      const allUsers = await storageService.getItem<Record<string, any>>('all_users_v2', {});\r\n      let filteredUsers = Object.entries(allUsers);\r\n\r\n      // Apply filters\r\n      if (validatedParams) {\r\n        if (validatedParams.query) {\r\n          const query = validatedParams.query.toLowerCase();\r\n          filteredUsers = filteredUsers.filter(\r\n            ([username, u]) =>\r\n              username.toLowerCase().includes(query) ||\r\n              u.bio?.toLowerCase().includes(query) ||\r\n              u.email?.toLowerCase().includes(query),\r\n          );\r\n        }\r\n\r\n        if (validatedParams.role) {\r\n          filteredUsers = filteredUsers.filter(([_, u]) => u.role === validatedParams.role);\r\n        }\r\n\r\n        if (validatedParams.verified !== undefined) {\r\n          filteredUsers = filteredUsers.filter(\r\n            ([_, u]) => (u.verificationStatus === 'verified') === validatedParams.verified,\r\n          );\r\n        }\r\n\r\n        if (validatedParams.tier) {\r\n          filteredUsers = filteredUsers.filter(([_, u]) => u.tier === validatedParams.tier);\r\n        }\r\n\r\n        if (validatedParams.minRating !== undefined) {\r\n          filteredUsers = filteredUsers.filter(([_, u]) => (u.rating || 0) >= validatedParams!.minRating!);\r\n        }\r\n\r\n        if (validatedParams.isActive !== undefined) {\r\n          const dayAgo = new Date();\r\n          dayAgo.setDate(dayAgo.getDate() - 1);\r\n          filteredUsers = filteredUsers.filter(([_, u]) => {\r\n            const lastActive = new Date(u.lastActive || u.createdAt);\r\n            return validatedParams!.isActive ? lastActive > dayAgo : lastActive <= dayAgo;\r\n          });\r\n        }\r\n\r\n        // Sorting\r\n        if (validatedParams.sortBy) {\r\n          filteredUsers.sort(([aUsername, a], [bUsername, b]) => {\r\n            let compareValue = 0;\r\n\r\n            switch (validatedParams!.sortBy) {\r\n              case 'username':\r\n                compareValue = aUsername.localeCompare(bUsername);\r\n                break;\r\n              case 'joinDate':\r\n                compareValue = new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\r\n                break;\r\n              case 'rating':\r\n                compareValue = (a.rating || 0) - (b.rating || 0);\r\n                break;\r\n              case 'sales':\r\n                compareValue = (a.totalSales || 0) - (b.totalSales || 0);\r\n                break;\r\n              case 'lastActive':\r\n                compareValue =\r\n                  new Date(a.lastActive || a.createdAt).getTime() - new Date(b.lastActive || b.createdAt).getTime();\r\n                break;\r\n            }\r\n\r\n            return validatedParams!.sortOrder === 'desc' ? -compareValue : compareValue;\r\n          });\r\n        }\r\n      }\r\n\r\n      // Pagination\r\n      const page = validatedParams?.page || 1;\r\n      const limit = validatedParams?.limit || 50;\r\n      const startIndex = (page - 1) * limit;\r\n      const endIndex = startIndex + limit;\r\n\r\n      const paginatedUsers = filteredUsers.slice(startIndex, endIndex);\r\n      const users = paginatedUsers.map(([_, u]) => this.sanitizeUserData(u));\r\n\r\n      const result: UsersResponse = {\r\n        users,\r\n        total: filteredUsers.length,\r\n        page,\r\n        totalPages: Math.ceil(filteredUsers.length / limit),\r\n      };\r\n\r\n      // Cache the result\r\n      this.listCache.set(cacheKey, {\r\n        data: result,\r\n        expiresAt: Date.now() + CACHE_CONFIG.LIST_TTL,\r\n      });\r\n\r\n      return { success: true, data: result };\r\n    } catch (error) {\r\n      console.error('Get users error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: UserErrorCode.NETWORK_ERROR,\r\n          message: 'Failed to get users',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user profile with caching and validation\r\n   */\r\n  async getUserProfile(username: string): Promise<ApiResponse<ProfileResponse | null>> {\r\n    try {\r\n      console.log('[EnhancedUsersService.getUserProfile] Getting profile for:', username);\r\n\r\n      // Validate username\r\n      if (!username || !isValidUsername(username)) {\r\n        console.error('[EnhancedUsersService.getUserProfile] Invalid username:', username);\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.INVALID_USERNAME,\r\n            message: 'Invalid username format',\r\n            field: 'username',\r\n          },\r\n        };\r\n      }\r\n\r\n      // Sanitize username\r\n      const sanitizedUsername = sanitizeUsername(username);\r\n\r\n      // Check cache\r\n      const cached = this.profileCache.get(sanitizedUsername);\r\n      if (cached && cached.expiresAt > Date.now()) {\r\n        const userResult = await this.getUser(sanitizedUsername);\r\n        if (userResult.success && userResult.data) {\r\n          return {\r\n            success: true,\r\n            data: {\r\n              profile: cached.data,\r\n              user: userResult.data,\r\n            },\r\n          };\r\n        }\r\n      }\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        // Build the full profile URL directly\r\n        const fullUrl = `${API_BASE_URL}/api/users/${encodeURIComponent(sanitizedUsername)}/profile/full`;\r\n        console.log('[EnhancedUsersService.getUserProfile] API URL:', fullUrl);\r\n\r\n        const response = await apiCall<ProfileResponse | any>(fullUrl);\r\n\r\n        if (response.success && response.data) {\r\n          let profileData: UserProfile;\r\n          let userData: User;\r\n\r\n          // Accept both { profile, user } and user-only shapes\r\n          if ((response.data as any).profile !== undefined && (response.data as any).user !== undefined) {\r\n            profileData = this.sanitizeProfileData((response.data as any).profile);\r\n            userData = (response.data as any).user;\r\n          } else if ((response.data as any).username) {\r\n            userData = response.data as any;\r\n            profileData = this.sanitizeProfileData({\r\n              bio: (response.data as any).bio || '',\r\n              profilePic: (response.data as any).profilePic ?? (response.data as any).profilePicture ?? null,\r\n              subscriptionPrice: toPriceString((response.data as any).subscriptionPrice ?? '0'),\r\n              galleryImages: (response.data as any).galleryImages || [],\r\n            });\r\n          } else {\r\n            // Unexpected format: coerce to empty profile\r\n            console.warn('[EnhancedUsersService.getUserProfile] Unexpected response format:', response.data);\r\n            profileData = this.sanitizeProfileData({\r\n              bio: '',\r\n              profilePic: null,\r\n              subscriptionPrice: '0',\r\n              galleryImages: [],\r\n            });\r\n            userData = response.data as any;\r\n          }\r\n\r\n          // Cache the profile\r\n          this.profileCache.set(sanitizedUsername, {\r\n            data: profileData,\r\n            timestamp: Date.now(),\r\n            expiresAt: Date.now() + CACHE_CONFIG.PROFILE_TTL,\r\n          });\r\n\r\n          return {\r\n            success: true,\r\n            data: {\r\n              profile: profileData,\r\n              user: userData,\r\n            },\r\n          };\r\n        }\r\n\r\n        return response as ApiResponse<ProfileResponse | null>;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const userResult = await this.getUser(sanitizedUsername);\r\n      if (!userResult.success || !userResult.data) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.USER_NOT_FOUND,\r\n            message: 'User not found',\r\n          },\r\n        };\r\n      }\r\n\r\n      const profilesData = await storageService.getItem<Record<string, UserProfile>>('user_profiles', {});\r\n      let profile = profilesData[sanitizedUsername];\r\n\r\n      if (!profile) {\r\n        // Legacy storage fallback\r\n        const bio = sessionStorage.getItem(`profile_bio_${sanitizedUsername}`) || '';\r\n        const profilePic = sessionStorage.getItem(`profile_pic_${sanitizedUsername}`);\r\n        const subscriptionPrice = sessionStorage.getItem(`subscription_price_${sanitizedUsername}`) || '0';\r\n        const galleryData = localStorage.getItem(`profile_gallery_${sanitizedUsername}`);\r\n        const galleryImages = galleryData ? JSON.parse(galleryData) : [];\r\n\r\n        profile = {\r\n          bio,\r\n          profilePic: profilePic ?? null,\r\n          subscriptionPrice: toPriceString(subscriptionPrice),\r\n          galleryImages,\r\n        };\r\n      }\r\n\r\n      // Sanitize profile data\r\n      const sanitizedProfile = this.sanitizeProfileData(profile);\r\n\r\n      // Calculate profile completeness\r\n      const completeness = calculateProfileCompleteness(userResult.data, sanitizedProfile);\r\n      sanitizedProfile.completeness = completeness;\r\n\r\n      // Cache the profile\r\n      this.profileCache.set(sanitizedUsername, {\r\n        data: sanitizedProfile,\r\n        timestamp: Date.now(),\r\n        expiresAt: Date.now() + CACHE_CONFIG.PROFILE_TTL,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          profile: sanitizedProfile,\r\n          user: userResult.data,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      console.error('[EnhancedUsersService.getUserProfile] Error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: UserErrorCode.NETWORK_ERROR,\r\n          message: 'Failed to get user profile',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user profile with validation and optimistic updates\r\n   */\r\n  async updateUserProfile(username: string, updates: Partial<UserProfile>): Promise<ApiResponse<UserProfile>> {\r\n    try {\r\n      // Rate limit\r\n      const rateLimitResult = this.rateLimiter.check(`profile_update_${username}`, {\r\n        maxAttempts: 10,\r\n        windowMs: 60 * 60 * 1000,\r\n      });\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: `Too many updates. Please wait ${rateLimitResult.waitTime} seconds.`,\r\n          },\r\n        };\r\n      }\r\n\r\n      // Validate username\r\n      if (!username || !isValidUsername(username)) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.INVALID_USERNAME,\r\n            message: 'Invalid username format',\r\n            field: 'username',\r\n          },\r\n        };\r\n      }\r\n\r\n      const sanitizedUsername = sanitizeUsername(username);\r\n\r\n      // PRE-NORMALIZE: coerce price to string if caller passed number\r\n      const normalizedUpdates: Partial<UserProfile> = {\r\n        ...updates,\r\n        subscriptionPrice:\r\n          updates.subscriptionPrice !== undefined\r\n            ? toPriceString(updates.subscriptionPrice)\r\n            : undefined,\r\n      };\r\n\r\n      // Validate and sanitize updates\r\n      const validation = validateSchema(userProfileUpdateSchema, normalizedUpdates);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: Object.values(validation.errors || {})[0] || 'Invalid profile data',\r\n          },\r\n        };\r\n      }\r\n\r\n      const sanitizedUpdates = validation.data!;\r\n\r\n      // Additional validation\r\n      if (sanitizedUpdates.bio !== undefined && !isValidBio(sanitizedUpdates.bio)) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: 'Bio is too long (max 500 characters)',\r\n            field: 'bio',\r\n          },\r\n        };\r\n      }\r\n\r\n      if (\r\n        sanitizedUpdates.subscriptionPrice !== undefined &&\r\n        !isValidSubscriptionPrice(sanitizedUpdates.subscriptionPrice)\r\n      ) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: 'Invalid subscription price',\r\n            field: 'subscriptionPrice',\r\n          },\r\n        };\r\n      }\r\n\r\n      // Optimistic update\r\n      const currentProfile = this.profileCache.get(sanitizedUsername);\r\n      if (currentProfile) {\r\n        const optimisticProfile: UserProfile = {\r\n          ...currentProfile.data,\r\n          ...sanitizedUpdates,\r\n          subscriptionPrice:\r\n            sanitizedUpdates.subscriptionPrice ?? currentProfile.data.subscriptionPrice,\r\n        };\r\n        this.profileCache.set(sanitizedUsername, {\r\n          data: optimisticProfile,\r\n          timestamp: Date.now(),\r\n          expiresAt: Date.now() + CACHE_CONFIG.PROFILE_TTL,\r\n        });\r\n      }\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        const url = `${API_BASE_URL}/api/users/${encodeURIComponent(sanitizedUsername)}/profile`;\r\n        const response = await apiCall<UserProfile>(url, {\r\n          method: 'PATCH',\r\n          body: JSON.stringify(sanitizedUpdates),\r\n        });\r\n\r\n        if (!response.success) {\r\n          // Revert optimistic update\r\n          if (currentProfile) {\r\n            this.profileCache.set(sanitizedUsername, currentProfile);\r\n          } else {\r\n            this.profileCache.delete(sanitizedUsername);\r\n          }\r\n          return response as ApiResponse<UserProfile>;\r\n        }\r\n\r\n        if (response.data) {\r\n          const sanitizedProfile = this.sanitizeProfileData(response.data);\r\n          this.profileCache.set(sanitizedUsername, {\r\n            data: sanitizedProfile,\r\n            timestamp: Date.now(),\r\n            expiresAt: Date.now() + CACHE_CONFIG.PROFILE_TTL,\r\n          });\r\n          return { ...response, data: sanitizedProfile };\r\n        }\r\n\r\n        return response as ApiResponse<UserProfile>;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const profilesData = await storageService.getItem<Record<string, UserProfile>>('user_profiles', {});\r\n      const currentData = profilesData[sanitizedUsername] || {\r\n        bio: '',\r\n        profilePic: null,\r\n        subscriptionPrice: '0',\r\n        galleryImages: [],\r\n      };\r\n\r\n      const updatedProfile: UserProfile = {\r\n        ...currentData,\r\n        ...sanitizedUpdates,\r\n        subscriptionPrice: toPriceString(\r\n          sanitizedUpdates.subscriptionPrice ?? currentData.subscriptionPrice ?? '0',\r\n        ),\r\n        lastUpdated: new Date().toISOString(),\r\n      };\r\n\r\n      profilesData[sanitizedUsername] = updatedProfile;\r\n      const success = await storageService.setItem('user_profiles', profilesData);\r\n\r\n      if (success) {\r\n        // Legacy storage for backward compatibility\r\n        if (sanitizedUpdates.bio !== undefined) {\r\n          sessionStorage.setItem(`profile_bio_${sanitizedUsername}`, toStringSafe(sanitizedUpdates.bio, ''));\r\n        }\r\n        if (sanitizedUpdates.profilePic !== undefined) {\r\n          if (sanitizedUpdates.profilePic) {\r\n            sessionStorage.setItem(\r\n              `profile_pic_${sanitizedUsername}`,\r\n              toStringSafe(sanitizedUpdates.profilePic, ''),\r\n            );\r\n          } else {\r\n            sessionStorage.removeItem(`profile_pic_${sanitizedUsername}`);\r\n          }\r\n        }\r\n        if (sanitizedUpdates.subscriptionPrice !== undefined) {\r\n          sessionStorage.setItem(\r\n            `subscription_price_${sanitizedUsername}`,\r\n            toPriceString(sanitizedUpdates.subscriptionPrice),\r\n          );\r\n        }\r\n        if (sanitizedUpdates.galleryImages !== undefined) {\r\n          localStorage.setItem(\r\n            `profile_gallery_${sanitizedUsername}`,\r\n            JSON.stringify(sanitizedUpdates.galleryImages || []),\r\n          );\r\n        }\r\n\r\n        // Update user bio in all_users_v2 if needed\r\n        if (sanitizedUpdates.bio !== undefined) {\r\n          const allUsers = await storageService.getItem<Record<string, any>>('all_users_v2', {});\r\n          if (allUsers[sanitizedUsername]) {\r\n            allUsers[sanitizedUsername].bio = sanitizedUpdates.bio;\r\n            await storageService.setItem('all_users_v2', allUsers);\r\n            // Clear user cache\r\n            this.userCache.delete(sanitizedUsername);\r\n          }\r\n        }\r\n\r\n        // Update cache\r\n        this.profileCache.set(sanitizedUsername, {\r\n          data: updatedProfile,\r\n          timestamp: Date.now(),\r\n          expiresAt: Date.now() + CACHE_CONFIG.PROFILE_TTL,\r\n        });\r\n\r\n        return { success: true, data: updatedProfile };\r\n      } else {\r\n        // Revert optimistic update\r\n        if (currentProfile) {\r\n          this.profileCache.set(sanitizedUsername, currentProfile);\r\n        } else {\r\n          this.profileCache.delete(sanitizedUsername);\r\n        }\r\n\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.PROFILE_UPDATE_FAILED,\r\n            message: 'Failed to update profile',\r\n          },\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Update user profile error:', error);\r\n\r\n      // Revert optimistic update on error\r\n      this.profileCache.delete(username);\r\n\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: UserErrorCode.NETWORK_ERROR,\r\n          message: 'Failed to update profile',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user preferences\r\n   */\r\n  async getUserPreferences(username: string): Promise<ApiResponse<UserPreferences>> {\r\n    try {\r\n      console.log('[EnhancedUsersService.getUserPreferences] Getting preferences for:', username);\r\n\r\n      // Validate username\r\n      if (!username || !isValidUsername(username)) {\r\n        console.error('[EnhancedUsersService.getUserPreferences] Invalid username:', username);\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.INVALID_USERNAME,\r\n            message: 'Invalid username format',\r\n          },\r\n        };\r\n      }\r\n\r\n      const sanitizedUsername = sanitizeUsername(username);\r\n\r\n      const defaultPreferences: UserPreferences = {\r\n        notifications: {\r\n          messages: true,\r\n          orders: true,\r\n          promotions: false,\r\n          newsletters: false,\r\n        },\r\n        privacy: {\r\n          showOnlineStatus: true,\r\n          allowDirectMessages: true,\r\n          profileVisibility: 'public',\r\n        },\r\n        language: 'en',\r\n        currency: 'USD',\r\n        timezone: 'UTC',\r\n      };\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        const preferencesUrl = `${API_BASE_URL}/api/users/${encodeURIComponent(\r\n          sanitizedUsername,\r\n        )}/settings/preferences`;\r\n        console.log('[EnhancedUsersService.getUserPreferences] API URL:', preferencesUrl);\r\n\r\n        const response = await apiCall<UserPreferences>(preferencesUrl);\r\n\r\n        // If endpoint doesn't exist (404), return default preferences\r\n        if (!response.success && (response.error?.code === '404' || response.error?.code === 'INVALID_CONTENT_TYPE')) {\r\n          console.log('[EnhancedUsersService.getUserPreferences] Endpoint not found, using defaults');\r\n          return { success: true, data: defaultPreferences };\r\n        }\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const preferencesData = await storageService.getItem<Record<string, UserPreferences>>(\r\n        'user_preferences',\r\n        {},\r\n      );\r\n\r\n      const preferences = preferencesData[sanitizedUsername] || defaultPreferences;\r\n\r\n      return { success: true, data: preferences };\r\n    } catch (error) {\r\n      console.error('[EnhancedUsersService.getUserPreferences] Error:', error);\r\n      // Return default preferences on error\r\n      return {\r\n        success: true,\r\n        data: {\r\n          notifications: {\r\n            messages: true,\r\n            orders: true,\r\n            promotions: false,\r\n            newsletters: false,\r\n          },\r\n          privacy: {\r\n            showOnlineStatus: true,\r\n            allowDirectMessages: true,\r\n            profileVisibility: 'public',\r\n          },\r\n          language: 'en',\r\n          currency: 'USD',\r\n          timezone: 'UTC',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user preferences\r\n   */\r\n  async updateUserPreferences(\r\n    username: string,\r\n    updates: Partial<UserPreferences>,\r\n  ): Promise<ApiResponse<UserPreferences>> {\r\n    try {\r\n      // Validate username\r\n      if (!username || !isValidUsername(username)) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.INVALID_USERNAME,\r\n            message: 'Invalid username format',\r\n          },\r\n        };\r\n      }\r\n\r\n      const sanitizedUsername = sanitizeUsername(username);\r\n\r\n      // Validate preferences\r\n      const validation = validateSchema(userPreferencesSchema, updates);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: 'Invalid preferences data',\r\n          },\r\n        };\r\n      }\r\n\r\n      const sanitizedUpdates = validation.data!;\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        const preferencesUrl = `${API_BASE_URL}/api/users/${encodeURIComponent(\r\n          sanitizedUsername,\r\n        )}/settings/preferences`;\r\n\r\n        return await apiCall<UserPreferences>(preferencesUrl, {\r\n          method: 'PATCH',\r\n          body: JSON.stringify(sanitizedUpdates),\r\n        });\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const preferencesData = await storageService.getItem<Record<string, UserPreferences>>(\r\n        'user_preferences',\r\n        {},\r\n      );\r\n\r\n      const currentPreferences = preferencesData[sanitizedUsername] || {\r\n        notifications: {\r\n          messages: true,\r\n          orders: true,\r\n          promotions: false,\r\n          newsletters: false,\r\n        },\r\n        privacy: {\r\n          showOnlineStatus: true,\r\n          allowDirectMessages: true,\r\n          profileVisibility: 'public' as const,\r\n        },\r\n        language: 'en',\r\n        currency: 'USD',\r\n        timezone: 'UTC',\r\n      };\r\n\r\n      const updatedPreferences: UserPreferences = {\r\n        ...currentPreferences,\r\n        ...sanitizedUpdates,\r\n        notifications: {\r\n          ...currentPreferences.notifications,\r\n          ...(sanitizedUpdates.notifications || {}),\r\n        },\r\n        privacy: {\r\n          ...currentPreferences.privacy,\r\n          ...(sanitizedUpdates.privacy || {}),\r\n        },\r\n      };\r\n\r\n      preferencesData[sanitizedUsername] = updatedPreferences;\r\n      await storageService.setItem('user_preferences', preferencesData);\r\n\r\n      return { success: true, data: updatedPreferences };\r\n    } catch (error) {\r\n      console.error('Update user preferences error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: UserErrorCode.NETWORK_ERROR,\r\n          message: 'Failed to update preferences',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track user activity\r\n   */\r\n  async trackActivity(activity: Omit<UserActivity, 'id' | 'timestamp'>): Promise<ApiResponse<void>> {\r\n    try {\r\n      // Validate activity data\r\n      const validation = validateSchema(activitySchema, activity);\r\n      if (!validation.success) {\r\n        return { success: true }; // Silently fail for activity tracking\r\n      }\r\n\r\n      const sanitizedActivity = validation.data!;\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        const response = await apiCall<void>('/users/activity', {\r\n          method: 'POST',\r\n          body: JSON.stringify(sanitizedActivity),\r\n        });\r\n\r\n        // Silently fail if endpoint doesn't exist\r\n        if (!response.success && (response.error?.code === '404' || response.error?.code === 'INVALID_CONTENT_TYPE')) {\r\n          return { success: true };\r\n        }\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const activities = await storageService.getItem<UserActivity[]>('user_activities', []);\r\n\r\n      const newActivity: UserActivity = {\r\n        ...sanitizedActivity,\r\n        id: `activity_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n\r\n      activities.push(newActivity);\r\n\r\n      // Keep only last N activities\r\n      if (activities.length > SECURITY_LIMITS.MAX_ACTIVITY_HISTORY) {\r\n        activities.splice(0, activities.length - SECURITY_LIMITS.MAX_ACTIVITY_HISTORY);\r\n      }\r\n\r\n      await storageService.setItem('user_activities', activities);\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Track activity error:', error);\r\n      // Don't return error for activity tracking failures\r\n      return { success: true };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user activity history\r\n   */\r\n  async getUserActivity(username: string, limit: number = 50): Promise<ApiResponse<UserActivity[]>> {\r\n    try {\r\n      // Validate username\r\n      if (!username || !isValidUsername(username)) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.INVALID_USERNAME,\r\n            message: 'Invalid username format',\r\n          },\r\n        };\r\n      }\r\n\r\n      const sanitizedUsername = sanitizeUsername(username);\r\n      const sanitizedLimit = Math.min(Math.max(1, limit), SECURITY_LIMITS.MAX_PAGE_SIZE);\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        const activityUrl = `${API_BASE_URL}/api/users/${encodeURIComponent(\r\n          sanitizedUsername,\r\n        )}/profile/activity?limit=${sanitizedLimit}`;\r\n\r\n        return await apiCall<UserActivity[]>(activityUrl);\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const activities = await storageService.getItem<UserActivity[]>('user_activities', []);\r\n\r\n      const userActivities = activities\r\n        .filter((a) => a.userId === sanitizedUsername)\r\n        .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\r\n        .slice(0, sanitizedLimit);\r\n\r\n      return { success: true, data: userActivities };\r\n    } catch (error) {\r\n      console.error('Get user activity error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: UserErrorCode.NETWORK_ERROR,\r\n          message: 'Failed to get activity history',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Batch update users (admin only)\r\n   */\r\n  async batchUpdateUsers(updates: BatchUserUpdate[]): Promise<ApiResponse<BatchOperationResult>> {\r\n    try {\r\n      // Rate limit\r\n      const rateLimitResult = this.rateLimiter.check('batch_update', {\r\n        maxAttempts: 5,\r\n        windowMs: 60 * 60 * 1000,\r\n      });\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: `Too many batch updates. Please wait ${rateLimitResult.waitTime} seconds.`,\r\n          },\r\n        };\r\n      }\r\n\r\n      // Limit batch size\r\n      if (updates.length > SECURITY_LIMITS.MAX_BATCH_SIZE) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: `Batch size exceeds limit of ${SECURITY_LIMITS.MAX_BATCH_SIZE}`,\r\n          },\r\n        };\r\n      }\r\n\r\n      // Validate all updates\r\n      const validatedUpdates: BatchUserUpdate[] = [];\r\n      for (const update of updates) {\r\n        if (!isValidUsername(update.username)) {\r\n          continue;\r\n        }\r\n\r\n        const sanitizedUsername = sanitizeUsername(update.username);\r\n        const sanitizedUpdates = this.sanitizeUserData(update.updates as User);\r\n\r\n        validatedUpdates.push({\r\n          username: sanitizedUsername,\r\n          updates: sanitizedUpdates,\r\n        });\r\n      }\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        return await apiCall<BatchOperationResult>('/users/batch-update', {\r\n          method: 'POST',\r\n          body: JSON.stringify({ updates: validatedUpdates }),\r\n        });\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const allUsers = await storageService.getItem<Record<string, any>>('all_users_v2', {});\r\n\r\n      const result: BatchOperationResult = {\r\n        succeeded: [],\r\n        failed: [],\r\n      };\r\n\r\n      for (const update of validatedUpdates) {\r\n        try {\r\n          if (allUsers[update.username]) {\r\n            allUsers[update.username] = {\r\n              ...allUsers[update.username],\r\n              ...update.updates,\r\n            };\r\n            result.succeeded.push(update.username);\r\n            // Clear cache for updated user\r\n            this.clearUserCache(update.username);\r\n          } else {\r\n            result.failed.push({\r\n              username: update.username,\r\n              error: 'User not found',\r\n            });\r\n          }\r\n        } catch (error: any) {\r\n          result.failed.push({\r\n            username: update.username,\r\n            error: error?.message || 'Update failed',\r\n          });\r\n        }\r\n      }\r\n\r\n      if (result.succeeded.length > 0) {\r\n        await storageService.setItem('all_users_v2', allUsers);\r\n      }\r\n\r\n      return { success: true, data: result };\r\n    } catch (error) {\r\n      console.error('Batch update users error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: UserErrorCode.NETWORK_ERROR,\r\n          message: 'Failed to batch update users',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request verification with file validation\r\n   */\r\n  async requestVerification(username: string, docs: VerificationRequest): Promise<ApiResponse<void>> {\r\n    try {\r\n      // Rate limit\r\n      const rateLimitResult = this.rateLimiter.check(`verification_${username}`, {\r\n        maxAttempts: 3,\r\n        windowMs: 24 * 60 * 60 * 1000,\r\n      });\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: `Too many verification requests. Please wait ${rateLimitResult.waitTime} seconds.`,\r\n          },\r\n        };\r\n      }\r\n\r\n      // Validate username\r\n      if (!username || !isValidUsername(username)) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.INVALID_USERNAME,\r\n            message: 'Invalid username format',\r\n          },\r\n        };\r\n      }\r\n\r\n      const sanitizedUsername = sanitizeUsername(username);\r\n\r\n      // Validate verification request\r\n      const validation = validateSchema(verificationRequestSchema, docs);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: 'Invalid verification data',\r\n          },\r\n        };\r\n      }\r\n\r\n      const sanitizedDocs = validation.data!;\r\n\r\n      // Validate required documents\r\n      if (!sanitizedDocs.codePhoto || !sanitizedDocs.code) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: 'Code photo and verification code are required',\r\n          },\r\n        };\r\n      }\r\n\r\n      if (!sanitizedDocs.idFront && !sanitizedDocs.passport) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.VALIDATION_ERROR,\r\n            message: 'Either ID front or passport is required',\r\n          },\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        const url = `${API_BASE_URL}/api/users/${encodeURIComponent(sanitizedUsername)}/verification`;\r\n\r\n        return await apiCall<void>(url, {\r\n          method: 'POST',\r\n          body: JSON.stringify(sanitizedDocs),\r\n        });\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const allUsers = await storageService.getItem<Record<string, any>>('all_users_v2', {});\r\n\r\n      if (allUsers[sanitizedUsername]) {\r\n        allUsers[sanitizedUsername].verificationStatus = 'pending';\r\n        allUsers[sanitizedUsername].verificationRequestedAt = new Date().toISOString();\r\n        allUsers[sanitizedUsername].verificationDocs = sanitizedDocs;\r\n        await storageService.setItem('all_users_v2', allUsers);\r\n\r\n        // Clear user cache\r\n        this.userCache.delete(sanitizedUsername);\r\n      }\r\n\r\n      // Store verification request\r\n      const verificationRequests = await storageService.getItem<Record<string, any>>(\r\n        'panty_verification_requests',\r\n        {},\r\n      );\r\n\r\n      verificationRequests[sanitizedUsername] = {\r\n        ...sanitizedDocs,\r\n        requestedAt: new Date().toISOString(),\r\n        status: 'pending',\r\n      };\r\n\r\n      await storageService.setItem('panty_verification_requests', verificationRequests);\r\n\r\n      // Track activity\r\n      await this.trackActivity({\r\n        userId: sanitizedUsername,\r\n        type: 'profile_update',\r\n        details: { action: 'verification_requested' },\r\n      });\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Request verification error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: UserErrorCode.VERIFICATION_FAILED,\r\n          message: 'Failed to request verification',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get subscription status with caching\r\n   */\r\n  async getSubscriptionStatus(buyer: string, seller: string): Promise<ApiResponse<SubscriptionInfo | null>> {\r\n    try {\r\n      // Validate usernames\r\n      if (!isValidUsername(buyer) || !isValidUsername(seller)) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: UserErrorCode.INVALID_USERNAME,\r\n            message: 'Invalid username format',\r\n          },\r\n        };\r\n      }\r\n\r\n      const sanitizedBuyer = sanitizeUsername(buyer);\r\n      const sanitizedSeller = sanitizeUsername(seller);\r\n\r\n      const cacheKey = `sub:${sanitizedBuyer}:${sanitizedSeller}`;\r\n      const cached = this.listCache.get(cacheKey);\r\n\r\n      if (cached && cached.expiresAt > Date.now()) {\r\n        return { success: true, data: cached.data };\r\n      }\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        const response = await apiCall<SubscriptionInfo>(\r\n          `${API_ENDPOINTS.SUBSCRIPTIONS.CHECK}?buyer=${sanitizedBuyer}&seller=${sanitizedSeller}`,\r\n        );\r\n\r\n        if (response.success && response.data) {\r\n          this.listCache.set(cacheKey, {\r\n            data: response.data,\r\n            expiresAt: Date.now() + CACHE_CONFIG.LIST_TTL,\r\n          });\r\n        }\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const subscriptions = await storageService.getItem<Record<string, SubscriptionInfo[]>>(\r\n        'user_subscriptions',\r\n        {},\r\n      );\r\n\r\n      const buyerSubs = subscriptions[sanitizedBuyer] || [];\r\n      const subscription = buyerSubs.find((sub) => sub.seller === sanitizedSeller) || null;\r\n\r\n      if (subscription) {\r\n        this.listCache.set(cacheKey, {\r\n          data: subscription,\r\n          expiresAt: Date.now() + CACHE_CONFIG.LIST_TTL,\r\n        });\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: subscription,\r\n      };\r\n    } catch (error) {\r\n      console.error('Get subscription status error:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: UserErrorCode.NETWORK_ERROR,\r\n          message: 'Failed to get subscription status',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all caches\r\n   */\r\n  clearCache() {\r\n    this.userCache.clear();\r\n    this.profileCache.clear();\r\n    this.listCache.clear();\r\n  }\r\n\r\n  /**\r\n   * Sanitize user data\r\n   */\r\n  private sanitizeUserData(user: any): User {\r\n    return {\r\n      ...user,\r\n      username: user?.username ? sanitizeUsername(user.username) : '',\r\n      email: user?.email ? sanitizeEmail(user.email) : undefined,\r\n      bio: user?.bio ? sanitizeStrict(user.bio) : undefined,\r\n      banReason: user?.banReason ? sanitizeStrict(user.banReason) : undefined,\r\n      verificationRejectionReason: user?.verificationRejectionReason\r\n        ? sanitizeStrict(user.verificationRejectionReason)\r\n        : undefined,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sanitize profile data (guarantees subscriptionPrice is a string)\r\n   */\r\n  private sanitizeProfileData(profile: any): UserProfile {\r\n    // Handle undefined or null profile\r\n    const p = profile || {};\r\n\r\n    const rawPic = p.profilePic ?? p.profilePicture ?? null;\r\n    const profilePic = sanitizeUrlOrNull(rawPic);\r\n\r\n    const priceStr = toPriceString(p.subscriptionPrice ?? '0');\r\n\r\n    const galleryImages: string[] = Array.isArray(p.galleryImages)\r\n      ? (p.galleryImages\r\n          .map((u: any) => (typeof u === 'string' ? sanitizeUrl(u) : null))\r\n          .filter(Boolean) as string[])\r\n      : [];\r\n\r\n    const socialLinks = p.socialLinks\r\n      ? {\r\n          twitter: sanitizeUrlOrUndefined(p.socialLinks.twitter),\r\n          instagram: sanitizeUrlOrUndefined(p.socialLinks.instagram),\r\n          tiktok: sanitizeUrlOrUndefined(p.socialLinks.tiktok),\r\n          website: sanitizeUrlOrUndefined(p.socialLinks.website),\r\n        }\r\n      : undefined;\r\n\r\n    return {\r\n      bio: sanitizeStrict(p.bio || ''),\r\n      profilePic,\r\n      subscriptionPrice: priceStr, // <- always string\r\n      galleryImages,\r\n      socialLinks,\r\n      completeness: p.completeness,\r\n      lastUpdated: p.lastUpdated,\r\n      preferences: p.preferences,\r\n      stats: p.stats,\r\n    };\r\n    // NOTE: UserProfile typing is satisfied: subscriptionPrice is string, others match optional fields.\r\n  }\r\n}\r\n\r\n// Export enhanced singleton instance\r\nexport const enhancedUsersService = new EnhancedUsersService();\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3408, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/users.service.ts"],"sourcesContent":["// src/services/users.service.ts\r\n\r\nimport { User } from '@/context/AuthContext';\r\nimport { storageService } from './storage.service';\r\nimport { FEATURES, API_ENDPOINTS, buildApiUrl, apiCall, ApiResponse, apiClient, API_BASE_URL } from './api.config';\r\nimport { enhancedUsersService } from './users.service.enhanced';\r\nimport { sanitizeStrict, sanitizeUsername } from '@/utils/security/sanitization';\r\nimport { getRateLimiter, RATE_LIMITS } from '@/utils/security/rate-limiter';\r\nimport { z } from 'zod';\r\nimport { validateSchema } from '@/utils/validation/schemas';\r\nimport {\r\n  UserProfile as EnhancedUserProfile,\r\n  UserSearchParams as EnhancedUserSearchParams,\r\n  VerificationRequest as EnhancedVerificationRequest,\r\n  VerificationUpdateRequest as EnhancedVerificationUpdateRequest,\r\n  BanRequest as EnhancedBanRequest,\r\n  UserErrorCode,\r\n  isValidUsername,\r\n  isValidBio,\r\n  isValidSubscriptionPrice,\r\n} from '@/types/users';\r\n\r\n// Re-export types for backward compatibility\r\nexport type VerificationStatus = 'pending' | 'verified' | 'rejected' | 'unverified';\r\n\r\n// NOTE: Normalize to what the UI expects:\r\n// - subscriptionPrice: number (not string)\r\n// - profilePic/galleryImages: absolute URLs\r\nexport interface UserProfile {\r\n  bio: string;\r\n  profilePic: string | null;\r\n  subscriptionPrice: number; // <-- normalized to number for UI reliability\r\n  lastUpdated?: string;\r\n  galleryImages?: string[];\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  bio?: string;\r\n  profilePic?: string | null;\r\n  // Keep request as string for backward-compatibility with existing callers;\r\n  // backend accepts number; enhanced layer handles conversion.\r\n  subscriptionPrice?: string;\r\n  galleryImages?: string[];\r\n}\r\n\r\nexport interface VerificationRequest {\r\n  codePhoto?: string;\r\n  idFront?: string;\r\n  idBack?: string;\r\n  passport?: string;\r\n  code?: string;\r\n}\r\n\r\nexport interface VerificationUpdateRequest {\r\n  status: VerificationStatus;\r\n  rejectionReason?: string;\r\n  adminUsername?: string;\r\n}\r\n\r\nexport interface UserSearchParams {\r\n  role?: 'buyer' | 'seller';\r\n  verified?: boolean;\r\n  query?: string;\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\nexport interface BanRequest {\r\n  username: string;\r\n  reason: string;\r\n  duration?: number; // in days, undefined = permanent\r\n  adminUsername: string;\r\n}\r\n\r\n// ---------- Helpers to normalize API data for UI ----------\r\n\r\n/** Base host for non-API assets (e.g., /uploads/*). */\r\nconst BASE_HOST = (() => {\r\n  try {\r\n    // API_BASE_URL can be \"http://localhost:5000\" or \"http://localhost:5000/api\"\r\n    return API_BASE_URL.replace(/\\/api\\/?$/, '').replace(/\\/$/, '');\r\n  } catch {\r\n    return 'http://localhost:5000';\r\n  }\r\n})();\r\n\r\n/** Make a URL absolute if it's relative like \"/uploads/xyz.jpg\" */\r\nfunction toAbsoluteUrl(path?: string | null): string | null {\r\n  if (!path) return null;\r\n  if (/^https?:\\/\\//i.test(path)) return path; // already absolute\r\n  const normalized = path.startsWith('/') ? path : `/${path}`;\r\n  return `${BASE_HOST}${normalized}`;\r\n}\r\n\r\n/** Normalize subscription price (string|number|null|undefined) -> number */\r\nfunction toPriceNumber(value: unknown): number {\r\n  if (typeof value === 'number' && isFinite(value)) return value;\r\n  if (typeof value === 'string') {\r\n    const n = parseFloat(value);\r\n    return isFinite(n) && !Number.isNaN(n) ? n : 0;\r\n  }\r\n  return 0;\r\n}\r\n\r\n// Validation schemas\r\nconst verificationUpdateSchema = z.object({\r\n  status: z.enum(['pending', 'verified', 'rejected', 'unverified']),\r\n  rejectionReason: z.string().max(500).transform(sanitizeStrict).optional(),\r\n  adminUsername: z.string().min(3).max(30).transform(sanitizeUsername).optional(),\r\n});\r\n\r\nconst banRequestSchema = z.object({\r\n  username: z.string().min(3).max(30).transform(sanitizeUsername),\r\n  reason: z.string().min(10).max(500).transform(sanitizeStrict),\r\n  duration: z.number().int().positive().max(365).optional(), // Max 1 year\r\n  adminUsername: z.string().min(3).max(30).transform(sanitizeUsername),\r\n});\r\n\r\n/**\r\n * Users Service - Enhanced Version with Backward Compatibility\r\n * Normalizes API responses so UI components always receive correct shapes.\r\n */\r\nexport class UsersService {\r\n  private enhanced = enhancedUsersService;\r\n  private rateLimiter = getRateLimiter();\r\n\r\n  /**\r\n   * Get all users\r\n   */\r\n  async getUsers(params?: UserSearchParams): Promise<ApiResponse<Record<string, User>>> {\r\n    try {\r\n      const enhancedParams: EnhancedUserSearchParams = {\r\n        ...params,\r\n        sortBy: 'username',\r\n        sortOrder: 'asc',\r\n      };\r\n\r\n      const result = await this.enhanced.getUsers(enhancedParams);\r\n      if (!result.success) {\r\n        return result as any;\r\n      }\r\n\r\n      const usersMap: Record<string, User> = {};\r\n      if (result.data?.users) {\r\n        result.data.users.forEach(user => {\r\n          usersMap[user.username] = user;\r\n        });\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: usersMap,\r\n      };\r\n    } catch (error) {\r\n      console.error('Get users error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get users' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user by username\r\n   */\r\n  async getUser(username: string): Promise<ApiResponse<User | null>> {\r\n    return this.enhanced.getUser(username);\r\n  }\r\n\r\n  /**\r\n   * Get user profile data (PUBLIC profile)\r\n   * - Ensure price is number\r\n   * - Ensure images are absolute URLs so they display on the seller profile page\r\n   */\r\n  async getUserProfile(username: string): Promise<ApiResponse<UserProfile | null>> {\r\n    try {\r\n      const result = await this.enhanced.getUserProfile(username);\r\n\r\n      if (!result.success) {\r\n        return result as any;\r\n      }\r\n\r\n      if (!result.data) {\r\n        return { success: true, data: null };\r\n      }\r\n\r\n      const raw = result.data.profile;\r\n\r\n      const profile: UserProfile = {\r\n        bio: raw.bio,\r\n        profilePic: toAbsoluteUrl(raw.profilePic),\r\n        subscriptionPrice: toPriceNumber(raw.subscriptionPrice),\r\n        lastUpdated: raw.lastUpdated,\r\n        galleryImages: Array.isArray(raw.galleryImages)\r\n          ? (raw.galleryImages.map(p => toAbsoluteUrl(p)!).filter(Boolean) as string[])\r\n          : undefined,\r\n      };\r\n\r\n      return { success: true, data: profile };\r\n    } catch (error) {\r\n      console.error('Get user profile error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get user profile' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update user profile\r\n   * - Normalize the returned data to UI shapes (number price + absolute URLs)\r\n   */\r\n  async updateUserProfile(\r\n    username: string,\r\n    updates: UpdateProfileRequest\r\n  ): Promise<ApiResponse<UserProfile>> {\r\n    try {\r\n      if (!isValidUsername(username)) {\r\n        return { success: false, error: { message: 'Invalid username format' } };\r\n      }\r\n\r\n      if (updates.bio !== undefined && !isValidBio(updates.bio)) {\r\n        return { success: false, error: { message: 'Bio is too long (max 500 characters)' } };\r\n      }\r\n\r\n      if (updates.subscriptionPrice !== undefined && !isValidSubscriptionPrice(updates.subscriptionPrice)) {\r\n        return { success: false, error: { message: 'Invalid subscription price' } };\r\n      }\r\n\r\n      const result = await this.enhanced.updateUserProfile(username, updates);\r\n      if (!result.success) {\r\n        return result as any;\r\n      }\r\n\r\n      const raw = result.data!;\r\n\r\n      const profile: UserProfile = {\r\n        bio: raw.bio,\r\n        profilePic: toAbsoluteUrl(raw.profilePic),\r\n        subscriptionPrice: toPriceNumber(raw.subscriptionPrice),\r\n        lastUpdated: raw.lastUpdated,\r\n        galleryImages: Array.isArray(raw.galleryImages)\r\n          ? (raw.galleryImages.map((p: string) => toAbsoluteUrl(p)!).filter(Boolean) as string[])\r\n          : undefined,\r\n      };\r\n\r\n      return { success: true, data: profile };\r\n    } catch (error) {\r\n      console.error('Update user profile error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to update user profile' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request verification\r\n   */\r\n  async requestVerification(\r\n    username: string,\r\n    docs: VerificationRequest\r\n  ): Promise<ApiResponse<void>> {\r\n    return this.enhanced.requestVerification(username, docs);\r\n  }\r\n\r\n  /**\r\n   * Update verification status (admin only)\r\n   */\r\n  async updateVerificationStatus(\r\n    username: string,\r\n    update: VerificationUpdateRequest\r\n  ): Promise<ApiResponse<void>> {\r\n    try {\r\n      const rateLimitResult = this.rateLimiter.check(\r\n        'REPORT_ACTION',\r\n        { ...RATE_LIMITS.REPORT_ACTION, identifier: update.adminUsername }\r\n      );\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: `Rate limit exceeded. Please wait ${rateLimitResult.waitTime} seconds.` },\r\n        };\r\n      }\r\n\r\n      if (!isValidUsername(username)) {\r\n        return { success: false, error: { message: 'Invalid username format' } };\r\n      }\r\n\r\n      const sanitizedUsername = sanitizeUsername(username);\r\n\r\n      const validation = validateSchema(verificationUpdateSchema, update);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: { message: Object.values(validation.errors || {})[0] || 'Invalid update data' },\r\n        };\r\n      }\r\n\r\n      const sanitizedUpdate = validation.data!;\r\n\r\n      const enhancedUpdate: EnhancedVerificationUpdateRequest = {\r\n        ...sanitizedUpdate,\r\n        reviewedAt: new Date().toISOString(),\r\n      };\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        return await apiCall<void>(\r\n          buildApiUrl(API_ENDPOINTS.USERS.VERIFICATION, { username: sanitizedUsername }),\r\n          {\r\n            method: 'PATCH',\r\n            body: JSON.stringify(enhancedUpdate),\r\n          }\r\n        );\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const allUsers = await storageService.getItem<Record<string, any>>(\r\n        'all_users_v2',\r\n        {}\r\n      );\r\n\r\n      if (allUsers[sanitizedUsername]) {\r\n        allUsers[sanitizedUsername].verificationStatus = sanitizedUpdate.status;\r\n        allUsers[sanitizedUsername].isVerified = sanitizedUpdate.status === 'verified';\r\n\r\n        if (sanitizedUpdate.status === 'rejected' && sanitizedUpdate.rejectionReason) {\r\n          allUsers[sanitizedUsername].verificationRejectionReason = sanitizedUpdate.rejectionReason;\r\n        }\r\n\r\n        await storageService.setItem('all_users_v2', allUsers);\r\n\r\n        // Clear cache\r\n        this.enhanced.clearCache();\r\n      }\r\n\r\n      // Update verification request\r\n      const verificationRequests = await storageService.getItem<Record<string, any>>(\r\n        'panty_verification_requests',\r\n        {}\r\n      );\r\n\r\n      if (verificationRequests[sanitizedUsername]) {\r\n        verificationRequests[sanitizedUsername].status = sanitizedUpdate.status;\r\n        verificationRequests[sanitizedUsername].reviewedAt = new Date().toISOString();\r\n        verificationRequests[sanitizedUsername].reviewedBy = sanitizedUpdate.adminUsername;\r\n        if (sanitizedUpdate.rejectionReason) {\r\n          verificationRequests[sanitizedUsername].rejectionReason = sanitizedUpdate.rejectionReason;\r\n        }\r\n        await storageService.setItem('panty_verification_requests', verificationRequests);\r\n      }\r\n\r\n      // Track activity\r\n      await this.enhanced.trackActivity({\r\n        userId: sanitizedUpdate.adminUsername || 'admin',\r\n        type: 'profile_update',\r\n        details: {\r\n          action: 'verification_status_updated',\r\n          targetUser: sanitizedUsername,\r\n          newStatus: sanitizedUpdate.status,\r\n        },\r\n      });\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Update verification status error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to update verification status' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ban user\r\n   */\r\n  async banUser(request: BanRequest): Promise<ApiResponse<void>> {\r\n    try {\r\n      const rateLimitResult = this.rateLimiter.check(\r\n        'BAN_USER',\r\n        { ...RATE_LIMITS.BAN_USER, identifier: request.adminUsername }\r\n      );\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: `Rate limit exceeded. Please wait ${rateLimitResult.waitTime} seconds.` },\r\n        };\r\n      }\r\n\r\n      const validation = validateSchema(banRequestSchema, request);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: { message: Object.values(validation.errors || {})[0] || 'Invalid ban request' },\r\n        };\r\n      }\r\n\r\n      const sanitizedRequest = validation.data!;\r\n\r\n      const enhancedRequest: EnhancedBanRequest = {\r\n        ...sanitizedRequest,\r\n        evidence: [],\r\n      };\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        return await apiCall<void>(`${API_ENDPOINTS.USERS.LIST}/${sanitizedRequest.username}/ban`, {\r\n          method: 'POST',\r\n          body: JSON.stringify(enhancedRequest),\r\n        });\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const allUsers = await storageService.getItem<Record<string, any>>(\r\n        'all_users_v2',\r\n        {}\r\n      );\r\n\r\n      if (allUsers[sanitizedRequest.username]) {\r\n        allUsers[sanitizedRequest.username].isBanned = true;\r\n        allUsers[sanitizedRequest.username].banReason = sanitizedRequest.reason;\r\n\r\n        if (sanitizedRequest.duration) {\r\n          const expiresAt = new Date();\r\n          expiresAt.setDate(expiresAt.getDate() + sanitizedRequest.duration);\r\n          allUsers[sanitizedRequest.username].banExpiresAt = expiresAt.toISOString();\r\n        }\r\n\r\n        await storageService.setItem('all_users_v2', allUsers);\r\n\r\n        // Clear cache\r\n        this.enhanced.clearCache();\r\n      }\r\n\r\n      // Store ban log\r\n      const banLogs = await storageService.getItem<any[]>('ban_logs', []);\r\n      banLogs.push({\r\n        username: sanitizedRequest.username,\r\n        reason: sanitizedRequest.reason,\r\n        duration: sanitizedRequest.duration,\r\n        bannedBy: sanitizedRequest.adminUsername,\r\n        bannedAt: new Date().toISOString(),\r\n      });\r\n\r\n      if (banLogs.length > 1000) {\r\n        banLogs.splice(0, banLogs.length - 1000);\r\n      }\r\n\r\n      await storageService.setItem('ban_logs', banLogs);\r\n\r\n      // Track activity\r\n      await this.enhanced.trackActivity({\r\n        userId: sanitizedRequest.adminUsername,\r\n        type: 'profile_update',\r\n        details: {\r\n          action: 'user_banned',\r\n          targetUser: sanitizedRequest.username,\r\n          reason: sanitizedRequest.reason,\r\n          duration: sanitizedRequest.duration,\r\n        },\r\n      });\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Ban user error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to ban user' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unban user\r\n   */\r\n  async unbanUser(username: string, adminUsername: string): Promise<ApiResponse<void>> {\r\n    try {\r\n      const rateLimitResult = this.rateLimiter.check(\r\n        'BAN_USER',\r\n        { ...RATE_LIMITS.BAN_USER, identifier: adminUsername }\r\n      );\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: `Rate limit exceeded. Please wait ${rateLimitResult.waitTime} seconds.` },\r\n        };\r\n      }\r\n\r\n      if (!isValidUsername(username) || !isValidUsername(adminUsername)) {\r\n        return { success: false, error: { message: 'Invalid username format' } };\r\n      }\r\n\r\n      const sanitizedUsername = sanitizeUsername(username);\r\n      const sanitizedAdminUsername = sanitizeUsername(adminUsername);\r\n\r\n      if (FEATURES.USE_API_USERS) {\r\n        return await apiCall<void>(`${API_ENDPOINTS.USERS.LIST}/${sanitizedUsername}/unban`, {\r\n          method: 'POST',\r\n          body: JSON.stringify({ adminUsername: sanitizedAdminUsername }),\r\n        });\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const allUsers = await storageService.getItem<Record<string, any>>(\r\n        'all_users_v2',\r\n        {}\r\n      );\r\n\r\n      if (allUsers[sanitizedUsername]) {\r\n        allUsers[sanitizedUsername].isBanned = false;\r\n        delete allUsers[sanitizedUsername].banReason;\r\n        delete allUsers[sanitizedUsername].banExpiresAt;\r\n        await storageService.setItem('all_users_v2', allUsers);\r\n\r\n        // Clear cache\r\n        this.enhanced.clearCache();\r\n      }\r\n\r\n      // Update ban log\r\n      const banLogs = await storageService.getItem<any[]>('ban_logs', []);\r\n      banLogs.push({\r\n        username: sanitizedUsername,\r\n        action: 'unban',\r\n        unbannedBy: sanitizedAdminUsername,\r\n        unbannedAt: new Date().toISOString(),\r\n      });\r\n\r\n      if (banLogs.length > 1000) {\r\n        banLogs.splice(0, banLogs.length - 1000);\r\n      }\r\n\r\n      await storageService.setItem('ban_logs', banLogs);\r\n\r\n      // Track activity\r\n      await this.enhanced.trackActivity({\r\n        userId: sanitizedAdminUsername,\r\n        type: 'profile_update',\r\n        details: {\r\n          action: 'user_unbanned',\r\n          targetUser: sanitizedUsername,\r\n        },\r\n      });\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Unban user error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to unban user' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get subscription info for a seller\r\n   * (kept as-is; callers can coerce price if needed)\r\n   */\r\n  async getSubscriptionInfo(seller: string, buyer: string): Promise<ApiResponse<{\r\n    isSubscribed: boolean;\r\n    price: string;\r\n    subscribedAt?: string;\r\n  }>> {\r\n    try {\r\n      if (!isValidUsername(seller) || !isValidUsername(buyer)) {\r\n        return { success: false, error: { message: 'Invalid username format' } };\r\n      }\r\n\r\n      const subResult = await this.enhanced.getSubscriptionStatus(buyer, seller);\r\n      if (!subResult.success) {\r\n        return subResult as any;\r\n      }\r\n\r\n      if (!subResult.data) {\r\n        const profileResult = await this.getUserProfile(seller);\r\n        const price = profileResult.data?.subscriptionPrice ?? 0;\r\n        return {\r\n          success: true,\r\n          data: {\r\n            isSubscribed: false,\r\n            price: String(price),\r\n          },\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          isSubscribed: subResult.data.status === 'active',\r\n          price: subResult.data.price,\r\n          subscribedAt: subResult.data.subscribedAt,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      console.error('Get subscription info error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get subscription info' },\r\n      };\r\n    }\r\n  }\r\n\r\n  // New enhanced methods - exposed for gradual adoption\r\n  async getUserPreferences(username: string) {\r\n    return this.enhanced.getUserPreferences(username);\r\n  }\r\n\r\n  async updateUserPreferences(username: string, updates: any) {\r\n    return this.enhanced.updateUserPreferences(username, updates);\r\n  }\r\n\r\n  async trackActivity(activity: any) {\r\n    return this.enhanced.trackActivity(activity);\r\n  }\r\n\r\n  async getUserActivity(username: string, limit?: number) {\r\n    return this.enhanced.getUserActivity(username, limit);\r\n  }\r\n\r\n  async batchUpdateUsers(updates: any[]) {\r\n    return this.enhanced.batchUpdateUsers(updates);\r\n  }\r\n\r\n  clearCache() {\r\n    this.enhanced.clearCache();\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const usersService = new UsersService();\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3938, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/ban.service.ts"],"sourcesContent":["// src/services/ban.service.ts\r\nimport { apiCall, API_BASE_URL, FEATURES, buildApiUrl } from './api.config';\r\nimport { storageService } from './storage.service';\r\n\r\nexport interface BanData {\r\n  username: string;\r\n  reason: string;\r\n  customReason?: string;\r\n  duration?: number | 'permanent'; // Fixed: Allow 'permanent' as well as number\r\n  isPermanent?: boolean;\r\n  notes?: string;\r\n  relatedReportIds?: string[]; // Changed to array to match usage\r\n  bannedBy?: string;\r\n}\r\n\r\nexport interface BanResponse {\r\n  success: boolean;\r\n  data?: any;\r\n  error?: any;\r\n}\r\n\r\nclass BanService {\r\n  // Create a ban\r\n  async createBan(data: BanData): Promise<BanResponse> {\r\n    console.log('[BanService] Creating ban:', data);\r\n    \r\n    // Only use API if feature is enabled\r\n    if (!FEATURES.USE_API_BANS) {\r\n      console.log('[BanService] API bans disabled, returning success for localStorage-only operation');\r\n      return { success: true };\r\n    }\r\n    \r\n    try {\r\n      const response = await apiCall(`${API_BASE_URL}/api/admin/bans`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          ...data,\r\n          isPermanent: data.duration === 'permanent'\r\n        })\r\n      });\r\n\r\n      console.log('[BanService] Ban response:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('[BanService] Error creating ban:', error);\r\n      // Don't throw - let the context handle localStorage fallback\r\n      return { success: false, error };\r\n    }\r\n  }\r\n\r\n  // Get all bans (admin only)\r\n  async getBans(params?: {\r\n    active?: boolean;\r\n    username?: string;\r\n    page?: number;\r\n    limit?: number;\r\n  }): Promise<BanResponse> {\r\n    if (!FEATURES.USE_API_BANS) {\r\n      // Return data from localStorage\r\n      const bans = await storageService.getItem('panty_user_bans', []);\r\n      return { success: true, data: { bans } };\r\n    }\r\n\r\n    const queryParams = new URLSearchParams();\r\n    if (params) {\r\n      Object.entries(params).forEach(([key, value]) => {\r\n        if (value !== undefined) {\r\n          queryParams.append(key, String(value));\r\n        }\r\n      });\r\n    }\r\n    \r\n    try {\r\n      return await apiCall(`/admin/bans${queryParams.toString() ? `?${queryParams.toString()}` : ''}`, {\r\n        method: 'GET'\r\n      });\r\n    } catch (error) {\r\n      console.error('[BanService] Error fetching bans:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n\r\n  // Lift/unban\r\n  async unbanUser(username: string, reason?: string): Promise<BanResponse> {\r\n    if (!FEATURES.USE_API_BANS) {\r\n      return { success: true };\r\n    }\r\n\r\n    try {\r\n      return await apiCall(buildApiUrl('/admin/bans/:username/unban', { username }), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ reason })\r\n      });\r\n    } catch (error) {\r\n      console.error('[BanService] Error unbanning user:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n\r\n  // Get ban stats\r\n  async getBanStats(): Promise<BanResponse> {\r\n    if (!FEATURES.USE_API_BANS) {\r\n      const bans = await storageService.getItem<any[]>('panty_user_bans', []);\r\n      const activeBans = bans.filter(b => b.active);\r\n      return {\r\n        success: true,\r\n        data: {\r\n          totalActiveBans: activeBans.length,\r\n          permanentBans: activeBans.filter(b => b.isPermanent || b.banType === 'permanent').length,\r\n          temporaryBans: activeBans.filter(b => !b.isPermanent && b.banType !== 'permanent').length,\r\n          pendingAppeals: activeBans.filter(b => b.appealStatus === 'pending').length,\r\n          bansLast24h: bans.filter(b => {\r\n            const banDate = new Date(b.createdAt || b.startTime);\r\n            return (Date.now() - banDate.getTime()) < 24 * 60 * 60 * 1000;\r\n          }).length\r\n        }\r\n      };\r\n    }\r\n\r\n    try {\r\n      return await apiCall('/admin/bans/stats', {\r\n        method: 'GET'\r\n      });\r\n    } catch (error) {\r\n      console.error('[BanService] Error fetching ban stats:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n\r\n  // Submit appeal\r\n  async submitAppeal(banId: string, appealText: string, evidence?: string[]): Promise<BanResponse> {\r\n    if (!FEATURES.USE_API_BANS) {\r\n      return { success: true };\r\n    }\r\n\r\n    try {\r\n      return await apiCall(buildApiUrl('/admin/bans/:id/appeal', { id: banId }), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ appealText, evidence })\r\n      });\r\n    } catch (error) {\r\n      console.error('[BanService] Error submitting appeal:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n\r\n  // Review appeal (admin)\r\n  async reviewAppeal(banId: string, decision: 'approve' | 'reject' | 'escalate', notes: string): Promise<BanResponse> {\r\n    if (!FEATURES.USE_API_BANS) {\r\n      return { success: true };\r\n    }\r\n\r\n    try {\r\n      return await apiCall(buildApiUrl('/admin/bans/:id/appeal/review', { id: banId }), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ decision, notes })\r\n      });\r\n    } catch (error) {\r\n      console.error('[BanService] Error reviewing appeal:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n}\r\n\r\nexport const banService = new BanService();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4132, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/reports.service.ts"],"sourcesContent":["// src/services/reports.service.ts\r\nimport { apiCall, buildApiUrl, API_BASE_URL, FEATURES } from './api.config';\r\nimport { storageService } from './storage.service';\r\n\r\nexport interface SubmitReportData {\r\n  reportedUser: string;\r\n  reportType: 'harassment' | 'spam' | 'inappropriate_content' | 'scam' | 'other';\r\n  description: string;\r\n  evidence?: string[];\r\n  severity?: 'low' | 'medium' | 'high' | 'critical';\r\n  relatedMessageId?: string;\r\n}\r\n\r\nexport interface ProcessReportData {\r\n  action: 'ban' | 'dismiss' | 'resolve';\r\n  banDuration?: number | 'permanent';\r\n  reason?: string;\r\n  notes?: string;\r\n}\r\n\r\nexport interface Report {\r\n  id: string;\r\n  reporter: string;\r\n  reportee: string;\r\n  date: string;\r\n  category: 'harassment' | 'spam' | 'inappropriate_content' | 'scam' | 'other';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  adminNotes: string;\r\n  processed: boolean;\r\n  processedAt?: string;\r\n  banApplied?: boolean;\r\n}\r\n\r\nexport interface ReportResponse {\r\n  success: boolean;\r\n  data?: any;\r\n  error?: any;\r\n}\r\n\r\nclass ReportsService {\r\n  async submitReport(data: SubmitReportData): Promise<ReportResponse> {\r\n    console.log('[ReportsService] Submitting report:', data);\r\n    \r\n    // Check if API reports are enabled\r\n    if (!FEATURES.USE_API_REPORTS) {\r\n      console.log('[ReportsService] API reports disabled, saving to localStorage only');\r\n      \r\n      // Save to localStorage as fallback\r\n      const reports = await storageService.getItem<Report[]>('panty_report_logs', []);\r\n      const newReport: Report = {\r\n        id: `report_${Date.now()}`,\r\n        reporter: 'current_user', // You'll need to pass this from the context\r\n        reportee: data.reportedUser,\r\n        date: new Date().toISOString(),\r\n        category: data.reportType,\r\n        severity: data.severity || 'medium',\r\n        adminNotes: data.description,\r\n        processed: false\r\n      };\r\n      reports.push(newReport);\r\n      await storageService.setItem('panty_report_logs', reports);\r\n      \r\n      return { success: true, data: newReport };\r\n    }\r\n    \r\n    try {\r\n      const response = await apiCall<any>(`${API_BASE_URL}/api/reports/submit`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n      });\r\n\r\n      if (response.success) {\r\n        console.log('[ReportsService] Report submitted successfully');\r\n        \r\n        // Also save to localStorage for immediate UI updates\r\n        const reports = await storageService.getItem<Report[]>('panty_report_logs', []);\r\n        const newReport: Report = {\r\n          id: response.data?.reportId || response.data?.id || `report_${Date.now()}`,\r\n          reporter: 'current_user',\r\n          reportee: data.reportedUser,\r\n          date: new Date().toISOString(),\r\n          category: data.reportType,\r\n          severity: data.severity || 'medium',\r\n          adminNotes: data.description,\r\n          processed: false\r\n        };\r\n        reports.push(newReport);\r\n        await storageService.setItem('panty_report_logs', reports);\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('[ReportsService] Error submitting report:', error);\r\n      \r\n      // Fallback to localStorage on error\r\n      const reports = await storageService.getItem<Report[]>('panty_report_logs', []);\r\n      const newReport: Report = {\r\n        id: `report_${Date.now()}`,\r\n        reporter: 'current_user',\r\n        reportee: data.reportedUser,\r\n        date: new Date().toISOString(),\r\n        category: data.reportType,\r\n        severity: data.severity || 'medium',\r\n        adminNotes: data.description,\r\n        processed: false\r\n      };\r\n      reports.push(newReport);\r\n      await storageService.setItem('panty_report_logs', reports);\r\n      \r\n      return { success: true, data: newReport };\r\n    }\r\n  }\r\n\r\n  async getReports(params?: {\r\n    page?: number;\r\n    limit?: number;\r\n    status?: string;\r\n    severity?: string;\r\n    reportType?: string;\r\n  }): Promise<ReportResponse> {\r\n    if (!FEATURES.USE_API_REPORTS) {\r\n      const reports = await storageService.getItem<Report[]>('panty_report_logs', []);\r\n      return { success: true, data: { reports } };\r\n    }\r\n\r\n    const queryParams = new URLSearchParams();\r\n    if (params) {\r\n      Object.entries(params).forEach(([key, value]) => {\r\n        if (value !== undefined) {\r\n          queryParams.append(key, String(value));\r\n        }\r\n      });\r\n    }\r\n    \r\n    try {\r\n      return await apiCall(`${API_BASE_URL}/api/reports?${queryParams.toString()}`, {\r\n        method: 'GET'\r\n      });\r\n    } catch (error) {\r\n      console.error('[ReportsService] Error fetching reports:', error);\r\n      const reports = await storageService.getItem<Report[]>('panty_report_logs', []);\r\n      return { success: true, data: { reports } };\r\n    }\r\n  }\r\n\r\n  async getReportById(id: string): Promise<ReportResponse> {\r\n    if (!FEATURES.USE_API_REPORTS) {\r\n      const reports = await storageService.getItem<Report[]>('panty_report_logs', []);\r\n      const report = reports.find((r) => r.id === id);\r\n      return { success: !!report, data: report };\r\n    }\r\n\r\n    try {\r\n      return await apiCall(buildApiUrl('/reports/:id', { id }), {\r\n        method: 'GET'\r\n      });\r\n    } catch (error) {\r\n      console.error('[ReportsService] Error fetching report:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n\r\n  async updateReport(id: string, updates: {\r\n    status?: string;\r\n    adminNotes?: string;\r\n    category?: string;\r\n    severity?: string;\r\n  }): Promise<ReportResponse> {\r\n    if (!FEATURES.USE_API_REPORTS) {\r\n      const reports = await storageService.getItem<Report[]>('panty_report_logs', []);\r\n      const index = reports.findIndex((r) => r.id === id);\r\n      if (index !== -1) {\r\n        reports[index] = { ...reports[index], ...updates } as Report;\r\n        await storageService.setItem('panty_report_logs', reports);\r\n        return { success: true, data: reports[index] };\r\n      }\r\n      return { success: false, error: 'Report not found' };\r\n    }\r\n\r\n    try {\r\n      return await apiCall(buildApiUrl('/reports/:id', { id }), {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(updates)\r\n      });\r\n    } catch (error) {\r\n      console.error('[ReportsService] Error updating report:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n\r\n  async processReport(id: string, data: ProcessReportData): Promise<ReportResponse> {\r\n    if (!FEATURES.USE_API_REPORTS) {\r\n      const reports = await storageService.getItem<Report[]>('panty_report_logs', []);\r\n      const index = reports.findIndex((r) => r.id === id);\r\n      if (index !== -1) {\r\n        reports[index] = { \r\n          ...reports[index], \r\n          processed: true,\r\n          processedAt: new Date().toISOString(),\r\n          banApplied: data.action === 'ban'\r\n        };\r\n        await storageService.setItem('panty_report_logs', reports);\r\n        return { success: true, data: reports[index] };\r\n      }\r\n      return { success: false, error: 'Report not found' };\r\n    }\r\n\r\n    try {\r\n      return await apiCall(buildApiUrl('/reports/:id/process', { id }), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n      });\r\n    } catch (error) {\r\n      console.error('[ReportsService] Error processing report:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n\r\n  async getReportStats(): Promise<ReportResponse> {\r\n    if (!FEATURES.USE_API_REPORTS) {\r\n      const reports = await storageService.getItem<Report[]>('panty_report_logs', []);\r\n      const stats = {\r\n        total: reports.length,\r\n        pending: reports.filter((r) => !r.processed).length,\r\n        resolved: reports.filter((r) => r.processed).length,\r\n        withBans: reports.filter((r) => r.banApplied).length\r\n      };\r\n      return { success: true, data: stats };\r\n    }\r\n\r\n    try {\r\n      return await apiCall(`${API_BASE_URL}/api/reports/stats`, {\r\n        method: 'GET'\r\n      });\r\n    } catch (error) {\r\n      console.error('[ReportsService] Error fetching stats:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n\r\n  async getUserReports(username: string, includeResolved = false): Promise<ReportResponse> {\r\n    if (!FEATURES.USE_API_REPORTS) {\r\n      const reports = await storageService.getItem<Report[]>('panty_report_logs', []);\r\n      const userReports = reports.filter((r) => \r\n        r.reportee === username && (includeResolved || !r.processed)\r\n      );\r\n      return { success: true, data: { reports: userReports } };\r\n    }\r\n\r\n    try {\r\n      return await apiCall(\r\n        buildApiUrl('/reports/user/:username', { username }) + \r\n        `?includeResolved=${includeResolved}`, \r\n        {\r\n          method: 'GET'\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error('[ReportsService] Error fetching user reports:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n}\r\n\r\nexport const reportsService = new ReportsService();"],"names":[],"mappings":"AAAA,kCAAkC;;;;AAClC;AAAA;AACA;;;AAqCA,MAAM;IACJ,MAAM,aAAa,IAAsB,EAA2B;QAClE,QAAQ,GAAG,CAAC,uCAAuC;QAEnD,mCAAmC;QACnC,IAAI,CAAC,gJAAA,CAAA,WAAQ,CAAC,eAAe,EAAE;YAC7B,QAAQ,GAAG,CAAC;YAEZ,mCAAmC;YACnC,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAW,qBAAqB,EAAE;YAC9E,MAAM,YAAoB;gBACxB,IAAI,CAAC,OAAO,EAAE,KAAK,GAAG,IAAI;gBAC1B,UAAU;gBACV,UAAU,KAAK,YAAY;gBAC3B,MAAM,IAAI,OAAO,WAAW;gBAC5B,UAAU,KAAK,UAAU;gBACzB,UAAU,KAAK,QAAQ,IAAI;gBAC3B,YAAY,KAAK,WAAW;gBAC5B,WAAW;YACb;YACA,QAAQ,IAAI,CAAC;YACb,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,qBAAqB;YAElD,OAAO;gBAAE,SAAS;gBAAM,MAAM;YAAU;QAC1C;QAEA,IAAI;YACF,MAAM,WAAW,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAO,GAAG,gJAAA,CAAA,eAAY,CAAC,mBAAmB,CAAC,EAAE;gBACxE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,SAAS,OAAO,EAAE;gBACpB,QAAQ,GAAG,CAAC;gBAEZ,qDAAqD;gBACrD,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAW,qBAAqB,EAAE;gBAC9E,MAAM,YAAoB;oBACxB,IAAI,SAAS,IAAI,EAAE,YAAY,SAAS,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,GAAG,IAAI;oBAC1E,UAAU;oBACV,UAAU,KAAK,YAAY;oBAC3B,MAAM,IAAI,OAAO,WAAW;oBAC5B,UAAU,KAAK,UAAU;oBACzB,UAAU,KAAK,QAAQ,IAAI;oBAC3B,YAAY,KAAK,WAAW;oBAC5B,WAAW;gBACb;gBACA,QAAQ,IAAI,CAAC;gBACb,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,qBAAqB;YACpD;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,6CAA6C;YAE3D,oCAAoC;YACpC,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAW,qBAAqB,EAAE;YAC9E,MAAM,YAAoB;gBACxB,IAAI,CAAC,OAAO,EAAE,KAAK,GAAG,IAAI;gBAC1B,UAAU;gBACV,UAAU,KAAK,YAAY;gBAC3B,MAAM,IAAI,OAAO,WAAW;gBAC5B,UAAU,KAAK,UAAU;gBACzB,UAAU,KAAK,QAAQ,IAAI;gBAC3B,YAAY,KAAK,WAAW;gBAC5B,WAAW;YACb;YACA,QAAQ,IAAI,CAAC;YACb,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,qBAAqB;YAElD,OAAO;gBAAE,SAAS;gBAAM,MAAM;YAAU;QAC1C;IACF;IAEA,MAAM,WAAW,MAMhB,EAA2B;QAC1B,IAAI,CAAC,gJAAA,CAAA,WAAQ,CAAC,eAAe,EAAE;YAC7B,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAW,qBAAqB,EAAE;YAC9E,OAAO;gBAAE,SAAS;gBAAM,MAAM;oBAAE;gBAAQ;YAAE;QAC5C;QAEA,MAAM,cAAc,IAAI;QACxB,IAAI,QAAQ;YACV,OAAO,OAAO,CAAC,QAAQ,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM;gBAC1C,IAAI,UAAU,WAAW;oBACvB,YAAY,MAAM,CAAC,KAAK,OAAO;gBACjC;YACF;QACF;QAEA,IAAI;YACF,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAE,GAAG,gJAAA,CAAA,eAAY,CAAC,aAAa,EAAE,YAAY,QAAQ,IAAI,EAAE;gBAC5E,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4CAA4C;YAC1D,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAW,qBAAqB,EAAE;YAC9E,OAAO;gBAAE,SAAS;gBAAM,MAAM;oBAAE;gBAAQ;YAAE;QAC5C;IACF;IAEA,MAAM,cAAc,EAAU,EAA2B;QACvD,IAAI,CAAC,gJAAA,CAAA,WAAQ,CAAC,eAAe,EAAE;YAC7B,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAW,qBAAqB,EAAE;YAC9E,MAAM,SAAS,QAAQ,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;YAC5C,OAAO;gBAAE,SAAS,CAAC,CAAC;gBAAQ,MAAM;YAAO;QAC3C;QAEA,IAAI;YACF,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,gJAAA,CAAA,cAAW,AAAD,EAAE,gBAAgB;gBAAE;YAAG,IAAI;gBACxD,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,OAAO;gBAAE,SAAS;gBAAO;YAAM;QACjC;IACF;IAEA,MAAM,aAAa,EAAU,EAAE,OAK9B,EAA2B;QAC1B,IAAI,CAAC,gJAAA,CAAA,WAAQ,CAAC,eAAe,EAAE;YAC7B,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAW,qBAAqB,EAAE;YAC9E,MAAM,QAAQ,QAAQ,SAAS,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;YAChD,IAAI,UAAU,CAAC,GAAG;gBAChB,OAAO,CAAC,MAAM,GAAG;oBAAE,GAAG,OAAO,CAAC,MAAM;oBAAE,GAAG,OAAO;gBAAC;gBACjD,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,qBAAqB;gBAClD,OAAO;oBAAE,SAAS;oBAAM,MAAM,OAAO,CAAC,MAAM;gBAAC;YAC/C;YACA,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAmB;QACrD;QAEA,IAAI;YACF,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,gJAAA,CAAA,cAAW,AAAD,EAAE,gBAAgB;gBAAE;YAAG,IAAI;gBACxD,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,OAAO;gBAAE,SAAS;gBAAO;YAAM;QACjC;IACF;IAEA,MAAM,cAAc,EAAU,EAAE,IAAuB,EAA2B;QAChF,IAAI,CAAC,gJAAA,CAAA,WAAQ,CAAC,eAAe,EAAE;YAC7B,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAW,qBAAqB,EAAE;YAC9E,MAAM,QAAQ,QAAQ,SAAS,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;YAChD,IAAI,UAAU,CAAC,GAAG;gBAChB,OAAO,CAAC,MAAM,GAAG;oBACf,GAAG,OAAO,CAAC,MAAM;oBACjB,WAAW;oBACX,aAAa,IAAI,OAAO,WAAW;oBACnC,YAAY,KAAK,MAAM,KAAK;gBAC9B;gBACA,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,qBAAqB;gBAClD,OAAO;oBAAE,SAAS;oBAAM,MAAM,OAAO,CAAC,MAAM;gBAAC;YAC/C;YACA,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAmB;QACrD;QAEA,IAAI;YACF,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,gJAAA,CAAA,cAAW,AAAD,EAAE,wBAAwB;gBAAE;YAAG,IAAI;gBAChE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,6CAA6C;YAC3D,OAAO;gBAAE,SAAS;gBAAO;YAAM;QACjC;IACF;IAEA,MAAM,iBAA0C;QAC9C,IAAI,CAAC,gJAAA,CAAA,WAAQ,CAAC,eAAe,EAAE;YAC7B,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAW,qBAAqB,EAAE;YAC9E,MAAM,QAAQ;gBACZ,OAAO,QAAQ,MAAM;gBACrB,SAAS,QAAQ,MAAM,CAAC,CAAC,IAAM,CAAC,EAAE,SAAS,EAAE,MAAM;gBACnD,UAAU,QAAQ,MAAM,CAAC,CAAC,IAAM,EAAE,SAAS,EAAE,MAAM;gBACnD,UAAU,QAAQ,MAAM,CAAC,CAAC,IAAM,EAAE,UAAU,EAAE,MAAM;YACtD;YACA,OAAO;gBAAE,SAAS;gBAAM,MAAM;YAAM;QACtC;QAEA,IAAI;YACF,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAE,GAAG,gJAAA,CAAA,eAAY,CAAC,kBAAkB,CAAC,EAAE;gBACxD,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0CAA0C;YACxD,OAAO;gBAAE,SAAS;gBAAO;YAAM;QACjC;IACF;IAEA,MAAM,eAAe,QAAgB,EAAE,kBAAkB,KAAK,EAA2B;QACvF,IAAI,CAAC,gJAAA,CAAA,WAAQ,CAAC,eAAe,EAAE;YAC7B,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAW,qBAAqB,EAAE;YAC9E,MAAM,cAAc,QAAQ,MAAM,CAAC,CAAC,IAClC,EAAE,QAAQ,KAAK,YAAY,CAAC,mBAAmB,CAAC,EAAE,SAAS;YAE7D,OAAO;gBAAE,SAAS;gBAAM,MAAM;oBAAE,SAAS;gBAAY;YAAE;QACzD;QAEA,IAAI;YACF,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EACjB,CAAA,GAAA,gJAAA,CAAA,cAAW,AAAD,EAAE,2BAA2B;gBAAE;YAAS,KAClD,CAAC,iBAAiB,EAAE,iBAAiB,EACrC;gBACE,QAAQ;YACV;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iDAAiD;YAC/D,OAAO;gBAAE,SAAS;gBAAO;YAAM;QACjC;IACF;AACF;AAEO,MAAM,iBAAiB,IAAI","debugId":null}},
    {"offset": {"line": 4405, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/wallet.validation.ts"],"sourcesContent":["// src/services/wallet.validation.ts\r\n\r\nimport { Money, UserId } from '@/types/common';\r\n\r\n// Transaction types (moved from deleted wallet.service.enhanced.ts)\r\nexport interface Transaction {\r\n  id: string;\r\n  type: 'deposit' | 'withdrawal' | 'purchase' | 'sale' | 'tip' | 'subscription' | \r\n        'admin_credit' | 'admin_debit' | 'refund' | 'fee' | 'tier_credit';\r\n  amount: Money;\r\n  from?: UserId;\r\n  to?: UserId;\r\n  fromRole?: 'buyer' | 'seller' | 'admin';\r\n  toRole?: 'buyer' | 'seller' | 'admin';\r\n  description: string;\r\n  status: 'pending' | 'completed' | 'failed' | 'cancelled';\r\n  createdAt: string;\r\n  completedAt?: string;\r\n  failedAt?: string;\r\n  errorMessage?: string;\r\n  metadata?: TransactionMetadata;\r\n  idempotencyKey?: string;\r\n  reversalOf?: string;\r\n  reversedBy?: string;\r\n}\r\n\r\nexport interface TransactionMetadata {\r\n  orderId?: string;\r\n  listingId?: string;\r\n  subscriptionId?: string;\r\n  paymentMethod?: string;\r\n  bankAccount?: string | {\r\n    accountNumber: string;\r\n    routingNumber: string;\r\n    accountHolderName?: string;\r\n    country?: string;\r\n  };\r\n  notes?: string;\r\n  ipAddress?: string;\r\n  userAgent?: string;\r\n  platformFee?: Money;\r\n  tierCreditAmount?: Money;\r\n  originalAmount?: Money;\r\n  adminUser?: string;\r\n  reason?: string;\r\n}\r\n\r\n/**\r\n * Financial validation rules and utilities\r\n */\r\nexport class WalletValidation {\r\n  // Financial limits\r\n  static readonly LIMITS = {\r\n    MIN_TRANSACTION: Money.fromDollars(0.01),\r\n    MAX_TRANSACTION: Money.fromDollars(50000),\r\n    MIN_DEPOSIT: Money.fromDollars(1),\r\n    MAX_DEPOSIT: Money.fromDollars(10000),\r\n    MIN_WITHDRAWAL: Money.fromDollars(10),\r\n    MAX_WITHDRAWAL: Money.fromDollars(5000),\r\n    MIN_TIP: Money.fromDollars(1),\r\n    MAX_TIP: Money.fromDollars(500),\r\n    DAILY_DEPOSIT_LIMIT: Money.fromDollars(50000),\r\n    DAILY_WITHDRAWAL_LIMIT: Money.fromDollars(10000),\r\n  } as const;\r\n\r\n  // Fee structure\r\n  static readonly FEES = {\r\n    PLATFORM_PERCENT: 0.10, // 10%\r\n    SUBSCRIPTION_PERCENT: 0.25, // 25%\r\n    WITHDRAWAL_FLAT: Money.fromDollars(0), // No flat fee for now\r\n    INTERNATIONAL_PERCENT: 0.03, // 3% for international\r\n    RUSH_WITHDRAWAL_PERCENT: 0.05, // 5% for rush withdrawals\r\n  } as const;\r\n\r\n  /**\r\n   * Validate money amount\r\n   */\r\n  static validateAmount(\r\n    amount: Money,\r\n    min: Money = this.LIMITS.MIN_TRANSACTION,\r\n    max: Money = this.LIMITS.MAX_TRANSACTION\r\n  ): { valid: boolean; error?: string } {\r\n    if (amount < min) {\r\n      return {\r\n        valid: false,\r\n        error: `Amount must be at least ${Money.format(min)}`,\r\n      };\r\n    }\r\n\r\n    if (amount > max) {\r\n      return {\r\n        valid: false,\r\n        error: `Amount cannot exceed ${Money.format(max)}`,\r\n      };\r\n    }\r\n\r\n    // Check for integer cents\r\n    if (!Number.isInteger(amount)) {\r\n      return {\r\n        valid: false,\r\n        error: 'Invalid money amount',\r\n      };\r\n    }\r\n\r\n    return { valid: true };\r\n  }\r\n\r\n  /**\r\n   * Calculate platform fee\r\n   */\r\n  static calculatePlatformFee(\r\n    amount: Money,\r\n    feePercent: number = this.FEES.PLATFORM_PERCENT\r\n  ): {\r\n    fee: Money;\r\n    netAmount: Money;\r\n    grossAmount: Money;\r\n  } {\r\n    const fee = Math.floor(amount * feePercent) as Money;\r\n    const netAmount = (amount - fee) as Money;\r\n\r\n    return {\r\n      fee,\r\n      netAmount,\r\n      grossAmount: amount,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate tier credit bonus\r\n   */\r\n  static calculateTierCredit(\r\n    amount: Money,\r\n    tierPercent: number\r\n  ): Money {\r\n    return Math.floor(amount * tierPercent) as Money;\r\n  }\r\n\r\n  /**\r\n   * Validate withdrawal limits\r\n   */\r\n  static async validateWithdrawalLimits(\r\n    userId: UserId,\r\n    amount: Money,\r\n    transactions: Transaction[]\r\n  ): Promise<{ valid: boolean; error?: string; remainingLimit?: Money }> {\r\n    // Get today's withdrawals\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    const todaysWithdrawals = transactions.filter(t => {\r\n      const tDate = new Date(t.createdAt);\r\n      return (\r\n        t.type === 'withdrawal' &&\r\n        t.from === userId &&\r\n        t.status === 'completed' &&\r\n        tDate >= today\r\n      );\r\n    });\r\n\r\n    const totalWithdrawnToday = todaysWithdrawals.reduce(\r\n      (sum, t) => sum + t.amount,\r\n      0\r\n    ) as Money;\r\n\r\n    const remainingLimit = (this.LIMITS.DAILY_WITHDRAWAL_LIMIT - totalWithdrawnToday) as Money;\r\n\r\n    if (amount > remainingLimit) {\r\n      return {\r\n        valid: false,\r\n        error: `Daily withdrawal limit exceeded. Remaining: ${Money.format(remainingLimit)}`,\r\n        remainingLimit,\r\n      };\r\n    }\r\n\r\n    return { valid: true, remainingLimit };\r\n  }\r\n\r\n  /**\r\n   * Validate deposit limits\r\n   */\r\n  static async validateDepositLimits(\r\n    userId: UserId,\r\n    amount: Money,\r\n    transactions: Transaction[]\r\n  ): Promise<{ valid: boolean; error?: string; remainingLimit?: Money }> {\r\n    // Get today's deposits\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    const todaysDeposits = transactions.filter(t => {\r\n      const tDate = new Date(t.createdAt);\r\n      return (\r\n        t.type === 'deposit' &&\r\n        t.to === userId &&\r\n        t.status === 'completed' &&\r\n        tDate >= today\r\n      );\r\n    });\r\n\r\n    const totalDepositedToday = todaysDeposits.reduce(\r\n      (sum, t) => sum + t.amount,\r\n      0\r\n    ) as Money;\r\n\r\n    const remainingLimit = (this.LIMITS.DAILY_DEPOSIT_LIMIT - totalDepositedToday) as Money;\r\n\r\n    if (amount > remainingLimit) {\r\n      return {\r\n        valid: false,\r\n        error: `Daily deposit limit exceeded. Remaining: ${Money.format(remainingLimit)}`,\r\n        remainingLimit,\r\n      };\r\n    }\r\n\r\n    return { valid: true, remainingLimit };\r\n  }\r\n\r\n  /**\r\n   * Check for suspicious activity\r\n   */\r\n  static detectSuspiciousActivity(\r\n    userId: UserId,\r\n    transactions: Transaction[]\r\n  ): {\r\n    suspicious: boolean;\r\n    reasons: string[];\r\n    riskScore: number;\r\n  } {\r\n    const reasons: string[] = [];\r\n    let riskScore = 0;\r\n\r\n    // Get user's recent transactions\r\n    const userTransactions = transactions.filter(\r\n      t => (t.from === userId || t.to === userId) && t.status === 'completed'\r\n    );\r\n\r\n    // Check for rapid transactions\r\n    const recentTransactions = userTransactions.filter(t => {\r\n      const age = Date.now() - new Date(t.createdAt).getTime();\r\n      return age < 3600000; // Last hour\r\n    });\r\n\r\n    if (recentTransactions.length > 10) {\r\n      reasons.push('High transaction frequency');\r\n      riskScore += 30;\r\n    }\r\n\r\n    // Check for large transactions\r\n    const largeTransactions = userTransactions.filter(\r\n      t => t.amount > Money.fromDollars(1000)\r\n    );\r\n\r\n    if (largeTransactions.length > 5) {\r\n      reasons.push('Multiple large transactions');\r\n      riskScore += 25;\r\n    }\r\n\r\n    // Check for failed transactions\r\n    const failedTransactions = transactions.filter(\r\n      t => (t.from === userId || t.to === userId) && t.status === 'failed'\r\n    );\r\n\r\n    const failureRate = failedTransactions.length / Math.max(userTransactions.length, 1);\r\n    if (failureRate > 0.3) {\r\n      reasons.push('High failure rate');\r\n      riskScore += 20;\r\n    }\r\n\r\n    // Check for round-trip transactions\r\n    const roundTrips = this.detectRoundTrips(userId, transactions);\r\n    if (roundTrips.length > 0) {\r\n      reasons.push('Potential money cycling detected');\r\n      riskScore += 40;\r\n    }\r\n\r\n    return {\r\n      suspicious: riskScore >= 50,\r\n      reasons,\r\n      riskScore,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Detect round-trip transactions (potential money laundering)\r\n   */\r\n  private static detectRoundTrips(\r\n    userId: UserId,\r\n    transactions: Transaction[]\r\n  ): Transaction[] {\r\n    const roundTrips: Transaction[] = [];\r\n    const outgoing = transactions.filter(t => t.from === userId && t.status === 'completed');\r\n    const incoming = transactions.filter(t => t.to === userId && t.status === 'completed');\r\n\r\n    for (const out of outgoing) {\r\n      const matchingReturn = incoming.find(inc => {\r\n        const timeDiff = Math.abs(\r\n          new Date(inc.createdAt).getTime() - new Date(out.createdAt).getTime()\r\n        );\r\n        return (\r\n          inc.from === out.to &&\r\n          Math.abs(inc.amount - out.amount) < Money.fromDollars(10) &&\r\n          timeDiff < 86400000 // 24 hours\r\n        );\r\n      });\r\n\r\n      if (matchingReturn) {\r\n        roundTrips.push(out, matchingReturn);\r\n      }\r\n    }\r\n\r\n    return roundTrips;\r\n  }\r\n\r\n  /**\r\n   * Validate bank account details\r\n   */\r\n  static validateBankAccount(accountDetails: any): {\r\n    valid: boolean;\r\n    errors: string[];\r\n  } {\r\n    const errors: string[] = [];\r\n\r\n    if (!accountDetails) {\r\n      errors.push('Bank account details required');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    // Handle both string and object types\r\n    if (typeof accountDetails === 'string') {\r\n      // If it's a string ID, minimal validation\r\n      if (!accountDetails.trim()) {\r\n        errors.push('Bank account ID cannot be empty');\r\n      }\r\n      return {\r\n        valid: errors.length === 0,\r\n        errors,\r\n      };\r\n    }\r\n\r\n    // Object validation\r\n    if (!accountDetails.accountNumber) {\r\n      errors.push('Account number required');\r\n    }\r\n\r\n    if (!accountDetails.routingNumber) {\r\n      errors.push('Routing number required');\r\n    }\r\n\r\n    if (!accountDetails.accountHolderName) {\r\n      errors.push('Account holder name required');\r\n    }\r\n\r\n    // Validate routing number format (US)\r\n    if (accountDetails.routingNumber && !/^\\d{9}$/.test(accountDetails.routingNumber)) {\r\n      errors.push('Invalid routing number format');\r\n    }\r\n\r\n    return {\r\n      valid: errors.length === 0,\r\n      errors,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate transaction fees\r\n   */\r\n  static calculateTransactionFees(\r\n    amount: Money,\r\n    type: Transaction['type'],\r\n    metadata?: TransactionMetadata\r\n  ): {\r\n    baseFee: Money;\r\n    additionalFees: Money;\r\n    totalFee: Money;\r\n    netAmount: Money;\r\n  } {\r\n    let baseFee = 0 as Money;\r\n    let additionalFees = 0 as Money;\r\n\r\n    switch (type) {\r\n      case 'purchase':\r\n      case 'sale':\r\n        baseFee = Math.floor(amount * this.FEES.PLATFORM_PERCENT) as Money;\r\n        break;\r\n\r\n      case 'subscription':\r\n        baseFee = Math.floor(amount * this.FEES.SUBSCRIPTION_PERCENT) as Money;\r\n        break;\r\n\r\n      case 'withdrawal':\r\n        baseFee = this.FEES.WITHDRAWAL_FLAT;\r\n        // Add rush fee if applicable\r\n        if (metadata?.paymentMethod === 'rush') {\r\n          additionalFees = Math.floor(amount * this.FEES.RUSH_WITHDRAWAL_PERCENT) as Money;\r\n        }\r\n        break;\r\n\r\n      case 'tip':\r\n        // No fees on tips\r\n        baseFee = 0 as Money;\r\n        break;\r\n    }\r\n\r\n    // Add international fee if applicable\r\n    if (metadata?.bankAccount) {\r\n      const bankAccount = typeof metadata.bankAccount === 'object' ? metadata.bankAccount : null;\r\n      if (bankAccount?.country && bankAccount.country !== 'US') {\r\n        additionalFees = (additionalFees + Math.floor(amount * this.FEES.INTERNATIONAL_PERCENT)) as Money;\r\n      }\r\n    }\r\n\r\n    const totalFee = (baseFee + additionalFees) as Money;\r\n    const netAmount = (amount - totalFee) as Money;\r\n\r\n    return {\r\n      baseFee,\r\n      additionalFees,\r\n      totalFee,\r\n      netAmount,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Format transaction for display\r\n   */\r\n  static formatTransactionForDisplay(transaction: Transaction): {\r\n    displayAmount: string;\r\n    displayType: string;\r\n    displayStatus: string;\r\n    displayDate: string;\r\n    displayDescription: string;\r\n    isCredit: boolean;\r\n    statusColor: string;\r\n  } {\r\n    const isCredit = transaction.type === 'deposit' || \r\n                    transaction.type === 'sale' || \r\n                    (transaction.type === 'tip' && transaction.to !== undefined) ||\r\n                    transaction.type === 'admin_credit' ||\r\n                    transaction.type === 'tier_credit' ||\r\n                    (transaction.type === 'refund' && transaction.to !== undefined);\r\n\r\n    const typeMap: Record<Transaction['type'], string> = {\r\n      deposit: 'Deposit',\r\n      withdrawal: 'Withdrawal',\r\n      purchase: 'Purchase',\r\n      sale: 'Sale',\r\n      tip: 'Tip',\r\n      subscription: 'Subscription',\r\n      admin_credit: 'Admin Credit',\r\n      admin_debit: 'Admin Debit',\r\n      refund: 'Refund',\r\n      fee: 'Platform Fee',\r\n      tier_credit: 'Tier Bonus',\r\n    };\r\n\r\n    const statusColorMap: Record<Transaction['status'], string> = {\r\n      pending: 'text-yellow-500',\r\n      completed: 'text-green-500',\r\n      failed: 'text-red-500',\r\n      cancelled: 'text-gray-500',\r\n    };\r\n\r\n    return {\r\n      displayAmount: `${isCredit ? '+' : '-'}${Money.format(transaction.amount)}`,\r\n      displayType: typeMap[transaction.type] || transaction.type,\r\n      displayStatus: transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1),\r\n      displayDate: new Date(transaction.createdAt).toLocaleString(),\r\n      displayDescription: transaction.description,\r\n      isCredit: isCredit,\r\n      statusColor: statusColorMap[transaction.status],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate refund eligibility\r\n   */\r\n  static validateRefundEligibility(\r\n    originalTransaction: Transaction,\r\n    refundAmount: Money\r\n  ): {\r\n    eligible: boolean;\r\n    reason?: string;\r\n    maxRefundable: Money;\r\n  } {\r\n    // Check if transaction can be refunded\r\n    if (originalTransaction.type !== 'purchase' && originalTransaction.type !== 'sale') {\r\n      return {\r\n        eligible: false,\r\n        reason: 'Only purchases can be refunded',\r\n        maxRefundable: 0 as Money,\r\n      };\r\n    }\r\n\r\n    if (originalTransaction.status !== 'completed') {\r\n      return {\r\n        eligible: false,\r\n        reason: 'Only completed transactions can be refunded',\r\n        maxRefundable: 0 as Money,\r\n      };\r\n    }\r\n\r\n    if (originalTransaction.reversedBy) {\r\n      return {\r\n        eligible: false,\r\n        reason: 'Transaction already refunded',\r\n        maxRefundable: 0 as Money,\r\n      };\r\n    }\r\n\r\n    // Check refund window (30 days)\r\n    const transactionAge = Date.now() - new Date(originalTransaction.createdAt).getTime();\r\n    const thirtyDays = 30 * 24 * 60 * 60 * 1000;\r\n    \r\n    if (transactionAge > thirtyDays) {\r\n      return {\r\n        eligible: false,\r\n        reason: 'Refund window expired (30 days)',\r\n        maxRefundable: 0 as Money,\r\n      };\r\n    }\r\n\r\n    // Check refund amount\r\n    if (refundAmount > originalTransaction.amount) {\r\n      return {\r\n        eligible: false,\r\n        reason: 'Refund amount exceeds original transaction',\r\n        maxRefundable: originalTransaction.amount,\r\n      };\r\n    }\r\n\r\n    return {\r\n      eligible: true,\r\n      maxRefundable: originalTransaction.amount,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Financial reconciliation utilities\r\n */\r\nexport class WalletReconciliation {\r\n  /**\r\n   * Reconcile wallet balances with transaction history\r\n   */\r\n  static async reconcileBalance(\r\n    userId: UserId,\r\n    role: 'buyer' | 'seller' | 'admin',\r\n    transactions: Transaction[],\r\n    currentBalance: Money\r\n  ): Promise<{\r\n    calculatedBalance: Money;\r\n    discrepancy: Money;\r\n    isReconciled: boolean;\r\n    details: {\r\n      credits: Money;\r\n      debits: Money;\r\n      pendingCredits: Money;\r\n      pendingDebits: Money;\r\n    };\r\n  }> {\r\n    let credits = 0;\r\n    let debits = 0;\r\n    let pendingCredits = 0;\r\n    let pendingDebits = 0;\r\n\r\n    for (const transaction of transactions) {\r\n      // Credits\r\n      if (transaction.to === userId && transaction.toRole === role) {\r\n        if (transaction.status === 'completed') {\r\n          credits += transaction.amount;\r\n        } else if (transaction.status === 'pending') {\r\n          pendingCredits += transaction.amount;\r\n        }\r\n      }\r\n\r\n      // Debits\r\n      if (transaction.from === userId && transaction.fromRole === role) {\r\n        if (transaction.status === 'completed') {\r\n          debits += transaction.amount;\r\n        } else if (transaction.status === 'pending') {\r\n          pendingDebits += transaction.amount;\r\n        }\r\n      }\r\n    }\r\n\r\n    const calculatedBalance = (credits - debits) as Money;\r\n    const discrepancy = (currentBalance - calculatedBalance) as Money;\r\n\r\n    return {\r\n      calculatedBalance,\r\n      discrepancy,\r\n      isReconciled: discrepancy === 0,\r\n      details: {\r\n        credits: credits as Money,\r\n        debits: debits as Money,\r\n        pendingCredits: pendingCredits as Money,\r\n        pendingDebits: pendingDebits as Money,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate financial report\r\n   */\r\n  static generateFinancialReport(\r\n    transactions: Transaction[],\r\n    startDate: Date,\r\n    endDate: Date\r\n  ): {\r\n    totalRevenue: Money;\r\n    totalFees: Money;\r\n    totalWithdrawals: Money;\r\n    totalDeposits: Money;\r\n    netIncome: Money;\r\n    transactionCount: number;\r\n    averageTransactionSize: Money;\r\n    breakdown: Record<Transaction['type'], { count: number; total: Money }>;\r\n  } {\r\n    const filtered = transactions.filter(t => {\r\n      const date = new Date(t.createdAt);\r\n      return date >= startDate && date <= endDate && t.status === 'completed';\r\n    });\r\n\r\n    const breakdown: Record<string, { count: number; total: Money }> = {};\r\n    let totalRevenue = 0;\r\n    let totalFees = 0;\r\n    let totalWithdrawals = 0;\r\n    let totalDeposits = 0;\r\n\r\n    for (const transaction of filtered) {\r\n      // Update breakdown\r\n      if (!breakdown[transaction.type]) {\r\n        breakdown[transaction.type] = { count: 0, total: 0 as Money };\r\n      }\r\n      breakdown[transaction.type].count++;\r\n      breakdown[transaction.type].total = (breakdown[transaction.type].total + transaction.amount) as Money;\r\n\r\n      // Calculate totals\r\n      switch (transaction.type) {\r\n        case 'deposit':\r\n          totalDeposits += transaction.amount;\r\n          break;\r\n        case 'withdrawal':\r\n          totalWithdrawals += transaction.amount;\r\n          break;\r\n        case 'fee':\r\n          totalFees += transaction.amount;\r\n          totalRevenue += transaction.amount;\r\n          break;\r\n        case 'purchase':\r\n        case 'sale':\r\n          if (transaction.metadata?.platformFee) {\r\n            totalFees += transaction.metadata.platformFee;\r\n            totalRevenue += transaction.metadata.platformFee;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    const netIncome = (totalRevenue - totalWithdrawals) as Money;\r\n    const averageTransactionSize = filtered.length > 0\r\n      ? Math.floor(filtered.reduce((sum, t) => sum + t.amount, 0) / filtered.length) as Money\r\n      : 0 as Money;\r\n\r\n    return {\r\n      totalRevenue: totalRevenue as Money,\r\n      totalFees: totalFees as Money,\r\n      totalWithdrawals: totalWithdrawals as Money,\r\n      totalDeposits: totalDeposits as Money,\r\n      netIncome,\r\n      transactionCount: filtered.length,\r\n      averageTransactionSize,\r\n      breakdown,\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4848, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/wallet.service.ts"],"sourcesContent":["// src/services/wallet.service.ts\r\n\r\nimport { apiCall, buildApiUrl, ApiResponse } from './api.config';\r\nimport { Money, UserId } from '@/types/common';\r\nimport { WalletValidation } from './wallet.validation';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { sanitizeUsername, sanitizeCurrency } from '@/utils/security/sanitization';\r\n\r\n// Export types from validation file\r\nexport type { Transaction, TransactionMetadata } from './wallet.validation';\r\n\r\n// ==================== TYPES ====================\r\n\r\nexport interface WalletBalance {\r\n  username: string;\r\n  balance: number;\r\n  role: 'buyer' | 'seller' | 'admin';\r\n}\r\n\r\n// Simple transaction type for API communication (different from validation Transaction type)\r\nexport interface ApiTransaction {\r\n  id: string;\r\n  type: 'deposit' | 'withdrawal' | 'purchase' | 'sale' | 'tip' | 'subscription' | \r\n        'admin_credit' | 'admin_debit' | 'refund' | 'fee' | 'tier_credit' | 'platform_fee';\r\n  amount: number;\r\n  from?: string;\r\n  to?: string;\r\n  fromRole?: 'buyer' | 'seller' | 'admin';\r\n  toRole?: 'buyer' | 'seller' | 'admin';\r\n  description: string;\r\n  status: 'pending' | 'completed' | 'failed' | 'cancelled';\r\n  createdAt: string;\r\n  completedAt?: string;\r\n  metadata?: any;\r\n}\r\n\r\nexport interface DepositRequest {\r\n  amount: number;\r\n  method: 'credit_card' | 'bank_transfer' | 'crypto' | 'admin_credit';\r\n  notes?: string;\r\n}\r\n\r\nexport interface WithdrawalRequest {\r\n  amount: number;\r\n  accountDetails?: {\r\n    accountNumber?: string;\r\n    routingNumber?: string;\r\n    accountType?: string;\r\n  };\r\n}\r\n\r\nexport interface AdminActionRequest {\r\n  action: 'credit' | 'debit';\r\n  username: string;\r\n  amount: number;\r\n  reason: string;\r\n}\r\n\r\n// ==================== WALLET SERVICE ====================\r\n\r\nexport class WalletService {\r\n  private static instance: WalletService;\r\n\r\n  static getInstance(): WalletService {\r\n    if (!WalletService.instance) {\r\n      WalletService.instance = new WalletService();\r\n    }\r\n    return WalletService.instance;\r\n  }\r\n\r\n  /**\r\n   * Get wallet balance\r\n   */\r\n  async getBalance(username: string): Promise<ApiResponse<WalletBalance>> {\r\n    try {\r\n      // For admin users, always get platform wallet\r\n      if (this.isAdminUser(username)) {\r\n        return await apiCall<WalletBalance>('/wallet/admin-platform-balance');\r\n      }\r\n\r\n      const url = buildApiUrl('/wallet/balance/:username', { username });\r\n      return await apiCall<WalletBalance>(url);\r\n    } catch (error) {\r\n      console.error('[WalletService] Get balance error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get balance' }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a deposit\r\n   */\r\n  async deposit(request: DepositRequest): Promise<ApiResponse<ApiTransaction>> {\r\n    try {\r\n      // Validate amount using Money type for precision\r\n      const moneyAmount = Money.fromDollars(request.amount);\r\n      const validation = WalletValidation.validateAmount(\r\n        moneyAmount,\r\n        WalletValidation.LIMITS.MIN_DEPOSIT,\r\n        WalletValidation.LIMITS.MAX_DEPOSIT\r\n      );\r\n\r\n      if (!validation.valid) {\r\n        return {\r\n          success: false,\r\n          error: { message: validation.error || 'Invalid amount' }\r\n        };\r\n      }\r\n\r\n      return await apiCall<ApiTransaction>('/wallet/deposit', {\r\n        method: 'POST',\r\n        body: JSON.stringify(request)\r\n      });\r\n    } catch (error) {\r\n      console.error('[WalletService] Deposit error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to process deposit' }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a withdrawal\r\n   */\r\n  async withdraw(request: WithdrawalRequest): Promise<ApiResponse<ApiTransaction>> {\r\n    try {\r\n      // Validate amount using Money type\r\n      const moneyAmount = Money.fromDollars(request.amount);\r\n      const validation = WalletValidation.validateAmount(\r\n        moneyAmount,\r\n        WalletValidation.LIMITS.MIN_WITHDRAWAL,\r\n        WalletValidation.LIMITS.MAX_WITHDRAWAL\r\n      );\r\n\r\n      if (!validation.valid) {\r\n        return {\r\n          success: false,\r\n          error: { message: validation.error || 'Invalid amount' }\r\n        };\r\n      }\r\n\r\n      // Validate bank account if provided\r\n      if (request.accountDetails) {\r\n        const accountValidation = WalletValidation.validateBankAccount(request.accountDetails);\r\n        if (!accountValidation.valid) {\r\n          return {\r\n            success: false,\r\n            error: { message: accountValidation.errors.join(', ') }\r\n          };\r\n        }\r\n      }\r\n\r\n      return await apiCall<ApiTransaction>('/wallet/withdraw', {\r\n        method: 'POST',\r\n        body: JSON.stringify(request)\r\n      });\r\n    } catch (error) {\r\n      console.error('[WalletService] Withdrawal error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to process withdrawal' }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process admin action (credit/debit)\r\n   */\r\n  async processAdminAction(request: AdminActionRequest): Promise<ApiResponse<ApiTransaction>> {\r\n    try {\r\n      // Validate inputs\r\n      const sanitizedUsername = sanitizeUsername(request.username);\r\n      if (!sanitizedUsername) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid username' }\r\n        };\r\n      }\r\n\r\n      const sanitizedAmount = sanitizeCurrency(request.amount);\r\n      if (sanitizedAmount <= 0) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid amount' }\r\n        };\r\n      }\r\n\r\n      return await apiCall<ApiTransaction>('/wallet/admin-actions', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          ...request,\r\n          username: sanitizedUsername,\r\n          amount: sanitizedAmount\r\n        })\r\n      });\r\n    } catch (error) {\r\n      console.error('[WalletService] Admin action error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to process admin action' }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get transaction history\r\n   */\r\n  async getTransactions(\r\n    username: string,\r\n    filters?: {\r\n      type?: string;\r\n      status?: string;\r\n      startDate?: string;\r\n      endDate?: string;\r\n      page?: number;\r\n      limit?: number;\r\n    }\r\n  ): Promise<ApiResponse<ApiTransaction[]>> {\r\n    try {\r\n      // For admin users, use platform\r\n      const queryUsername = this.isAdminUser(username) ? 'platform' : username;\r\n      \r\n      const url = buildApiUrl('/wallet/transactions/:username', { username: queryUsername });\r\n      \r\n      // Build query string\r\n      const params = new URLSearchParams();\r\n      if (filters) {\r\n        Object.entries(filters).forEach(([key, value]) => {\r\n          if (value !== undefined) {\r\n            params.append(key, String(value));\r\n          }\r\n        });\r\n      }\r\n\r\n      const finalUrl = params.toString() ? `${url}?${params}` : url;\r\n      \r\n      return await apiCall<ApiTransaction[]>(finalUrl);\r\n    } catch (error) {\r\n      console.error('[WalletService] Get transactions error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get transactions' }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get admin analytics\r\n   */\r\n  async getAdminAnalytics(timeFilter: string = 'all'): Promise<ApiResponse<any>> {\r\n    try {\r\n      return await apiCall<any>(`/wallet/admin/analytics?timeFilter=${timeFilter}`);\r\n    } catch (error) {\r\n      console.error('[WalletService] Get analytics error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get analytics' }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get platform transactions (admin only)\r\n   */\r\n  async getPlatformTransactions(limit: number = 100, page: number = 1): Promise<ApiResponse<ApiTransaction[]>> {\r\n    try {\r\n      return await apiCall<ApiTransaction[]>(`/wallet/platform-transactions?limit=${limit}&page=${page}`);\r\n    } catch (error) {\r\n      console.error('[WalletService] Get platform transactions error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get platform transactions' }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process admin withdrawal from platform wallet\r\n   */\r\n  async processAdminWithdrawal(amount: number, notes?: string): Promise<ApiResponse<any>> {\r\n    try {\r\n      // Validate amount\r\n      const moneyAmount = Money.fromDollars(amount);\r\n      const validation = WalletValidation.validateAmount(\r\n        moneyAmount,\r\n        WalletValidation.LIMITS.MIN_WITHDRAWAL,\r\n        WalletValidation.LIMITS.MAX_WITHDRAWAL\r\n      );\r\n\r\n      if (!validation.valid) {\r\n        return {\r\n          success: false,\r\n          error: { message: validation.error || 'Invalid amount' }\r\n        };\r\n      }\r\n\r\n      return await apiCall<any>('/wallet/admin-withdraw', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          amount,\r\n          accountDetails: {\r\n            accountNumber: '****9999',\r\n            accountType: 'business'\r\n          },\r\n          notes\r\n        })\r\n      });\r\n    } catch (error) {\r\n      console.error('[WalletService] Admin withdrawal error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to process admin withdrawal' }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check for suspicious activity\r\n   */\r\n  async checkSuspiciousActivity(username: string): Promise<{\r\n    suspicious: boolean;\r\n    reasons: string[];\r\n    riskScore: number;\r\n  }> {\r\n    try {\r\n      const response = await this.getTransactions(username);\r\n      \r\n      if (!response.success || !response.data) {\r\n        return { suspicious: false, reasons: [], riskScore: 0 };\r\n      }\r\n\r\n      // Convert API transactions to validation Transaction type\r\n      const transactions = response.data.map(t => ({\r\n        ...t,\r\n        amount: Money.fromDollars(t.amount) as Money,\r\n        from: t.from ? UserId(t.from) : undefined,\r\n        to: t.to ? UserId(t.to) : undefined,\r\n      }));\r\n\r\n      return WalletValidation.detectSuspiciousActivity(\r\n        UserId(username),\r\n        transactions as any\r\n      );\r\n    } catch (error) {\r\n      console.error('[WalletService] Check suspicious activity error:', error);\r\n      return { suspicious: false, reasons: [], riskScore: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format transaction for display\r\n   */\r\n  formatTransaction(transaction: ApiTransaction): {\r\n    displayAmount: string;\r\n    displayType: string;\r\n    displayStatus: string;\r\n    displayDate: string;\r\n    isCredit: boolean;\r\n    statusColor: string;\r\n  } {\r\n    // Convert to Money type for formatting\r\n    const moneyAmount = Money.fromDollars(transaction.amount);\r\n    const formatted = WalletValidation.formatTransactionForDisplay({\r\n      ...transaction,\r\n      amount: moneyAmount,\r\n      from: transaction.from ? UserId(transaction.from) : undefined,\r\n      to: transaction.to ? UserId(transaction.to) : undefined,\r\n    } as any);\r\n\r\n    return {\r\n      displayAmount: formatted.displayAmount,\r\n      displayType: formatted.displayType,\r\n      displayStatus: formatted.displayStatus,\r\n      displayDate: formatted.displayDate,\r\n      isCredit: formatted.isCredit,\r\n      statusColor: formatted.statusColor\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate fees for a transaction\r\n   */\r\n  calculateFees(amount: number, type: ApiTransaction['type']): {\r\n    platformFee: number;\r\n    netAmount: number;\r\n  } {\r\n    const moneyAmount = Money.fromDollars(amount);\r\n    const fees = WalletValidation.calculateTransactionFees(\r\n      moneyAmount,\r\n      type as any\r\n    );\r\n\r\n    return {\r\n      platformFee: Money.toDollars(fees.totalFee),\r\n      netAmount: Money.toDollars(fees.netAmount)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper to check if user is admin\r\n   */\r\n  private isAdminUser(username: string): boolean {\r\n    return username === 'oakley' || \r\n           username === 'gerome' || \r\n           username === 'platform' ||\r\n           username === 'admin';\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const walletService = WalletService.getInstance();\r\n\r\n// Also export as default for backward compatibility\r\nexport default walletService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5171, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/listings.service.ts"],"sourcesContent":["// src/services/listings.service.ts\r\n\r\nimport { Listing, AuctionSettings, Bid } from '@/context/ListingContext';\r\nimport { storageService } from './storage.service';\r\nimport { FEATURES, API_ENDPOINTS, buildApiUrl, apiCall, ApiResponse } from './api.config';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport type { ListingDraft } from '@/types/myListings';\r\nimport { securityService } from './security.service';\r\nimport { listingSchemas, authSchemas } from '@/utils/validation/schemas';\r\nimport { sanitize } from './security.service';\r\nimport { getRateLimiter, RATE_LIMITS } from '@/utils/security/rate-limiter';\r\nimport { z } from 'zod';\r\n\r\n// Reference for mount checking\r\nlet mountedRef = { current: true };\r\nif (typeof window !== 'undefined') {\r\n  window.addEventListener('beforeunload', () => {\r\n    mountedRef.current = false;\r\n  });\r\n}\r\n\r\nexport interface CreateListingRequest {\r\n  title: string;\r\n  description: string;\r\n  price: number;\r\n  imageUrls: string[];\r\n  seller: string;\r\n  isVerified?: boolean;\r\n  isPremium?: boolean;\r\n  tags?: string[];\r\n  hoursWorn?: number;\r\n  auction?: {\r\n    startingPrice: number;\r\n    reservePrice?: number;\r\n    endTime: string;\r\n  };\r\n}\r\n\r\nexport interface UpdateListingRequest {\r\n  title?: string;\r\n  description?: string;\r\n  price?: number;\r\n  imageUrls?: string[];\r\n  isPremium?: boolean;\r\n  tags?: string[];\r\n  hoursWorn?: number;\r\n}\r\n\r\nexport interface ListingSearchParams {\r\n  query?: string;\r\n  seller?: string;\r\n  minPrice?: number;\r\n  maxPrice?: number;\r\n  tags?: string[];\r\n  isPremium?: boolean;\r\n  isAuction?: boolean;\r\n  isActive?: boolean;\r\n  sortBy?: 'date' | 'price' | 'views' | 'endingSoon';\r\n  sortOrder?: 'asc' | 'desc';\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\nexport interface ListingViewUpdate {\r\n  listingId: string;\r\n  viewerId?: string;\r\n}\r\n\r\nexport interface BulkUpdateRequest {\r\n  listingIds: string[];\r\n  updates: UpdateListingRequest;\r\n}\r\n\r\nexport interface PopularTag {\r\n  tag: string;\r\n  count: number;\r\n}\r\n\r\n// Backend listing format with isLocked field\r\ninterface BackendListing {\r\n  _id?: string;\r\n  id?: string;\r\n  title: string;\r\n  description: string;\r\n  price?: number;\r\n  markedUpPrice?: number;\r\n  imageUrls: string[];\r\n  seller: string;\r\n  isVerified?: boolean;\r\n  isPremium?: boolean;\r\n  tags?: string[];\r\n  hoursWorn?: number;\r\n  status?: 'active' | 'sold' | 'expired' | 'cancelled';\r\n  views?: number;\r\n  createdAt: string;\r\n  soldAt?: string;\r\n  isLocked?: boolean; // Server indicates premium content is locked\r\n  auction?: {\r\n    isAuction: boolean;\r\n    startingPrice: number;\r\n    reservePrice?: number;\r\n    currentBid: number;\r\n    bidIncrement?: number;\r\n    highestBidder?: string;\r\n    endTime: string;\r\n    status: 'active' | 'ended' | 'cancelled' | 'reserve_not_met';\r\n    bidCount: number;\r\n    bids: Array<{\r\n      bidder: string;\r\n      amount: number;\r\n      date: string;\r\n    }>;\r\n  };\r\n}\r\n\r\n// Cache configuration\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\nconst VIEW_CACHE_DURATION = 30 * 1000; // 30 seconds\r\n\r\n// Create a custom schema for listing creation that handles number conversion properly\r\nconst createListingValidationSchema = z.object({\r\n  title: listingSchemas.title,\r\n  description: listingSchemas.description,\r\n  price: z.number().positive().min(0.01).max(10000), // Direct number validation\r\n  tags: listingSchemas.tags.optional(),\r\n  seller: authSchemas.username,\r\n  hoursWorn: z.number().min(0).max(720).optional(), // Direct number validation\r\n});\r\n\r\ntype CreateListingValidationData = z.infer<typeof createListingValidationSchema>;\r\n\r\n/**\r\n * Convert backend listing format to frontend format with isLocked support\r\n */\r\nfunction convertBackendToFrontend(backendListing: BackendListing): Listing & { isLocked?: boolean } {\r\n  // Handle both _id and id fields\r\n  const listingId = backendListing._id || backendListing.id || uuidv4();\r\n  \r\n  const frontendListing: Listing & { isLocked?: boolean } = {\r\n    id: listingId,\r\n    title: backendListing.title,\r\n    description: backendListing.description,\r\n    price: backendListing.price || 0,\r\n    markedUpPrice: backendListing.markedUpPrice || Math.round((backendListing.price || 0) * 1.1 * 100) / 100,\r\n    imageUrls: backendListing.imageUrls || [],\r\n    date: backendListing.createdAt,\r\n    seller: backendListing.seller,\r\n    isVerified: backendListing.isVerified || false,\r\n    isPremium: backendListing.isPremium || false,\r\n    isLocked: backendListing.isLocked || false, // Pass through isLocked flag from backend\r\n    tags: backendListing.tags || [],\r\n    hoursWorn: backendListing.hoursWorn,\r\n    views: backendListing.views || 0,\r\n  };\r\n\r\n  // Convert auction data if present with reserve price support\r\n  if (backendListing.auction?.isAuction) {\r\n    frontendListing.auction = {\r\n      isAuction: true,\r\n      startingPrice: Math.floor(backendListing.auction.startingPrice || 0),\r\n      reservePrice: backendListing.auction.reservePrice ? \r\n        Math.floor(backendListing.auction.reservePrice) : undefined,\r\n      endTime: backendListing.auction.endTime,\r\n      bids: backendListing.auction.bids.map(bid => ({\r\n        id: uuidv4(), // Generate ID for frontend\r\n        bidder: bid.bidder,\r\n        amount: Math.floor(bid.amount || 0), // Ensure integer\r\n        date: bid.date,\r\n      })),\r\n      // Always floor the currentBid to remove any decimals\r\n      highestBid: backendListing.auction.currentBid > 0 ? \r\n        Math.floor(backendListing.auction.currentBid) : undefined,\r\n      highestBidder: backendListing.auction.highestBidder,\r\n      status: backendListing.auction.status === 'active' ? 'active' : \r\n              backendListing.auction.status === 'ended' ? 'ended' : \r\n              backendListing.auction.status === 'reserve_not_met' ? 'reserve_not_met' as any : 'cancelled',\r\n      minimumIncrement: Math.floor(backendListing.auction.bidIncrement || 1),\r\n    };\r\n  }\r\n\r\n  return frontendListing;\r\n}\r\n\r\n/**\r\n * Convert frontend listing format to backend format for creation\r\n */\r\nfunction convertFrontendToBackend(frontendListing: CreateListingRequest): any {\r\n  const backendListing: any = {\r\n    title: frontendListing.title,\r\n    description: frontendListing.description,\r\n    imageUrls: frontendListing.imageUrls,\r\n    seller: frontendListing.seller,\r\n    isVerified: frontendListing.isVerified,\r\n    isPremium: frontendListing.isPremium,\r\n    tags: frontendListing.tags,\r\n    hoursWorn: frontendListing.hoursWorn,\r\n  };\r\n\r\n  // Handle auction vs regular listing with reserve price\r\n  if (frontendListing.auction) {\r\n    backendListing.isAuction = true;\r\n    backendListing.startingPrice = frontendListing.auction.startingPrice;\r\n    backendListing.reservePrice = frontendListing.auction.reservePrice;\r\n    backendListing.endTime = frontendListing.auction.endTime;\r\n  } else {\r\n    backendListing.price = frontendListing.price;\r\n  }\r\n\r\n  return backendListing;\r\n}\r\n\r\n/**\r\n * Listings Service\r\n * Handles all listing-related operations with caching and error handling\r\n */\r\nexport class ListingsService {\r\n  private listingsCache: {\r\n    data: Listing[] | null;\r\n    timestamp: number;\r\n  } = { data: null, timestamp: 0 };\r\n\r\n  private viewsCache: Map<string, { count: number; timestamp: number }> = new Map();\r\n  private popularTagsCache: { data: PopularTag[] | null; timestamp: number } = {\r\n    data: null,\r\n    timestamp: 0,\r\n  };\r\n\r\n  /**\r\n   * Get all listings with optional filtering\r\n   */\r\n  async getListings(params?: ListingSearchParams): Promise<ApiResponse<Listing[]>> {\r\n    try {\r\n      console.log('[ListingsService] Getting listings with params:', params);\r\n\r\n      // Sanitize search params if provided\r\n      if (params) {\r\n        if (params.query) {\r\n          params.query = sanitize.searchQuery(params.query);\r\n        }\r\n        if (params.seller) {\r\n          params.seller = sanitize.username(params.seller);\r\n        }\r\n        if (params.tags) {\r\n          params.tags = params.tags.map(tag => sanitize.strict(tag));\r\n        }\r\n        if (params.minPrice !== undefined) {\r\n          params.minPrice = sanitize.number(params.minPrice, 0, 10000);\r\n        }\r\n        if (params.maxPrice !== undefined) {\r\n          params.maxPrice = sanitize.number(params.maxPrice, 0, 10000);\r\n        }\r\n      }\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        console.log('[ListingsService] Using backend API for listings');\r\n        \r\n        const queryParams = new URLSearchParams();\r\n        if (params) {\r\n          // Map frontend params to backend params\r\n          if (params.query) queryParams.append('search', params.query);\r\n          if (params.seller) queryParams.append('seller', params.seller);\r\n          if (params.minPrice !== undefined) queryParams.append('minPrice', params.minPrice.toString());\r\n          if (params.maxPrice !== undefined) queryParams.append('maxPrice', params.maxPrice.toString());\r\n          if (params.tags) queryParams.append('tags', params.tags.join(','));\r\n          if (params.isPremium !== undefined) queryParams.append('isPremium', params.isPremium.toString());\r\n          if (params.isAuction !== undefined) queryParams.append('isAuction', params.isAuction.toString());\r\n          if (params.sortBy) {\r\n            const sortMap: Record<string, string> = {\r\n              'date': 'date',\r\n              'price': 'price',\r\n              'views': 'views',\r\n              'endingSoon': 'date' // Backend doesn't have endingSoon, use date\r\n            };\r\n            queryParams.append('sort', sortMap[params.sortBy] || 'date');\r\n          }\r\n          if (params.sortOrder) queryParams.append('order', params.sortOrder);\r\n          if (params.page !== undefined) queryParams.append('page', (params.page + 1).toString()); // Frontend is 0-based\r\n          if (params.limit !== undefined) queryParams.append('limit', params.limit.toString());\r\n        }\r\n        \r\n        const response = await apiCall<any>(`/listings?${queryParams.toString()}`);\r\n\r\n        if (response.success) {\r\n          // Handle both direct array response and nested data structure\r\n          const listings = response.data?.data || response.data || [];\r\n          const convertedListings = listings.map(convertBackendToFrontend);\r\n          \r\n          console.log('[ListingsService] Converted backend listings:', convertedListings.length);\r\n          \r\n          // Update cache only if no filters\r\n          if (!params) {\r\n            this.listingsCache = { data: convertedListings, timestamp: Date.now() };\r\n          }\r\n          \r\n          return {\r\n            success: true,\r\n            data: convertedListings,\r\n            meta: response.data?.meta || response.meta\r\n          };\r\n        } else {\r\n          throw new Error(response.error?.message || 'Failed to fetch listings from backend');\r\n        }\r\n      }\r\n\r\n      // Fallback to localStorage implementation\r\n      console.log('[ListingsService] Using localStorage fallback');\r\n      \r\n      // Check cache first - but ONLY if no params are provided\r\n      const now = Date.now();\r\n      if (\r\n        !params &&\r\n        this.listingsCache.data &&\r\n        now - this.listingsCache.timestamp < CACHE_DURATION\r\n      ) {\r\n        console.log('[ListingsService] Returning cached listings:', this.listingsCache.data.length);\r\n        return {\r\n          success: true,\r\n          data: this.listingsCache.data,\r\n        };\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const listings = await storageService.getItem<Listing[]>('listings', []);\r\n      console.log('[ListingsService] Found listings in storage:', listings.length);\r\n      \r\n      if (listings.length === 0) {\r\n        console.warn('[ListingsService] No listings found in storage! Check if listings are being created properly.');\r\n      }\r\n\r\n      // Update cache only if no filters\r\n      if (!params) {\r\n        this.listingsCache = { data: listings, timestamp: now };\r\n      }\r\n\r\n      let filteredListings = [...listings];\r\n\r\n      // Apply filters (same as before)\r\n      if (params) {\r\n        const beforeFilterCount = filteredListings.length;\r\n        \r\n        // Active filter (not ended auctions)\r\n        if (params.isActive !== undefined && params.isActive === true) {\r\n          filteredListings = filteredListings.filter(listing => {\r\n            // For non-auction listings, always consider them active\r\n            if (!listing.auction) return true;\r\n            \r\n            // For auction listings, check end time\r\n            const now = new Date();\r\n            const endTime = new Date(listing.auction.endTime);\r\n            const isActive = endTime > now;\r\n            \r\n            return isActive;\r\n          });\r\n          console.log(`[ListingsService] Active filter: ${beforeFilterCount} -> ${filteredListings.length}`);\r\n        }\r\n\r\n        if (params.query) {\r\n          const beforeQueryCount = filteredListings.length;\r\n          const query = params.query.toLowerCase();\r\n          filteredListings = filteredListings.filter(\r\n            listing =>\r\n              listing.title.toLowerCase().includes(query) ||\r\n              listing.description.toLowerCase().includes(query) ||\r\n              listing.tags?.some(tag => tag.toLowerCase().includes(query)) ||\r\n              listing.seller.toLowerCase().includes(query)\r\n          );\r\n          console.log(`[ListingsService] Query filter \"${params.query}\": ${beforeQueryCount} -> ${filteredListings.length}`);\r\n        }\r\n\r\n        if (params.seller) {\r\n          const beforeSellerCount = filteredListings.length;\r\n          filteredListings = filteredListings.filter(\r\n            listing => listing.seller === params.seller\r\n          );\r\n          console.log(`[ListingsService] Seller filter \"${params.seller}\": ${beforeSellerCount} -> ${filteredListings.length}`);\r\n        }\r\n\r\n        if (params.minPrice !== undefined) {\r\n          const beforeMinPriceCount = filteredListings.length;\r\n          filteredListings = filteredListings.filter(listing => {\r\n            const price = listing.auction?.highestBid || listing.price;\r\n            return price >= params.minPrice!;\r\n          });\r\n          console.log(`[ListingsService] Min price filter ${params.minPrice}: ${beforeMinPriceCount} -> ${filteredListings.length}`);\r\n        }\r\n\r\n        if (params.maxPrice !== undefined) {\r\n          const beforeMaxPriceCount = filteredListings.length;\r\n          filteredListings = filteredListings.filter(listing => {\r\n            const price = listing.auction?.highestBid || listing.price;\r\n            return price <= params.maxPrice!;\r\n          });\r\n          console.log(`[ListingsService] Max price filter ${params.maxPrice}: ${beforeMaxPriceCount} -> ${filteredListings.length}`);\r\n        }\r\n\r\n        if (params.tags && params.tags.length > 0) {\r\n          const beforeTagsCount = filteredListings.length;\r\n          filteredListings = filteredListings.filter(listing =>\r\n            listing.tags?.some(tag => params.tags!.includes(tag))\r\n          );\r\n          console.log(`[ListingsService] Tags filter: ${beforeTagsCount} -> ${filteredListings.length}`);\r\n        }\r\n\r\n        if (params.isPremium !== undefined) {\r\n          const beforePremiumCount = filteredListings.length;\r\n          filteredListings = filteredListings.filter(\r\n            listing => listing.isPremium === params.isPremium\r\n          );\r\n          console.log(`[ListingsService] Premium filter ${params.isPremium}: ${beforePremiumCount} -> ${filteredListings.length}`);\r\n        }\r\n\r\n        if (params.isAuction !== undefined) {\r\n          const beforeAuctionCount = filteredListings.length;\r\n          filteredListings = filteredListings.filter(\r\n            listing => (params.isAuction ? !!listing.auction : !listing.auction)\r\n          );\r\n          console.log(`[ListingsService] Auction filter ${params.isAuction}: ${beforeAuctionCount} -> ${filteredListings.length}`);\r\n        }\r\n\r\n        // Sorting\r\n        if (params.sortBy) {\r\n          console.log(`[ListingsService] Sorting by ${params.sortBy} ${params.sortOrder || 'asc'}`);\r\n          filteredListings.sort((a, b) => {\r\n            let compareValue = 0;\r\n            \r\n            switch (params.sortBy) {\r\n              case 'date':\r\n                compareValue = new Date(b.date).getTime() - new Date(a.date).getTime();\r\n                break;\r\n              case 'price':\r\n                const aPrice = a.auction?.highestBid || a.price;\r\n                const bPrice = b.auction?.highestBid || b.price;\r\n                compareValue = aPrice - bPrice;\r\n                break;\r\n              case 'views':\r\n                // Would need to load views data for each listing\r\n                compareValue = 0;\r\n                break;\r\n              case 'endingSoon':\r\n                // Sort auctions by end time, non-auctions last\r\n                if (a.auction && b.auction) {\r\n                  compareValue = new Date(a.auction.endTime).getTime() - new Date(b.auction.endTime).getTime();\r\n                } else if (a.auction) {\r\n                  compareValue = -1;\r\n                } else if (b.auction) {\r\n                  compareValue = 1;\r\n                }\r\n                break;\r\n            }\r\n\r\n            return params.sortOrder === 'desc' ? -compareValue : compareValue;\r\n          });\r\n        }\r\n\r\n        // Pagination - only if explicitly requested\r\n        if (params.page !== undefined && params.limit) {\r\n          const start = params.page * params.limit;\r\n          const end = start + params.limit;\r\n          \r\n          console.log(`[ListingsService] Paginating: page ${params.page}, limit ${params.limit}, showing ${start}-${end} of ${filteredListings.length}`);\r\n          \r\n          return {\r\n            success: true,\r\n            data: filteredListings.slice(start, end),\r\n            meta: {\r\n              page: params.page,\r\n              totalPages: Math.ceil(filteredListings.length / params.limit),\r\n              totalItems: filteredListings.length,\r\n            },\r\n          };\r\n        }\r\n      }\r\n\r\n      console.log('[ListingsService] Returning listings:', filteredListings.length);\r\n      \r\n      return {\r\n        success: true,\r\n        data: filteredListings,\r\n        meta: {\r\n          totalItems: filteredListings.length\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('[ListingsService] Get listings error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get listings' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get single listing by ID with premium access checking\r\n   */\r\n  async getListing(id: string): Promise<ApiResponse<Listing | null>> {\r\n    try {\r\n      // Sanitize ID\r\n      const sanitizedId = sanitize.strict(id);\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        console.log('[ListingsService] Fetching listing from backend:', sanitizedId);\r\n        \r\n        const response = await apiCall<any>(`/listings/${sanitizedId}`);\r\n        \r\n        if (!mountedRef.current) return {\r\n          success: false,\r\n          error: { message: 'Component unmounted' }\r\n        };\r\n\r\n        if (response.success && response.data) {\r\n          // Handle both direct data and nested data structure\r\n          const listingData = response.data.data || response.data;\r\n          const convertedListing = convertBackendToFrontend(listingData);\r\n          \r\n          // Check for premiumAccess in the response data\r\n          const responseAsAny = response as any;\r\n          const premiumAccess = response.data?.premiumAccess ?? responseAsAny.premiumAccess;\r\n          \r\n          if (premiumAccess !== undefined) {\r\n            console.log('[ListingsService] Premium access for listing:', premiumAccess);\r\n          }\r\n          \r\n          return {\r\n            success: true,\r\n            data: convertedListing,\r\n            meta: {\r\n              premiumAccess\r\n            }\r\n          };\r\n        } else {\r\n          return {\r\n            success: true,\r\n            data: null,\r\n          };\r\n        }\r\n      }\r\n\r\n      // Try cache first\r\n      if (this.listingsCache.data) {\r\n        const cachedListing = this.listingsCache.data.find(l => l.id === sanitizedId);\r\n        if (cachedListing) {\r\n          return {\r\n            success: true,\r\n            data: cachedListing,\r\n          };\r\n        }\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const listings = await storageService.getItem<Listing[]>('listings', []);\r\n      const listing = listings.find(l => l.id === sanitizedId);\r\n\r\n      return {\r\n        success: true,\r\n        data: listing || null,\r\n      };\r\n    } catch (error: any) {\r\n      console.error('Get listing error:', error);\r\n      \r\n      // Handle 403 errors for premium content\r\n      if (error.status === 403 || error.message?.includes('subscribe')) {\r\n        return {\r\n          success: false,\r\n          error: { \r\n            message: error.message || 'Premium content - subscription required',\r\n            requiresSubscription: true,\r\n            seller: error.seller\r\n          },\r\n        };\r\n      }\r\n      \r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get listing' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get listings by seller\r\n   */\r\n  async getListingsBySeller(username: string): Promise<ApiResponse<Listing[]>> {\r\n    try {\r\n      // Sanitize username\r\n      const sanitizedUsername = sanitize.username(username);\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        const response = await apiCall<any>(\r\n          `/listings?seller=${sanitizedUsername}`\r\n        );\r\n        \r\n        if (response.success) {\r\n          // Handle both direct array response and nested data structure\r\n          const listings = response.data?.data || response.data || [];\r\n          const convertedListings = listings.map(convertBackendToFrontend);\r\n          return {\r\n            success: true,\r\n            data: convertedListings,\r\n            meta: response.data?.meta || response.meta\r\n          };\r\n        }\r\n        \r\n        return {\r\n          success: false,\r\n          error: response.error || { message: 'Failed to get seller listings' }\r\n        };\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      return this.getListings({ seller: sanitizedUsername });\r\n    } catch (error) {\r\n      console.error('Get listings by seller error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get seller listings' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create new listing with reserve price support\r\n   */\r\n  async createListing(request: CreateListingRequest): Promise<ApiResponse<Listing>> {\r\n    try {\r\n      console.log('[ListingsService] Creating listing:', request);\r\n\r\n      // Check rate limit\r\n      const rateLimiter = getRateLimiter();\r\n      const rateLimit = rateLimiter.check('LISTING_CREATE', RATE_LIMITS.LISTING_CREATE);\r\n      if (!rateLimit.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: `Rate limit exceeded. Please wait ${rateLimit.waitTime} seconds.` },\r\n        };\r\n      }\r\n\r\n      // Ensure proper number types for validation\r\n      const validationData = {\r\n        title: request.title,\r\n        description: request.description,\r\n        price: typeof request.price === 'string' ? parseFloat(request.price) : request.price,\r\n        seller: request.seller,\r\n        tags: request.tags,\r\n        hoursWorn: request.hoursWorn ? \r\n          (typeof request.hoursWorn === 'string' ? parseInt(request.hoursWorn) : request.hoursWorn) : \r\n          undefined,\r\n      };\r\n\r\n      // Validate and sanitize the request\r\n      const validation = securityService.validateAndSanitize(\r\n        validationData,\r\n        createListingValidationSchema,\r\n        {\r\n          title: sanitize.strict,\r\n          description: sanitize.strict,\r\n          seller: sanitize.username,\r\n          tags: (tags: string[] | undefined) => tags ? tags.map(tag => sanitize.strict(tag)) : undefined,\r\n        }\r\n      );\r\n\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid listing data', details: validation.errors },\r\n        };\r\n      }\r\n\r\n      const sanitizedData = validation.data as CreateListingValidationData;\r\n\r\n      // Validate image URLs\r\n      for (const imageUrl of request.imageUrls) {\r\n        const sanitizedUrl = sanitize.url(imageUrl);\r\n        if (!sanitizedUrl) {\r\n          return {\r\n            success: false,\r\n            error: { message: 'Invalid image URL provided' },\r\n          };\r\n        }\r\n      }\r\n\r\n      // Validate reserve price if auction\r\n      if (request.auction) {\r\n        if (request.auction.reservePrice && request.auction.reservePrice < request.auction.startingPrice) {\r\n          return {\r\n            success: false,\r\n            error: { message: 'Reserve price must be at least the starting price' },\r\n          };\r\n        }\r\n      }\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        console.log('[ListingsService] Creating listing via backend API');\r\n        \r\n        const backendRequest = convertFrontendToBackend({\r\n          ...sanitizedData,\r\n          imageUrls: request.imageUrls,\r\n          isVerified: request.isVerified,\r\n          isPremium: request.isPremium,\r\n          auction: request.auction,\r\n        });\r\n\r\n        const response = await apiCall<BackendListing>('/listings', {\r\n          method: 'POST',\r\n          body: JSON.stringify(backendRequest),\r\n        });\r\n\r\n        console.log('[ListingsService] Backend response:', response);\r\n\r\n        if (response.success && response.data) {\r\n          const convertedListing = convertBackendToFrontend(response.data);\r\n          \r\n          // Invalidate cache\r\n          this.invalidateCache();\r\n          \r\n          return {\r\n            success: true,\r\n            data: convertedListing,\r\n          };\r\n        } else {\r\n          throw new Error(response.error?.message || 'Backend API error');\r\n        }\r\n      }\r\n\r\n      // LocalStorage implementation (fallback)\r\n      const listings = await storageService.getItem<Listing[]>('listings', []);\r\n      console.log('[ListingsService] Current listings count before create:', listings.length);\r\n      \r\n      const newListing: Listing = {\r\n        id: uuidv4(),\r\n        title: sanitizedData.title,\r\n        description: sanitizedData.description,\r\n        price: sanitizedData.price,\r\n        markedUpPrice: Math.round(sanitizedData.price * 1.1 * 100) / 100,\r\n        imageUrls: request.imageUrls || [],\r\n        date: new Date().toISOString(),\r\n        seller: sanitizedData.seller,\r\n        isVerified: request.isVerified || false,\r\n        isPremium: request.isPremium || false,\r\n        tags: sanitizedData.tags || [],\r\n        hoursWorn: sanitizedData.hoursWorn,\r\n        views: 0, // Initialize views for new listings\r\n        auction: request.auction ? {\r\n          isAuction: true,\r\n          startingPrice: request.auction.startingPrice,\r\n          reservePrice: request.auction.reservePrice,\r\n          endTime: request.auction.endTime,\r\n          bids: [],\r\n          highestBid: undefined,\r\n          highestBidder: undefined,\r\n          status: 'active',\r\n        } : undefined,\r\n      };\r\n\r\n      console.log('[ListingsService] New listing object:', newListing);\r\n\r\n      listings.push(newListing);\r\n      const saveResult = await storageService.setItem('listings', listings);\r\n      \r\n      if (!saveResult) {\r\n        throw new Error('Failed to save listings to storage');\r\n      }\r\n\r\n      // Verify the save\r\n      const verifyListings = await storageService.getItem<Listing[]>('listings', []);\r\n      console.log('[ListingsService] Verified listings count after save:', verifyListings.length);\r\n      \r\n      // Check if our listing is in the saved data\r\n      const savedListing = verifyListings.find(l => l.id === newListing.id);\r\n      if (!savedListing) {\r\n        throw new Error('Listing was not properly saved to storage');\r\n      }\r\n\r\n      // Invalidate cache\r\n      this.invalidateCache();\r\n\r\n      return {\r\n        success: true,\r\n        data: newListing,\r\n      };\r\n    } catch (error) {\r\n      console.error('[ListingsService] Create listing error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to create listing: ' + (error as Error).message },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update existing listing\r\n   */\r\n  async updateListing(\r\n    id: string,\r\n    updates: UpdateListingRequest\r\n  ): Promise<ApiResponse<Listing>> {\r\n    try {\r\n      // Sanitize ID\r\n      const sanitizedId = sanitize.strict(id);\r\n\r\n      // Sanitize updates\r\n      const sanitizedUpdates: UpdateListingRequest = {};\r\n      \r\n      if (updates.title !== undefined) {\r\n        sanitizedUpdates.title = sanitize.strict(updates.title);\r\n      }\r\n      if (updates.description !== undefined) {\r\n        sanitizedUpdates.description = sanitize.strict(updates.description);\r\n      }\r\n      if (updates.price !== undefined) {\r\n        sanitizedUpdates.price = sanitize.number(updates.price, 0.01, 10000);\r\n      }\r\n      if (updates.tags !== undefined) {\r\n        sanitizedUpdates.tags = updates.tags.map(tag => sanitize.strict(tag));\r\n      }\r\n      if (updates.hoursWorn !== undefined) {\r\n        sanitizedUpdates.hoursWorn = sanitize.number(updates.hoursWorn, 0, 30);\r\n      }\r\n      if (updates.imageUrls !== undefined) {\r\n        // Validate image URLs\r\n        for (const imageUrl of updates.imageUrls) {\r\n          const sanitizedUrl = sanitize.url(imageUrl);\r\n          if (!sanitizedUrl) {\r\n            return {\r\n              success: false,\r\n              error: { message: 'Invalid image URL provided' },\r\n            };\r\n          }\r\n        }\r\n        sanitizedUpdates.imageUrls = updates.imageUrls;\r\n      }\r\n      if (updates.isPremium !== undefined) {\r\n        sanitizedUpdates.isPremium = updates.isPremium;\r\n      }\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        console.log('[ListingsService] Updating listing via backend API:', sanitizedId);\r\n        \r\n        const response = await apiCall<BackendListing>(`/listings/${sanitizedId}`, {\r\n          method: 'PATCH',\r\n          body: JSON.stringify(sanitizedUpdates),\r\n        });\r\n\r\n        if (response.success && response.data) {\r\n          const convertedListing = convertBackendToFrontend(response.data);\r\n          \r\n          // Invalidate cache\r\n          this.invalidateCache();\r\n          \r\n          return {\r\n            success: true,\r\n            data: convertedListing,\r\n          };\r\n        } else {\r\n          throw new Error(response.error?.message || 'Backend API error');\r\n        }\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const listings = await storageService.getItem<Listing[]>('listings', []);\r\n      const index = listings.findIndex(l => l.id === sanitizedId);\r\n\r\n      if (index === -1) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Listing not found' },\r\n        };\r\n      }\r\n\r\n      const updatedListing = {\r\n        ...listings[index],\r\n        ...sanitizedUpdates,\r\n        markedUpPrice: sanitizedUpdates.price\r\n          ? Math.round(sanitizedUpdates.price * 1.1 * 100) / 100\r\n          : listings[index].markedUpPrice,\r\n      };\r\n\r\n      listings[index] = updatedListing;\r\n      await storageService.setItem('listings', listings);\r\n\r\n      // Invalidate cache\r\n      this.invalidateCache();\r\n\r\n      return {\r\n        success: true,\r\n        data: updatedListing,\r\n      };\r\n    } catch (error) {\r\n      console.error('Update listing error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to update listing' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete listing - Enhanced with event broadcasting\r\n   */\r\n  async deleteListing(id: string): Promise<ApiResponse<void>> {\r\n    try {\r\n      console.log('[ListingsService] Deleting listing:', id);\r\n\r\n      // Sanitize ID\r\n      const sanitizedId = sanitize.strict(id);\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        console.log('[ListingsService] Deleting listing via backend API:', sanitizedId);\r\n        \r\n        const response = await apiCall<void>(`/listings/${sanitizedId}`, { \r\n          method: 'DELETE' \r\n        });\r\n\r\n        if (response.success) {\r\n          // Invalidate cache\r\n          this.invalidateCache();\r\n          \r\n          // Trigger a custom event to notify other components\r\n          if (typeof window !== 'undefined') {\r\n            window.dispatchEvent(new CustomEvent('listingDeleted', { \r\n              detail: { listingId: sanitizedId } \r\n            }));\r\n          }\r\n          \r\n          return { success: true };\r\n        } else {\r\n          throw new Error(response.error?.message || 'Backend API error');\r\n        }\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const listings = await storageService.getItem<Listing[]>('listings', []);\r\n      const beforeCount = listings.length;\r\n      const filtered = listings.filter(l => l.id !== sanitizedId);\r\n      const afterCount = filtered.length;\r\n      \r\n      console.log(`[ListingsService] Delete listing: ${beforeCount} -> ${afterCount} listings`);\r\n      \r\n      if (beforeCount === afterCount) {\r\n        console.warn(`[ListingsService] Listing ${sanitizedId} was not found in storage`);\r\n      }\r\n      \r\n      await storageService.setItem('listings', filtered);\r\n\r\n      // Invalidate all caches\r\n      this.invalidateCache();\r\n      \r\n      // Clear browse cache specifically\r\n      if (typeof window !== 'undefined') {\r\n        try {\r\n          localStorage.removeItem('browse_listings_cache');\r\n          console.log('[ListingsService] Cleared browse listings cache');\r\n        } catch (e) {\r\n          console.warn('Failed to clear browse cache:', e);\r\n        }\r\n      }\r\n      \r\n      // Trigger a custom event to notify other components\r\n      if (typeof window !== 'undefined') {\r\n        window.dispatchEvent(new CustomEvent('listingDeleted', { \r\n          detail: { listingId: sanitizedId } \r\n        }));\r\n        \r\n        // Also trigger storage event manually for cross-tab sync\r\n        window.dispatchEvent(new StorageEvent('storage', {\r\n          key: 'listings',\r\n          newValue: JSON.stringify(filtered),\r\n          url: window.location.href\r\n        }));\r\n      }\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('[ListingsService] Delete listing error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to delete listing' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bulk update listings\r\n   */\r\n  async bulkUpdateListings(request: BulkUpdateRequest): Promise<ApiResponse<Listing[]>> {\r\n    try {\r\n      // Sanitize listing IDs\r\n      const sanitizedIds = request.listingIds.map(id => sanitize.strict(id));\r\n\r\n      // Sanitize updates (same as updateListing)\r\n      const sanitizedUpdates: UpdateListingRequest = {};\r\n      \r\n      if (request.updates.title !== undefined) {\r\n        sanitizedUpdates.title = sanitize.strict(request.updates.title);\r\n      }\r\n      if (request.updates.description !== undefined) {\r\n        sanitizedUpdates.description = sanitize.strict(request.updates.description);\r\n      }\r\n      if (request.updates.price !== undefined) {\r\n        sanitizedUpdates.price = sanitize.number(request.updates.price, 0.01, 10000);\r\n      }\r\n      if (request.updates.tags !== undefined) {\r\n        sanitizedUpdates.tags = request.updates.tags.map(tag => sanitize.strict(tag));\r\n      }\r\n      if (request.updates.hoursWorn !== undefined) {\r\n        sanitizedUpdates.hoursWorn = sanitize.number(request.updates.hoursWorn, 0, 30);\r\n      }\r\n      if (request.updates.isPremium !== undefined) {\r\n        sanitizedUpdates.isPremium = request.updates.isPremium;\r\n      }\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        return await apiCall<Listing[]>(`/listings/bulk`, {\r\n          method: 'PATCH',\r\n          body: JSON.stringify({\r\n            listingIds: sanitizedIds,\r\n            updates: sanitizedUpdates,\r\n          }),\r\n        });\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const listings = await storageService.getItem<Listing[]>('listings', []);\r\n      const updatedListings: Listing[] = [];\r\n\r\n      listings.forEach((listing, index) => {\r\n        if (sanitizedIds.includes(listing.id)) {\r\n          const updatedListing = {\r\n            ...listing,\r\n            ...sanitizedUpdates,\r\n            markedUpPrice: sanitizedUpdates.price\r\n              ? Math.round(sanitizedUpdates.price * 1.1 * 100) / 100\r\n              : listing.markedUpPrice,\r\n          };\r\n          listings[index] = updatedListing;\r\n          updatedListings.push(updatedListing);\r\n        }\r\n      });\r\n\r\n      await storageService.setItem('listings', listings);\r\n\r\n      // Invalidate cache\r\n      this.invalidateCache();\r\n\r\n      return {\r\n        success: true,\r\n        data: updatedListings,\r\n      };\r\n    } catch (error) {\r\n      console.error('Bulk update error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to bulk update listings' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Place bid on auction listing with premium checking\r\n   */\r\n  async placeBid(\r\n    listingId: string,\r\n    bidder: string,\r\n    amount: number\r\n  ): Promise<ApiResponse<Listing>> {\r\n    try {\r\n      // Sanitize inputs\r\n      const sanitizedId = sanitize.strict(listingId);\r\n      const sanitizedBidder = sanitize.username(bidder);\r\n      const sanitizedAmount = sanitize.currency(amount);\r\n\r\n      // Validate amount\r\n      if (sanitizedAmount < 0.01 || sanitizedAmount > 10000) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid bid amount' },\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        console.log('[ListingsService] Placing bid via backend API:', sanitizedId, sanitizedAmount);\r\n        \r\n        const response = await apiCall<BackendListing>(`/listings/${sanitizedId}/bid`, {\r\n          method: 'POST',\r\n          body: JSON.stringify({ amount: sanitizedAmount }),\r\n        });\r\n\r\n        if (response.success && response.data) {\r\n          const convertedListing = convertBackendToFrontend(response.data);\r\n          \r\n          // Invalidate cache\r\n          this.invalidateCache();\r\n          \r\n          return {\r\n            success: true,\r\n            data: convertedListing,\r\n          };\r\n        } else {\r\n          // Handle premium content errors\r\n          if (response.error?.requiresSubscription) {\r\n            return {\r\n              success: false,\r\n              error: { \r\n                message: response.error.message || 'Premium content - subscription required',\r\n                requiresSubscription: true,\r\n                seller: response.error.seller\r\n              },\r\n            };\r\n          }\r\n          \r\n          return {\r\n            success: false,\r\n            error: { message: response.error?.message || 'Failed to place bid' },\r\n          };\r\n        }\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const listings = await storageService.getItem<Listing[]>('listings', []);\r\n      const listing = listings.find(l => l.id === sanitizedId);\r\n\r\n      if (!listing || !listing.auction) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Auction not found' },\r\n        };\r\n      }\r\n\r\n      if (listing.auction.status !== 'active') {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Auction is not active' },\r\n        };\r\n      }\r\n\r\n      // Check if auction has ended\r\n      const now = new Date();\r\n      const endTime = new Date(listing.auction.endTime);\r\n      if (endTime <= now) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Auction has ended' },\r\n        };\r\n      }\r\n\r\n      // Proper bid validation logic\r\n      const currentHighestBid = listing.auction.highestBid || 0;\r\n      const startingPrice = listing.auction.startingPrice;\r\n      \r\n      if (currentHighestBid === 0) {\r\n        // First bid - must be at least starting price (allow equal)\r\n        if (sanitizedAmount < startingPrice) {\r\n          return {\r\n            success: false,\r\n            error: { message: `Minimum bid is $${startingPrice.toFixed(2)}` },\r\n          };\r\n        }\r\n      } else {\r\n        // Subsequent bids - must be higher than current highest bid\r\n        if (sanitizedAmount <= currentHighestBid) {\r\n          return {\r\n            success: false,\r\n            error: { message: `Bid must be higher than $${currentHighestBid.toFixed(2)}` },\r\n          };\r\n        }\r\n      }\r\n\r\n      const newBid: Bid = {\r\n        id: uuidv4(),\r\n        bidder: sanitizedBidder,\r\n        amount: sanitizedAmount,\r\n        date: new Date().toISOString(),\r\n      };\r\n\r\n      listing.auction.bids.push(newBid);\r\n      listing.auction.highestBid = sanitizedAmount;\r\n      listing.auction.highestBidder = sanitizedBidder;\r\n\r\n      await storageService.setItem('listings', listings);\r\n\r\n      // Invalidate cache\r\n      this.invalidateCache();\r\n\r\n      return {\r\n        success: true,\r\n        data: listing,\r\n      };\r\n    } catch (error: any) {\r\n      console.error('Place bid error:', error);\r\n      \r\n      // Handle 403 errors for premium content\r\n      if (error.status === 403 || error.message?.includes('subscribe')) {\r\n        return {\r\n          success: false,\r\n          error: { \r\n            message: error.message || 'Premium content - subscription required',\r\n            requiresSubscription: true,\r\n            seller: error.seller\r\n          },\r\n        };\r\n      }\r\n      \r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to place bid' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel auction\r\n   */\r\n  async cancelAuction(listingId: string): Promise<ApiResponse<Listing>> {\r\n    try {\r\n      // Sanitize ID\r\n      const sanitizedId = sanitize.strict(listingId);\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        const response = await apiCall<BackendListing>(`/listings/${sanitizedId}/cancel-auction`, {\r\n          method: 'POST',\r\n        });\r\n\r\n        if (response.success && response.data) {\r\n          const convertedListing = convertBackendToFrontend(response.data);\r\n          \r\n          // Invalidate cache\r\n          this.invalidateCache();\r\n          \r\n          return {\r\n            success: true,\r\n            data: convertedListing,\r\n          };\r\n        } else {\r\n          throw new Error(response.error?.message || 'Backend API error');\r\n        }\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const listings = await storageService.getItem<Listing[]>('listings', []);\r\n      const listing = listings.find(l => l.id === sanitizedId);\r\n\r\n      if (!listing || !listing.auction) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Auction not found' },\r\n        };\r\n      }\r\n\r\n      listing.auction.status = 'cancelled';\r\n      await storageService.setItem('listings', listings);\r\n\r\n      // Invalidate cache\r\n      this.invalidateCache();\r\n\r\n      return {\r\n        success: true,\r\n        data: listing,\r\n      };\r\n    } catch (error) {\r\n      console.error('Cancel auction error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to cancel auction' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * End auction - trigger backend processing\r\n   */\r\n  async endAuction(listingId: string): Promise<ApiResponse<any>> {\r\n    try {\r\n      // Sanitize ID\r\n      const sanitizedId = sanitize.strict(listingId);\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        console.log('[ListingsService] Ending auction via backend:', sanitizedId);\r\n        \r\n        const response = await apiCall<any>(`/listings/${sanitizedId}/end-auction`, {\r\n          method: 'POST',\r\n        });\r\n\r\n        if (response.success) {\r\n          // Invalidate cache to force refresh\r\n          this.invalidateCache();\r\n          \r\n          return {\r\n            success: true,\r\n            data: response.data,\r\n          };\r\n        } else {\r\n          return {\r\n            success: false,\r\n            error: { message: response.error?.message || 'Failed to end auction' },\r\n          };\r\n        }\r\n      }\r\n\r\n      // LocalStorage fallback - just mark as ended\r\n      const listings = await storageService.getItem<Listing[]>('listings', []);\r\n      const listing = listings.find(l => l.id === sanitizedId);\r\n\r\n      if (!listing || !listing.auction) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Auction not found' },\r\n        };\r\n      }\r\n\r\n      // Check if reserve is met\r\n      const reserveMet = !listing.auction.reservePrice || \r\n        (listing.auction.highestBid && listing.auction.highestBid >= listing.auction.reservePrice);\r\n\r\n      listing.auction.status = reserveMet ? 'ended' : 'reserve_not_met' as any;\r\n      await storageService.setItem('listings', listings);\r\n\r\n      // Invalidate cache\r\n      this.invalidateCache();\r\n\r\n      return {\r\n        success: true,\r\n        data: { \r\n          status: listing.auction.status,\r\n          reserveMet,\r\n          highestBid: listing.auction.highestBid,\r\n          highestBidder: listing.auction.highestBidder\r\n        },\r\n      };\r\n    } catch (error) {\r\n      console.error('End auction error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to end auction' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update listing views\r\n   */\r\n  async updateViews(update: ListingViewUpdate): Promise<ApiResponse<void>> {\r\n    try {\r\n      // Sanitize inputs\r\n      const sanitizedId = sanitize.strict(update.listingId);\r\n      const sanitizedViewerId = update.viewerId ? sanitize.username(update.viewerId) : undefined;\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        return await apiCall<void>(`/listings/${sanitizedId}/views`, {\r\n          method: 'POST',\r\n          body: JSON.stringify({ viewerId: sanitizedViewerId }),\r\n        });\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const viewsData = await storageService.getItem<Record<string, number>>(\r\n        'listing_views',\r\n        {}\r\n      );\r\n      \r\n      viewsData[sanitizedId] = (viewsData[sanitizedId] || 0) + 1;\r\n      await storageService.setItem('listing_views', viewsData);\r\n\r\n      // Invalidate view cache for this listing\r\n      this.viewsCache.delete(sanitizedId);\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Update views error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to update views' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get listing views with caching\r\n   */\r\n  async getListingViews(listingId: string): Promise<ApiResponse<number>> {\r\n    try {\r\n      // Sanitize ID\r\n      const sanitizedId = sanitize.strict(listingId);\r\n\r\n      // Check cache first\r\n      const cached = this.viewsCache.get(sanitizedId);\r\n      const now = Date.now();\r\n      \r\n      if (cached && now - cached.timestamp < VIEW_CACHE_DURATION) {\r\n        return {\r\n          success: true,\r\n          data: cached.count,\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        const response = await apiCall<{ views: number }>(`/listings/${sanitizedId}/views`);\r\n        \r\n        if (response.success && response.data) {\r\n          const viewCount = (response.data as any).views || 0;\r\n          this.viewsCache.set(sanitizedId, { count: viewCount, timestamp: now });\r\n          return {\r\n            success: true,\r\n            data: viewCount,\r\n          };\r\n        }\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const viewsData = await storageService.getItem<Record<string, number>>(\r\n        'listing_views',\r\n        {}\r\n      );\r\n\r\n      const count = viewsData[sanitizedId] || 0;\r\n      this.viewsCache.set(sanitizedId, { count, timestamp: now });\r\n\r\n      return {\r\n        success: true,\r\n        data: count,\r\n      };\r\n    } catch (error) {\r\n      console.error('Get listing views error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get listing views' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get popular tags\r\n   */\r\n  async getPopularTags(limit: number = 20): Promise<ApiResponse<PopularTag[]>> {\r\n    try {\r\n      // Sanitize limit\r\n      const sanitizedLimit = Math.min(Math.max(1, limit), 50);\r\n\r\n      // Check cache first\r\n      const now = Date.now();\r\n      if (\r\n        this.popularTagsCache.data &&\r\n        now - this.popularTagsCache.timestamp < CACHE_DURATION\r\n      ) {\r\n        return {\r\n          success: true,\r\n          data: this.popularTagsCache.data.slice(0, sanitizedLimit),\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        const response = await apiCall<PopularTag[]>(\r\n          `/listings/popular-tags?limit=${sanitizedLimit}`\r\n        );\r\n        \r\n        if (response.success && response.data) {\r\n          // Cache the result\r\n          this.popularTagsCache = {\r\n            data: response.data,\r\n            timestamp: now,\r\n          };\r\n          \r\n          return response;\r\n        }\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const listings = await storageService.getItem<Listing[]>('listings', []);\r\n      const tagCounts = new Map<string, number>();\r\n\r\n      listings.forEach(listing => {\r\n        listing.tags?.forEach(tag => {\r\n          tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);\r\n        });\r\n      });\r\n\r\n      const popularTags = Array.from(tagCounts.entries())\r\n        .map(([tag, count]) => ({ tag, count }))\r\n        .sort((a, b) => b.count - a.count)\r\n        .slice(0, sanitizedLimit);\r\n\r\n      // Update cache\r\n      this.popularTagsCache = { data: popularTags, timestamp: now };\r\n\r\n      return {\r\n        success: true,\r\n        data: popularTags,\r\n      };\r\n    } catch (error) {\r\n      console.error('Get popular tags error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get popular tags' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draft Management\r\n   */\r\n  \r\n  /**\r\n   * Save listing draft\r\n   */\r\n  async saveDraft(draft: ListingDraft): Promise<ApiResponse<ListingDraft>> {\r\n    try {\r\n      // Create a sanitized copy, checking each property exists\r\n      const sanitizedDraft: ListingDraft = { ...draft };\r\n\r\n      // The ListingDraft type should have these properties, but let's handle them safely\r\n      const draftAsAny = draft as any;\r\n      \r\n      if (draftAsAny.title) {\r\n        (sanitizedDraft as any).title = sanitize.strict(draftAsAny.title);\r\n      }\r\n      if (draftAsAny.description) {\r\n        (sanitizedDraft as any).description = sanitize.strict(draftAsAny.description);\r\n      }\r\n      if (draftAsAny.seller) {\r\n        (sanitizedDraft as any).seller = sanitize.username(draftAsAny.seller);\r\n      }\r\n      if (draftAsAny.tags) {\r\n        (sanitizedDraft as any).tags = draftAsAny.tags.map((tag: string) => sanitize.strict(tag));\r\n      }\r\n\r\n      const drafts = await storageService.getItem<ListingDraft[]>('listing_drafts', []);\r\n      \r\n      const existingIndex = drafts.findIndex(d => d.id === sanitizedDraft.id);\r\n      \r\n      if (existingIndex >= 0) {\r\n        drafts[existingIndex] = { ...sanitizedDraft, lastModified: new Date().toISOString() };\r\n      } else {\r\n        drafts.push({ ...sanitizedDraft, lastModified: new Date().toISOString() });\r\n      }\r\n      \r\n      await storageService.setItem('listing_drafts', drafts);\r\n      \r\n      return {\r\n        success: true,\r\n        data: sanitizedDraft,\r\n      };\r\n    } catch (error) {\r\n      console.error('Save draft error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to save draft' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all drafts for a seller\r\n   */\r\n  async getDrafts(seller: string): Promise<ApiResponse<ListingDraft[]>> {\r\n    try {\r\n      // Sanitize seller\r\n      const sanitizedSeller = sanitize.username(seller);\r\n\r\n      const drafts = await storageService.getItem<ListingDraft[]>('listing_drafts', []);\r\n      const sellerDrafts = drafts.filter(d => (d as any).seller === sanitizedSeller);\r\n      \r\n      return {\r\n        success: true,\r\n        data: sellerDrafts,\r\n      };\r\n    } catch (error) {\r\n      console.error('Get drafts error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get drafts' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete draft\r\n   */\r\n  async deleteDraft(draftId: string): Promise<ApiResponse<void>> {\r\n    try {\r\n      // Sanitize ID\r\n      const sanitizedId = sanitize.strict(draftId);\r\n\r\n      const drafts = await storageService.getItem<ListingDraft[]>('listing_drafts', []);\r\n      const filtered = drafts.filter(d => d.id !== sanitizedId);\r\n      \r\n      await storageService.setItem('listing_drafts', filtered);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Delete draft error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to delete draft' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload image to Cloudinary\r\n   */\r\n  async uploadImage(file: File): Promise<ApiResponse<string>> {\r\n    try {\r\n      // Check rate limit\r\n      const rateLimiter = getRateLimiter();\r\n      const rateLimit = rateLimiter.check('IMAGE_UPLOAD', RATE_LIMITS.IMAGE_UPLOAD);\r\n      if (!rateLimit.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: `Rate limit exceeded. Please wait ${rateLimit.waitTime} seconds.` },\r\n        };\r\n      }\r\n\r\n      // Validate file\r\n      const fileValidation = securityService.validateFileUpload(file, {\r\n        maxSize: 5 * 1024 * 1024, // 5MB\r\n        allowedTypes: ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'],\r\n        allowedExtensions: ['jpg', 'jpeg', 'png', 'webp'],\r\n      });\r\n\r\n      if (!fileValidation.valid) {\r\n        return {\r\n          success: false,\r\n          error: { message: fileValidation.error! },\r\n        };\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      formData.append('upload_preset', process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET || '');\r\n      \r\n      const response = await fetch(\r\n        `https://api.cloudinary.com/v1_1/${process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n        {\r\n          method: 'POST',\r\n          body: formData,\r\n        }\r\n      );\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Upload failed');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      return {\r\n        success: true,\r\n        data: data.secure_url,\r\n      };\r\n    } catch (error) {\r\n      console.error('Upload image error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to upload image' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete image from Cloudinary\r\n   */\r\n  async deleteImage(imageUrl: string): Promise<ApiResponse<void>> {\r\n    try {\r\n      // Sanitize URL\r\n      const sanitizedUrl = sanitize.url(imageUrl);\r\n      if (!sanitizedUrl) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid image URL' },\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_LISTINGS) {\r\n        return await apiCall<void>(`/listings/images/delete`, {\r\n          method: 'DELETE',\r\n          body: JSON.stringify({ imageUrl: sanitizedUrl }),\r\n        });\r\n      }\r\n      \r\n      // For now, we can't delete from Cloudinary without backend\r\n      // Just return success to allow UI to continue\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Delete image error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to delete image' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalidate cache\r\n   */\r\n  private invalidateCache(): void {\r\n    console.log('[ListingsService] Invalidating cache');\r\n    this.listingsCache = { data: null, timestamp: 0 };\r\n    this.popularTagsCache = { data: null, timestamp: 0 };\r\n  }\r\n\r\n  /**\r\n   * Clear all caches\r\n   */\r\n  clearCache(): void {\r\n    console.log('[ListingsService] Clearing all caches');\r\n    this.invalidateCache();\r\n    this.viewsCache.clear();\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const listingsService = new ListingsService();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6610, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/orders.service.ts"],"sourcesContent":["// src/services/orders.service.ts\r\n\r\nimport { Order } from '@/context/WalletContext';\r\nimport { storageService } from './storage.service';\r\nimport { FEATURES, API_ENDPOINTS, buildApiUrl, apiCall, ApiResponse } from './api.config';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { securityService } from './security.service';\r\nimport { sanitizeStrict, sanitizeCurrency, sanitizeUsername, sanitizeUrl } from '@/utils/security/sanitization';\r\nimport { getRateLimiter, RATE_LIMITS } from '@/utils/security/rate-limiter';\r\nimport { z } from 'zod';\r\nimport { validateSchema } from '@/utils/validation/schemas';\r\n\r\n// Define DeliveryAddress type here since it's not exported from WalletContext\r\nexport interface DeliveryAddress {\r\n  fullName: string;\r\n  addressLine1: string;\r\n  addressLine2?: string;\r\n  city: string;\r\n  state: string;\r\n  postalCode: string;\r\n  country: string;\r\n  specialInstructions?: string;\r\n}\r\n\r\nexport interface CreateOrderRequest {\r\n  title: string;\r\n  description: string;\r\n  price: number;\r\n  markedUpPrice: number;\r\n  imageUrl?: string;\r\n  seller: string;\r\n  buyer: string;\r\n  tags?: string[];\r\n  wearTime?: string;\r\n  wasAuction?: boolean;\r\n  finalBid?: number;\r\n  deliveryAddress?: DeliveryAddress;\r\n  tierCreditAmount?: number;\r\n  isCustomRequest?: boolean;\r\n  originalRequestId?: string;\r\n  listingId?: string;\r\n  listingTitle?: string;\r\n  quantity?: number;\r\n  shippingStatus?: 'pending' | 'processing' | 'shipped' | 'pending-auction';\r\n}\r\n\r\n// NEW: Interface for custom request conversion\r\nexport interface CustomRequestOrderRequest {\r\n  requestId: string;\r\n  title: string;\r\n  description: string;\r\n  price: number;\r\n  seller: string;\r\n  buyer: string;\r\n  tags?: string[];\r\n  deliveryAddress?: DeliveryAddress;\r\n}\r\n\r\nexport interface UpdateOrderStatusRequest {\r\n  shippingStatus: 'pending' | 'processing' | 'shipped' | 'pending-auction';\r\n  trackingNumber?: string;\r\n  shippedDate?: string;\r\n}\r\n\r\nexport interface OrderSearchParams {\r\n  buyer?: string;\r\n  seller?: string;\r\n  status?: 'pending' | 'processing' | 'shipped';\r\n  fromDate?: string;\r\n  toDate?: string;\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\n// Custom delivery address schema that matches the interface\r\nconst deliveryAddressSchema = z.object({\r\n  fullName: z.string().min(2).max(100).transform(sanitizeStrict),\r\n  addressLine1: z.string().min(5).max(200).transform(sanitizeStrict),\r\n  addressLine2: z.string().max(200).transform(sanitizeStrict).optional(),\r\n  city: z.string().min(2).max(100).transform(sanitizeStrict),\r\n  state: z.string().min(2).max(100).transform(sanitizeStrict),\r\n  postalCode: z.string().min(3).max(20).regex(/^[A-Z0-9\\s-]+$/i).transform(sanitizeStrict),\r\n  country: z.string().min(2).max(100).transform(sanitizeStrict),\r\n  specialInstructions: z.string().max(500).transform(sanitizeStrict).optional(),\r\n});\r\n\r\n// Validation schemas\r\nconst createOrderSchema = z.object({\r\n  title: z.string().min(1).max(200).transform(sanitizeStrict),\r\n  description: z.string().min(1).max(2000).transform(sanitizeStrict),\r\n  price: z.number().positive().min(0.01).max(100000),\r\n  markedUpPrice: z.number().positive().min(0.01).max(100000),\r\n  imageUrl: z.string().url().optional().or(z.literal('')).transform(url => url ? sanitizeUrl(url) : undefined),\r\n  seller: z.string().min(3).max(30).regex(/^[a-zA-Z0-9_-]+$/).transform(sanitizeUsername),\r\n  buyer: z.string().min(3).max(30).regex(/^[a-zA-Z0-9_-]+$/).transform(sanitizeUsername),\r\n  tags: z.array(z.string().max(30).transform(sanitizeStrict)).max(20).optional(),\r\n  wearTime: z.string().max(50).transform(sanitizeStrict).optional(),\r\n  wasAuction: z.boolean().optional(),\r\n  finalBid: z.number().positive().optional(),\r\n  deliveryAddress: deliveryAddressSchema.optional(),\r\n  tierCreditAmount: z.number().min(0).optional(),\r\n  isCustomRequest: z.boolean().optional(),\r\n  originalRequestId: z.string().uuid().optional(),\r\n  listingId: z.string().max(100).optional(),\r\n  listingTitle: z.string().max(200).transform(sanitizeStrict).optional(),\r\n  quantity: z.number().int().positive().max(100).optional(),\r\n  shippingStatus: z.enum(['pending', 'processing', 'shipped', 'pending-auction']).optional(),\r\n}).refine(data => {\r\n  // Ensure markedUpPrice is >= price\r\n  return data.markedUpPrice >= data.price;\r\n}, {\r\n  message: 'Marked up price must be greater than or equal to base price',\r\n  path: ['markedUpPrice'],\r\n});\r\n\r\n// NEW: Validation schema for custom request conversion\r\nconst customRequestOrderSchema = z.object({\r\n  requestId: z.string().min(1).max(100),\r\n  title: z.string().min(1).max(200).transform(sanitizeStrict),\r\n  description: z.string().min(1).max(2000).transform(sanitizeStrict),\r\n  price: z.number().positive().min(0.01).max(100000),\r\n  seller: z.string().min(3).max(30).regex(/^[a-zA-Z0-9_-]+$/).transform(sanitizeUsername),\r\n  buyer: z.string().min(3).max(30).regex(/^[a-zA-Z0-9_-]+$/).transform(sanitizeUsername),\r\n  tags: z.array(z.string().max(30).transform(sanitizeStrict)).max(20).optional(),\r\n  deliveryAddress: deliveryAddressSchema.optional(),\r\n});\r\n\r\nconst updateOrderStatusSchema = z.object({\r\n  shippingStatus: z.enum(['pending', 'processing', 'shipped', 'pending-auction']),\r\n  trackingNumber: z.string().max(100).transform(sanitizeStrict).optional(),\r\n  shippedDate: z.string().datetime().optional(),\r\n});\r\n\r\nconst orderSearchSchema = z.object({\r\n  buyer: z.string().min(3).max(30).transform(sanitizeUsername).optional(),\r\n  seller: z.string().min(3).max(30).transform(sanitizeUsername).optional(),\r\n  status: z.enum(['pending', 'processing', 'shipped']).optional(),\r\n  fromDate: z.string().datetime().optional(),\r\n  toDate: z.string().datetime().optional(),\r\n  page: z.number().int().min(0).optional(),\r\n  limit: z.number().int().min(1).max(100).optional(),\r\n});\r\n\r\n/**\r\n * Orders Service\r\n * Handles all order-related operations with caching and enhanced features\r\n */\r\nexport class OrdersService {\r\n  // Cache configuration\r\n  private orderCache: Map<string, { order: Order; timestamp: number }> = new Map();\r\n  private ordersListCache: { data: Order[] | null; timestamp: number; params: string } = {\r\n    data: null,\r\n    timestamp: 0,\r\n    params: '',\r\n  };\r\n  private CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n  private rateLimiter = getRateLimiter();\r\n\r\n  /**\r\n   * Get all orders with caching - accepts OrderSearchParams instead of boolean\r\n   */\r\n  async getOrders(params?: OrderSearchParams): Promise<ApiResponse<Order[]>> {\r\n    try {\r\n      // Validate search params\r\n      let validatedParams: OrderSearchParams | undefined;\r\n      if (params) {\r\n        const validation = validateSchema(orderSearchSchema, params);\r\n        if (!validation.success) {\r\n          return {\r\n            success: false,\r\n            error: { message: 'Invalid search parameters' },\r\n          };\r\n        }\r\n        validatedParams = validation.data;\r\n      }\r\n\r\n      // Check cache first\r\n      const paramsString = JSON.stringify(validatedParams || {});\r\n      const now = Date.now();\r\n      \r\n      if (\r\n        this.ordersListCache.data &&\r\n        this.ordersListCache.params === paramsString &&\r\n        now - this.ordersListCache.timestamp < this.CACHE_DURATION\r\n      ) {\r\n        return {\r\n          success: true,\r\n          data: this.ordersListCache.data,\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_ORDERS) {\r\n        const queryParams = new URLSearchParams();\r\n        if (validatedParams) {\r\n          Object.entries(validatedParams).forEach(([key, value]) => {\r\n            if (value !== undefined) {\r\n              queryParams.append(key, String(value));\r\n            }\r\n          });\r\n        }\r\n        \r\n        const response = await apiCall<Order[]>(\r\n          `${API_ENDPOINTS.ORDERS.LIST}?${queryParams.toString()}`\r\n        );\r\n\r\n        if (response.success && response.data) {\r\n          // Sanitize order data\r\n          const sanitizedOrders = response.data.map(order => this.sanitizeOrderData(order));\r\n          \r\n          // Update cache\r\n          this.ordersListCache = {\r\n            data: sanitizedOrders,\r\n            timestamp: now,\r\n            params: paramsString,\r\n          };\r\n          \r\n          return {\r\n            ...response,\r\n            data: sanitizedOrders,\r\n          };\r\n        }\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      let orderHistory = await this.getOrderHistoryFromStorage();\r\n      \r\n      // Apply filters\r\n      if (validatedParams) {\r\n        if (validatedParams.buyer) {\r\n          orderHistory = orderHistory.filter(order => order.buyer === validatedParams.buyer);\r\n        }\r\n        \r\n        if (validatedParams.seller) {\r\n          orderHistory = orderHistory.filter(order => order.seller === validatedParams.seller);\r\n        }\r\n        \r\n        if (validatedParams.status) {\r\n          orderHistory = orderHistory.filter(\r\n            order => order.shippingStatus === validatedParams.status\r\n          );\r\n        }\r\n        \r\n        if (validatedParams.fromDate) {\r\n          orderHistory = orderHistory.filter(\r\n            order => new Date(order.date) >= new Date(validatedParams.fromDate!)\r\n          );\r\n        }\r\n        \r\n        if (validatedParams.toDate) {\r\n          orderHistory = orderHistory.filter(\r\n            order => new Date(order.date) <= new Date(validatedParams.toDate!)\r\n          );\r\n        }\r\n\r\n        // Pagination\r\n        if (validatedParams.page !== undefined && validatedParams.limit) {\r\n          const start = validatedParams.page * validatedParams.limit;\r\n          const end = start + validatedParams.limit;\r\n          \r\n          const paginatedData = orderHistory.slice(start, end);\r\n          \r\n          return {\r\n            success: true,\r\n            data: paginatedData,\r\n            meta: {\r\n              page: validatedParams.page,\r\n              totalPages: Math.ceil(orderHistory.length / validatedParams.limit),\r\n              totalItems: orderHistory.length,\r\n            },\r\n          };\r\n        }\r\n      }\r\n\r\n      // Update cache\r\n      this.ordersListCache = {\r\n        data: orderHistory,\r\n        timestamp: now,\r\n        params: paramsString,\r\n      };\r\n\r\n      return {\r\n        success: true,\r\n        data: orderHistory,\r\n      };\r\n    } catch (error) {\r\n      console.error('Get orders error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get orders' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get single order by ID with caching\r\n   */\r\n  async getOrder(id: string): Promise<ApiResponse<Order | null>> {\r\n    try {\r\n      // Validate ID\r\n      if (!id || typeof id !== 'string' || id.length > 100) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid order ID' },\r\n        };\r\n      }\r\n\r\n      // Check cache first\r\n      const cached = this.orderCache.get(id);\r\n      const now = Date.now();\r\n      \r\n      if (cached && now - cached.timestamp < this.CACHE_DURATION) {\r\n        return {\r\n          success: true,\r\n          data: cached.order,\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_ORDERS) {\r\n        const response = await apiCall<Order>(\r\n          buildApiUrl(API_ENDPOINTS.ORDERS.GET, { id })\r\n        );\r\n\r\n        if (response.success && response.data) {\r\n          const sanitizedOrder = this.sanitizeOrderData(response.data);\r\n          \r\n          // Update cache\r\n          this.orderCache.set(id, { order: sanitizedOrder, timestamp: now });\r\n          \r\n          return {\r\n            ...response,\r\n            data: sanitizedOrder,\r\n          };\r\n        }\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const orderHistory = await this.getOrderHistoryFromStorage();\r\n      const order = orderHistory.find(o => o.id === id);\r\n\r\n      if (order) {\r\n        const sanitizedOrder = this.sanitizeOrderData(order);\r\n        \r\n        // Update cache\r\n        this.orderCache.set(id, { order: sanitizedOrder, timestamp: now });\r\n        \r\n        return {\r\n          success: true,\r\n          data: sanitizedOrder,\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: null,\r\n      };\r\n    } catch (error) {\r\n      console.error('Get order error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get order' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get orders by buyer\r\n   */\r\n  async getOrdersByBuyer(username: string): Promise<ApiResponse<Order[]>> {\r\n    try {\r\n      // Validate username\r\n      const validatedUsername = sanitizeUsername(username);\r\n      if (!validatedUsername || validatedUsername.length < 3 || validatedUsername.length > 30) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid username' },\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_ORDERS) {\r\n        return await apiCall<Order[]>(\r\n          buildApiUrl(API_ENDPOINTS.ORDERS.BY_BUYER, { username: validatedUsername })\r\n        );\r\n      }\r\n\r\n      return this.getOrders({ buyer: validatedUsername });\r\n    } catch (error) {\r\n      console.error('Get orders by buyer error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get buyer orders' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get orders by seller\r\n   */\r\n  async getOrdersBySeller(username: string): Promise<ApiResponse<Order[]>> {\r\n    try {\r\n      // Validate username\r\n      const validatedUsername = sanitizeUsername(username);\r\n      if (!validatedUsername || validatedUsername.length < 3 || validatedUsername.length > 30) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid username' },\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_ORDERS) {\r\n        return await apiCall<Order[]>(\r\n          buildApiUrl(API_ENDPOINTS.ORDERS.BY_SELLER, { username: validatedUsername })\r\n        );\r\n      }\r\n\r\n      return this.getOrders({ seller: validatedUsername });\r\n    } catch (error) {\r\n      console.error('Get orders by seller error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get seller orders' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create new order\r\n   */\r\n  async createOrder(request: CreateOrderRequest): Promise<ApiResponse<Order>> {\r\n    try {\r\n      // Check rate limit\r\n      const rateLimitResult = this.rateLimiter.check(\r\n        `order_create_${request.buyer}`,\r\n        { maxAttempts: 20, windowMs: 60 * 60 * 1000 } // 20 orders per hour\r\n      );\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: `Too many orders. Please wait ${rateLimitResult.waitTime} seconds.` },\r\n        };\r\n      }\r\n\r\n      // Validate and sanitize request\r\n      const validation = validateSchema(createOrderSchema, request);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: { message: Object.values(validation.errors || {})[0] || 'Invalid order data' },\r\n        };\r\n      }\r\n\r\n      const sanitizedRequest = validation.data!;\r\n\r\n      // Additional content security check\r\n      const contentCheck = securityService.checkContentSecurity(\r\n        `${sanitizedRequest.title} ${sanitizedRequest.description}`\r\n      );\r\n      if (!contentCheck.safe) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Order contains prohibited content' },\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_ORDERS) {\r\n        const response = await apiCall<Order>(API_ENDPOINTS.ORDERS.CREATE, {\r\n          method: 'POST',\r\n          body: JSON.stringify(sanitizedRequest),\r\n        });\r\n\r\n        if (response.success) {\r\n          this.invalidateCache();\r\n        }\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const orderHistory = await this.getOrderHistoryFromStorage();\r\n      \r\n      const newOrder: Order = {\r\n        id: uuidv4(),\r\n        title: sanitizedRequest.title,\r\n        description: sanitizedRequest.description,\r\n        price: sanitizedRequest.price,\r\n        markedUpPrice: sanitizedRequest.markedUpPrice,\r\n        imageUrl: sanitizedRequest.imageUrl,\r\n        date: new Date().toISOString(),\r\n        seller: sanitizedRequest.seller,\r\n        buyer: sanitizedRequest.buyer,\r\n        tags: sanitizedRequest.tags,\r\n        wearTime: sanitizedRequest.wearTime,\r\n        wasAuction: sanitizedRequest.wasAuction,\r\n        finalBid: sanitizedRequest.finalBid,\r\n        deliveryAddress: sanitizedRequest.deliveryAddress,\r\n        shippingStatus: sanitizedRequest.shippingStatus || 'pending',\r\n        tierCreditAmount: sanitizedRequest.tierCreditAmount,\r\n        isCustomRequest: sanitizedRequest.isCustomRequest,\r\n        originalRequestId: sanitizedRequest.originalRequestId,\r\n        listingId: sanitizedRequest.listingId,\r\n        listingTitle: sanitizedRequest.listingTitle,\r\n        quantity: sanitizedRequest.quantity,\r\n      };\r\n\r\n      orderHistory.push(newOrder);\r\n      \r\n      // CRITICAL FIX: Save immediately to storage to ensure data is persisted\r\n      await this.saveOrderHistoryToStorage(orderHistory);\r\n      \r\n      // CRITICAL FIX: Invalidate cache immediately so next read gets fresh data\r\n      this.invalidateCache();\r\n      \r\n      console.log('[OrdersService] Order created and saved:', {\r\n        orderId: newOrder.id,\r\n        buyer: newOrder.buyer,\r\n        listingId: newOrder.listingId,\r\n        shippingStatus: newOrder.shippingStatus\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: newOrder,\r\n      };\r\n    } catch (error) {\r\n      console.error('Create order error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to create order' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * NEW: Create order from custom request\r\n   */\r\n  async createOrderFromCustomRequest(request: CustomRequestOrderRequest): Promise<ApiResponse<Order>> {\r\n    try {\r\n      // Check rate limit\r\n      const rateLimitResult = this.rateLimiter.check(\r\n        `custom_request_order_${request.buyer}`,\r\n        { maxAttempts: 10, windowMs: 60 * 60 * 1000 } // 10 custom request orders per hour\r\n      );\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: `Too many custom request orders. Please wait ${rateLimitResult.waitTime} seconds.` },\r\n        };\r\n      }\r\n\r\n      // Validate and sanitize request\r\n      const validation = validateSchema(customRequestOrderSchema, request);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: { message: Object.values(validation.errors || {})[0] || 'Invalid custom request data' },\r\n        };\r\n      }\r\n\r\n      const sanitizedRequest = validation.data!;\r\n\r\n      // Additional content security check\r\n      const contentCheck = securityService.checkContentSecurity(\r\n        `${sanitizedRequest.title} ${sanitizedRequest.description}`\r\n      );\r\n      if (!contentCheck.safe) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Custom request contains prohibited content' },\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_ORDERS) {\r\n        // Use the new custom request endpoint\r\n        const response = await apiCall<Order>('/api/orders/custom-request', {\r\n          method: 'POST',\r\n          body: JSON.stringify(sanitizedRequest),\r\n        });\r\n\r\n        if (response.success) {\r\n          this.invalidateCache();\r\n          \r\n          // Mark the custom request as paid in localStorage\r\n          try {\r\n            const requests = await storageService.getItem<any[]>('panty_custom_requests', []);\r\n            const updatedRequests = requests.map(req => \r\n              req.id === sanitizedRequest.requestId \r\n                ? { ...req, status: 'paid', paid: true, orderId: response.data?.id }\r\n                : req\r\n            );\r\n            await storageService.setItem('panty_custom_requests', updatedRequests);\r\n          } catch (error) {\r\n            console.error('Failed to update custom request status:', error);\r\n          }\r\n        }\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage fallback implementation\r\n      const orderHistory = await this.getOrderHistoryFromStorage();\r\n      \r\n      const newOrder: Order = {\r\n        id: uuidv4(),\r\n        title: sanitizedRequest.title,\r\n        description: sanitizedRequest.description,\r\n        price: sanitizedRequest.price,\r\n        markedUpPrice: Math.round(sanitizedRequest.price * 1.1 * 100) / 100, // 10% markup\r\n        imageUrl: '/api/placeholder/400/300',\r\n        date: new Date().toISOString(),\r\n        seller: sanitizedRequest.seller,\r\n        buyer: sanitizedRequest.buyer,\r\n        tags: sanitizedRequest.tags,\r\n        deliveryAddress: sanitizedRequest.deliveryAddress,\r\n        shippingStatus: 'pending',\r\n        isCustomRequest: true,\r\n        originalRequestId: sanitizedRequest.requestId,\r\n      };\r\n\r\n      orderHistory.push(newOrder);\r\n      await this.saveOrderHistoryToStorage(orderHistory);\r\n      this.invalidateCache();\r\n      \r\n      // Mark the custom request as paid in localStorage\r\n      try {\r\n        const requests = await storageService.getItem<any[]>('panty_custom_requests', []);\r\n        const updatedRequests = requests.map(req => \r\n          req.id === sanitizedRequest.requestId \r\n            ? { ...req, status: 'paid', paid: true, orderId: newOrder.id }\r\n            : req\r\n        );\r\n        await storageService.setItem('panty_custom_requests', updatedRequests);\r\n      } catch (error) {\r\n        console.error('Failed to update custom request status:', error);\r\n      }\r\n\r\n      console.log('[OrdersService] Custom request order created:', {\r\n        orderId: newOrder.id,\r\n        requestId: sanitizedRequest.requestId,\r\n        buyer: newOrder.buyer,\r\n        seller: newOrder.seller\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: newOrder,\r\n      };\r\n    } catch (error) {\r\n      console.error('Create custom request order error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to create order from custom request' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update order status\r\n   */\r\n  async updateOrderStatus(\r\n    id: string,\r\n    update: UpdateOrderStatusRequest | { shippingStatus?: 'pending' | 'processing' | 'shipped' | 'pending-auction'; [key: string]: any }\r\n  ): Promise<ApiResponse<Order>> {\r\n    try {\r\n      // Validate ID\r\n      if (!id || typeof id !== 'string' || id.length > 100) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid order ID' },\r\n        };\r\n      }\r\n\r\n      // For backward compatibility, accept both forms\r\n      const statusUpdate = update.shippingStatus ? { shippingStatus: update.shippingStatus } : update;\r\n\r\n      // Validate and sanitize update\r\n      const validation = validateSchema(updateOrderStatusSchema, statusUpdate);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid status update data' },\r\n        };\r\n      }\r\n\r\n      const sanitizedUpdate = validation.data!;\r\n\r\n      if (FEATURES.USE_API_ORDERS) {\r\n        const response = await apiCall<Order>(\r\n          buildApiUrl(API_ENDPOINTS.ORDERS.UPDATE_STATUS, { id }),\r\n          {\r\n            method: 'PATCH',\r\n            body: JSON.stringify(sanitizedUpdate),\r\n          }\r\n        );\r\n\r\n        if (response.success) {\r\n          this.invalidateCache();\r\n        }\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const orderHistory = await this.getOrderHistoryFromStorage();\r\n      const orderIndex = orderHistory.findIndex(o => o.id === id);\r\n\r\n      if (orderIndex === -1) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Order not found' },\r\n        };\r\n      }\r\n\r\n      // Update the order with all properties from update\r\n      orderHistory[orderIndex] = {\r\n        ...orderHistory[orderIndex],\r\n        ...update,\r\n      };\r\n\r\n      await this.saveOrderHistoryToStorage(orderHistory);\r\n\r\n      // Invalidate cache\r\n      this.invalidateCache();\r\n\r\n      return {\r\n        success: true,\r\n        data: orderHistory[orderIndex],\r\n      };\r\n    } catch (error) {\r\n      console.error('Update order status error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to update order status' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update order delivery address\r\n   */\r\n  async updateOrderAddress(\r\n    id: string,\r\n    address: DeliveryAddress\r\n  ): Promise<boolean> {\r\n    try {\r\n      // Validate ID\r\n      if (!id || typeof id !== 'string' || id.length > 100) {\r\n        console.error('[OrdersService] Invalid order ID');\r\n        return false;\r\n      }\r\n\r\n      // Validate and sanitize address\r\n      const validation = validateSchema(deliveryAddressSchema, address);\r\n      if (!validation.success) {\r\n        console.error('[OrdersService] Invalid address:', validation.errors);\r\n        return false;\r\n      }\r\n\r\n      const sanitizedAddress = validation.data!;\r\n\r\n      if (FEATURES.USE_API_ORDERS) {\r\n        // Call the new dedicated endpoint for address updates\r\n        const response = await apiCall<Order>(\r\n          `${buildApiUrl(API_ENDPOINTS.ORDERS.GET, { id })}/address`,\r\n          {\r\n            method: 'PUT',\r\n            body: JSON.stringify({ deliveryAddress: sanitizedAddress }),\r\n          }\r\n        );\r\n\r\n        if (response.success) {\r\n          this.invalidateCache();\r\n          console.log('[OrdersService] Address updated via API');\r\n          return true;\r\n        }\r\n\r\n        console.error('[OrdersService] API address update failed:', response.error);\r\n        return false;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const orderHistory = await this.getOrderHistoryFromStorage();\r\n      const orderIndex = orderHistory.findIndex(o => o.id === id);\r\n\r\n      if (orderIndex === -1) {\r\n        console.error('[OrdersService] Order not found');\r\n        return false;\r\n      }\r\n\r\n      orderHistory[orderIndex] = {\r\n        ...orderHistory[orderIndex],\r\n        deliveryAddress: sanitizedAddress,\r\n      };\r\n\r\n      await this.saveOrderHistoryToStorage(orderHistory);\r\n\r\n      // Invalidate cache\r\n      this.invalidateCache();\r\n      \r\n      console.log('[OrdersService] Address updated in localStorage');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('[OrdersService] Update order address error:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get order statistics\r\n   */\r\n  async getOrderStats(username: string, role: 'buyer' | 'seller'): Promise<{\r\n    totalOrders: number;\r\n    totalAmount: number;\r\n    pendingOrders: number;\r\n    shippedOrders: number;\r\n    averageOrderValue: number;\r\n  }> {\r\n    // Validate username\r\n    const validatedUsername = sanitizeUsername(username);\r\n    if (!validatedUsername) {\r\n      return {\r\n        totalOrders: 0,\r\n        totalAmount: 0,\r\n        pendingOrders: 0,\r\n        shippedOrders: 0,\r\n        averageOrderValue: 0,\r\n      };\r\n    }\r\n\r\n    const params = role === 'buyer' ? { buyer: validatedUsername } : { seller: validatedUsername };\r\n    const result = await this.getOrders(params);\r\n    \r\n    if (!result.success || !result.data) {\r\n      return {\r\n        totalOrders: 0,\r\n        totalAmount: 0,\r\n        pendingOrders: 0,\r\n        shippedOrders: 0,\r\n        averageOrderValue: 0,\r\n      };\r\n    }\r\n\r\n    const orders = result.data;\r\n    const totalAmount = orders.reduce((sum, order) => sum + (order.markedUpPrice || order.price), 0);\r\n\r\n    return {\r\n      totalOrders: orders.length,\r\n      totalAmount,\r\n      pendingOrders: orders.filter(o => !o.shippingStatus || o.shippingStatus === 'pending').length,\r\n      shippedOrders: orders.filter(o => o.shippingStatus === 'shipped').length,\r\n      averageOrderValue: orders.length > 0 ? totalAmount / orders.length : 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Batch update order statuses\r\n   */\r\n  async batchUpdateOrderStatuses(\r\n    orderIds: string[],\r\n    status: 'pending' | 'processing' | 'shipped'\r\n  ): Promise<{ successful: string[]; failed: string[] }> {\r\n    const successful: string[] = [];\r\n    const failed: string[] = [];\r\n\r\n    // Validate order IDs\r\n    const validOrderIds = orderIds.filter(id => \r\n      id && typeof id === 'string' && id.length <= 100\r\n    );\r\n\r\n    for (const orderId of validOrderIds) {\r\n      const result = await this.updateOrderStatus(orderId, { shippingStatus: status });\r\n      if (result.success) {\r\n        successful.push(orderId);\r\n      } else {\r\n        failed.push(orderId);\r\n      }\r\n    }\r\n\r\n    return { successful, failed };\r\n  }\r\n\r\n  /**\r\n   * Export orders to CSV with security\r\n   */\r\n  async exportOrdersToCSV(params?: OrderSearchParams): Promise<string> {\r\n    const result = await this.getOrders(params);\r\n    if (!result.success || !result.data) {\r\n      throw new Error('Failed to fetch orders for export');\r\n    }\r\n\r\n    const orders = result.data;\r\n    const headers = [\r\n      'Order ID',\r\n      'Date',\r\n      'Buyer',\r\n      'Seller',\r\n      'Title',\r\n      'Price',\r\n      'Marked Up Price',\r\n      'Status',\r\n      'Type',\r\n    ];\r\n\r\n    // Sanitize data for CSV to prevent injection\r\n    const sanitizeForCSV = (value: any): string => {\r\n      const str = String(value);\r\n      // Remove any formula injection attempts\r\n      if (/^[=+\\-@]/.test(str)) {\r\n        return `'${str}`;\r\n      }\r\n      // Escape quotes\r\n      return str.replace(/\"/g, '\"\"');\r\n    };\r\n\r\n    const rows = orders.map(order => [\r\n      sanitizeForCSV(order.id),\r\n      sanitizeForCSV(new Date(order.date).toLocaleDateString()),\r\n      sanitizeForCSV(order.buyer),\r\n      sanitizeForCSV(order.seller),\r\n      sanitizeForCSV(order.title),\r\n      sanitizeForCSV(order.price.toFixed(2)),\r\n      sanitizeForCSV(order.markedUpPrice.toFixed(2)),\r\n      sanitizeForCSV(order.shippingStatus || 'pending'),\r\n      sanitizeForCSV(order.wasAuction ? 'Auction' : order.isCustomRequest ? 'Custom' : 'Direct'),\r\n    ]);\r\n\r\n    const csv = [\r\n      headers.map(h => `\"${h}\"`).join(','),\r\n      ...rows.map(row => row.map(cell => `\"${cell}\"`).join(',')),\r\n    ].join('\\n');\r\n\r\n    return csv;\r\n  }\r\n\r\n  /**\r\n   * Generate idempotency key for order\r\n   */\r\n  generateIdempotencyKey(buyer: string, seller: string, listingId: string): string {\r\n    const sanitizedBuyer = sanitizeUsername(buyer);\r\n    const sanitizedSeller = sanitizeUsername(seller);\r\n    const sanitizedListingId = sanitizeStrict(listingId);\r\n    return `order_${sanitizedBuyer}_${sanitizedSeller}_${sanitizedListingId}_${Date.now()}`;\r\n  }\r\n\r\n  /**\r\n   * Check if order exists (for idempotency)\r\n   */\r\n  async checkOrderExists(idempotencyKey: string): Promise<boolean> {\r\n    try {\r\n      const processedOrders = await storageService.getItem<string[]>(\r\n        'processed_orders',\r\n        []\r\n      );\r\n      return processedOrders.includes(idempotencyKey);\r\n    } catch (error) {\r\n      console.error('Check order exists error:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark order as processed (for idempotency)\r\n   */\r\n  async markOrderProcessed(idempotencyKey: string): Promise<void> {\r\n    try {\r\n      const processedOrders = await storageService.getItem<string[]>(\r\n        'processed_orders',\r\n        []\r\n      );\r\n      processedOrders.push(idempotencyKey);\r\n      await storageService.setItem('processed_orders', processedOrders);\r\n    } catch (error) {\r\n      console.error('Mark order processed error:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear cache\r\n   */\r\n  clearCache(): void {\r\n    this.orderCache.clear();\r\n    this.invalidateCache();\r\n  }\r\n\r\n  /**\r\n   * Add this method to force clear cache and sync\r\n   */\r\n  public async forceSync(): Promise<void> {\r\n    this.clearCache();\r\n    \r\n    // Force a storage event to trigger updates in other contexts\r\n    const orders = await this.getOrderHistoryFromStorage();\r\n    window.dispatchEvent(new StorageEvent('storage', {\r\n      key: 'wallet_orders',\r\n      newValue: JSON.stringify(orders),\r\n      url: window.location.href\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Invalidate list cache\r\n   */\r\n  private invalidateCache(): void {\r\n    this.ordersListCache = {\r\n      data: null,\r\n      timestamp: 0,\r\n      params: '',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sanitize order data\r\n   */\r\n  private sanitizeOrderData(order: Order): Order {\r\n    return {\r\n      ...order,\r\n      title: sanitizeStrict(order.title),\r\n      description: sanitizeStrict(order.description),\r\n      seller: sanitizeUsername(order.seller),\r\n      buyer: sanitizeUsername(order.buyer),\r\n      price: sanitizeCurrency(order.price),\r\n      markedUpPrice: sanitizeCurrency(order.markedUpPrice),\r\n      imageUrl: order.imageUrl ? sanitizeUrl(order.imageUrl) : undefined,\r\n      tags: order.tags?.map(tag => sanitizeStrict(tag)),\r\n      wearTime: order.wearTime ? sanitizeStrict(order.wearTime) : undefined,\r\n      listingTitle: order.listingTitle ? sanitizeStrict(order.listingTitle) : undefined,\r\n      finalBid: order.finalBid ? sanitizeCurrency(order.finalBid) : undefined,\r\n      tierCreditAmount: order.tierCreditAmount ? sanitizeCurrency(order.tierCreditAmount) : undefined,\r\n    };\r\n  }\r\n\r\n  // Helper methods for localStorage\r\n  private async getOrderHistoryFromStorage(): Promise<Order[]> {\r\n    // FIXED: Use the same key as WalletContext: 'wallet_orders'\r\n    const orders = await storageService.getItem<Order[]>('wallet_orders', []);\r\n    // Sanitize all orders when loading from storage\r\n    return orders.map(order => this.sanitizeOrderData(order));\r\n  }\r\n\r\n  private async saveOrderHistoryToStorage(orders: Order[]): Promise<void> {\r\n    // Sanitize before saving\r\n    const sanitizedOrders = orders.map(order => this.sanitizeOrderData(order));\r\n    // FIXED: Use the same key as WalletContext: 'wallet_orders'\r\n    await storageService.setItem('wallet_orders', sanitizedOrders);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const ordersService = new OrdersService();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7510, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/messages.service.ts"],"sourcesContent":["// src/services/messages.service.ts\r\n\r\nimport { storageService } from './storage.service';\r\nimport { FEATURES, API_ENDPOINTS, buildApiUrl, apiCall, ApiResponse } from './api.config';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { securityService } from './security.service';\r\nimport { sanitizeStrict, sanitizeEmail, sanitizeObject } from '@/utils/security/sanitization';\r\nimport { getRateLimiter, RATE_LIMITS } from '@/utils/security/rate-limiter';\r\nimport { messageSchemas, validateSchema } from '@/utils/validation/schemas';\r\nimport { z } from 'zod';\r\n\r\nexport interface Message {\r\n  id?: string;\r\n  sender: string;\r\n  receiver: string;\r\n  content: string;\r\n  date: string;\r\n  isRead?: boolean;\r\n  read?: boolean;\r\n  type?: 'normal' | 'customRequest' | 'image' | 'tip';\r\n  meta?: {\r\n    id?: string;\r\n    title?: string;\r\n    price?: number;\r\n    tags?: string[];\r\n    message?: string;\r\n    imageUrl?: string;\r\n    tipAmount?: number;\r\n  };\r\n  attachments?: MessageAttachment[];\r\n  threadId?: string;\r\n}\r\n\r\nexport interface MessageAttachment {\r\n  id: string;\r\n  type: 'image' | 'file';\r\n  url: string;\r\n  name?: string;\r\n  size?: number;\r\n  mimeType?: string;\r\n}\r\n\r\nexport interface MessageThread {\r\n  id: string;\r\n  participants: [string, string];\r\n  messages: Message[];\r\n  lastMessage: Message;\r\n  unreadCount: number;\r\n  updatedAt: string;\r\n  blockedBy?: string[];\r\n  metadata?: {\r\n    [key: string]: any;\r\n  };\r\n}\r\n\r\nexport interface SendMessageRequest {\r\n  sender: string;\r\n  receiver: string;\r\n  content: string;\r\n  type?: 'normal' | 'customRequest' | 'image' | 'tip';\r\n  meta?: Message['meta'];\r\n  attachments?: MessageAttachment[];\r\n}\r\n\r\nexport interface BlockUserRequest {\r\n  blocker: string;\r\n  blocked: string;\r\n}\r\n\r\nexport interface ReportUserRequest {\r\n  reporter: string;\r\n  reportee: string;\r\n  reason?: string;\r\n  messages?: Message[];\r\n  category?: 'harassment' | 'spam' | 'inappropriate_content' | 'scam' | 'other';\r\n}\r\n\r\nexport interface MessageNotification {\r\n  buyer: string;\r\n  messageCount: number;\r\n  lastMessage: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface CustomRequestData {\r\n  id: string;\r\n  buyer: string;\r\n  seller: string;\r\n  title: string;\r\n  description: string;\r\n  price: number;\r\n  tags: string[];\r\n  status: 'pending' | 'accepted' | 'rejected' | 'edited' | 'paid';\r\n  date: string;\r\n  messageThreadId?: string;\r\n  lastModifiedBy?: string;\r\n  originalMessageId?: string;\r\n  paid?: boolean;\r\n}\r\n\r\n// Validation schemas\r\nconst sendMessageSchema = z.object({\r\n  sender: z.string().min(1).max(30).transform(sanitizeStrict),\r\n  receiver: z.string().min(1).max(30).transform(sanitizeStrict),\r\n  content: messageSchemas.messageContent,\r\n  type: z.enum(['normal', 'customRequest', 'image', 'tip']).optional(),\r\n  meta: z.object({\r\n    id: z.string().optional(),\r\n    title: z.string().max(100).transform(sanitizeStrict).optional(),\r\n    price: z.number().positive().max(10000).optional(),\r\n    tags: z.array(z.string().max(30).transform(sanitizeStrict)).max(10).optional(),\r\n    message: z.string().max(500).transform(sanitizeStrict).optional(),\r\n    imageUrl: z.string().url().optional(),\r\n    tipAmount: z.number().positive().max(500).optional(),\r\n  }).optional(),\r\n  attachments: z.array(z.object({\r\n    id: z.string(),\r\n    type: z.enum(['image', 'file']),\r\n    url: z.string(),\r\n    name: z.string().max(255).optional(),\r\n    size: z.number().positive().optional(),\r\n    mimeType: z.string().optional(),\r\n  })).max(10).optional(),\r\n});\r\n\r\nconst blockUserSchema = z.object({\r\n  blocker: z.string().min(1).max(30).transform(sanitizeStrict),\r\n  blocked: z.string().min(1).max(30).transform(sanitizeStrict),\r\n});\r\n\r\nconst reportUserSchema = z.object({\r\n  reporter: z.string().min(1).max(30).transform(sanitizeStrict),\r\n  reportee: z.string().min(1).max(30).transform(sanitizeStrict),\r\n  reason: z.string().max(500).transform(sanitizeStrict).optional(),\r\n  messages: z.array(z.any()).optional(),\r\n  category: z.enum(['harassment', 'spam', 'inappropriate_content', 'scam', 'other']).optional(),\r\n});\r\n\r\n/**\r\n * Messages Service\r\n * Handles all messaging operations and prepares for real-time integration\r\n */\r\nexport class MessagesService {\r\n  private messageCache: Map<string, Message[]> = new Map();\r\n  private threadCache: Map<string, MessageThread> = new Map();\r\n  private wsReady: boolean = false;\r\n  private messageListeners: Map<string, Set<(message: Message) => void>> = new Map();\r\n  private rateLimiter = getRateLimiter();\r\n\r\n  /**\r\n   * Initialize the service\r\n   */\r\n  async initialize(): Promise<void> {\r\n    try {\r\n      // Pre-load message data into cache\r\n      const messages = await this.getAllMessages();\r\n      for (const [key, msgs] of Object.entries(messages)) {\r\n        this.messageCache.set(key, msgs);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to initialize messages service:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all message threads for a user\r\n   */\r\n  async getThreads(username: string, role?: 'buyer' | 'seller'): Promise<ApiResponse<MessageThread[]>> {\r\n    try {\r\n      // Validate and sanitize username\r\n      const sanitizedUsername = sanitizeStrict(username);\r\n      if (!sanitizedUsername || sanitizedUsername.length > 30) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid username' },\r\n        };\r\n      }\r\n\r\n      // Check rate limit\r\n      const rateLimitResult = this.rateLimiter.check('API_CALL', RATE_LIMITS.API_CALL);\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: `Rate limit exceeded. Please wait ${rateLimitResult.waitTime} seconds.` },\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_MESSAGES) {\r\n        const url = `${API_ENDPOINTS.MESSAGES.THREADS}?username=${encodeURIComponent(sanitizedUsername)}${role ? `&role=${role}` : ''}`;\r\n        return await apiCall<MessageThread[]>(url);\r\n      }\r\n\r\n      // LocalStorage implementation with caching\r\n      const cacheKey = `threads_${sanitizedUsername}_${role || 'all'}`;\r\n      const cached = this.threadCache.get(cacheKey);\r\n      \r\n      if (cached && this.isCacheValid(cached.updatedAt)) {\r\n        return { success: true, data: [cached] };\r\n      }\r\n\r\n      const messages = await this.getAllMessages();\r\n      const threads: { [key: string]: MessageThread } = {};\r\n\r\n      // Group messages into threads\r\n      for (const [conversationKey, messageList] of Object.entries(messages)) {\r\n        if (conversationKey.includes(sanitizedUsername)) {\r\n          const participants = conversationKey.split('-') as [string, string];\r\n          const otherParty = participants.find(p => p !== sanitizedUsername) || '';\r\n          \r\n          // Filter by role if specified\r\n          if (role && messageList.length > 0) {\r\n            const isRelevantThread = await this.isThreadRelevantForRole(sanitizedUsername, otherParty, role);\r\n            if (!isRelevantThread) continue;\r\n          }\r\n          \r\n          if (messageList.length > 0) {\r\n            const threadId = conversationKey;\r\n            const blockedBy = await this.getBlockedStatus(participants[0], participants[1]);\r\n            \r\n            threads[threadId] = {\r\n              id: threadId,\r\n              participants,\r\n              messages: messageList,\r\n              lastMessage: messageList[messageList.length - 1],\r\n              unreadCount: messageList.filter(\r\n                m => m.receiver === sanitizedUsername && !m.isRead && !m.read\r\n              ).length,\r\n              updatedAt: messageList[messageList.length - 1].date,\r\n              blockedBy,\r\n              metadata: await this.getThreadMetadata(threadId),\r\n            };\r\n          }\r\n        }\r\n      }\r\n\r\n      // Sort threads by last message date\r\n      const sortedThreads = Object.values(threads).sort(\r\n        (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\r\n      );\r\n\r\n      // Update cache\r\n      sortedThreads.forEach(thread => {\r\n        this.threadCache.set(thread.id, thread);\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: sortedThreads,\r\n      };\r\n    } catch (error) {\r\n      console.error('Get threads error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get message threads' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get messages between two users\r\n   */\r\n  async getThread(userA: string, userB: string): Promise<ApiResponse<Message[]>> {\r\n    try {\r\n      // Validate and sanitize usernames\r\n      const sanitizedUserA = sanitizeStrict(userA);\r\n      const sanitizedUserB = sanitizeStrict(userB);\r\n      \r\n      if (!sanitizedUserA || !sanitizedUserB || \r\n          sanitizedUserA.length > 30 || sanitizedUserB.length > 30) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid usernames' },\r\n        };\r\n      }\r\n\r\n      const threadId = this.getConversationKey(sanitizedUserA, sanitizedUserB);\r\n      \r\n      if (FEATURES.USE_API_MESSAGES) {\r\n        return await apiCall<Message[]>(\r\n          buildApiUrl(API_ENDPOINTS.MESSAGES.THREAD, { threadId })\r\n        );\r\n      }\r\n\r\n      // Check cache first\r\n      const cached = this.messageCache.get(threadId);\r\n      if (cached) {\r\n        return { success: true, data: cached };\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const messages = await this.getAllMessages();\r\n      const threadMessages = messages[threadId] || [];\r\n      \r\n      // Update cache\r\n      this.messageCache.set(threadId, threadMessages);\r\n\r\n      return {\r\n        success: true,\r\n        data: threadMessages,\r\n      };\r\n    } catch (error) {\r\n      console.error('Get thread error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to get message thread' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a message\r\n   */\r\n  async sendMessage(request: SendMessageRequest): Promise<ApiResponse<Message>> {\r\n    try {\r\n      // Validate and sanitize request\r\n      const validation = validateSchema(sendMessageSchema, request);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: { message: Object.values(validation.errors || {})[0] || 'Invalid message data' },\r\n        };\r\n      }\r\n\r\n      const sanitizedRequest = validation.data!;\r\n\r\n      // Check rate limit for message sending\r\n      const rateLimitResult = this.rateLimiter.check(\r\n        `message_send_${sanitizedRequest.sender}`, \r\n        RATE_LIMITS.MESSAGE_SEND\r\n      );\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: `Too many messages. Please wait ${rateLimitResult.waitTime} seconds.` },\r\n        };\r\n      }\r\n\r\n      // Additional content security check\r\n      const contentCheck = securityService.checkContentSecurity(sanitizedRequest.content);\r\n      if (!contentCheck.safe) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Message contains prohibited content' },\r\n        };\r\n      }\r\n\r\n      const conversationKey = this.getConversationKey(sanitizedRequest.sender, sanitizedRequest.receiver);\r\n\r\n      if (FEATURES.USE_API_MESSAGES) {\r\n        const response = await apiCall<Message>(API_ENDPOINTS.MESSAGES.SEND, {\r\n          method: 'POST',\r\n          body: JSON.stringify(sanitizedRequest),\r\n        });\r\n\r\n        if (response.success && response.data) {\r\n          // Update local cache\r\n          const messages = await this.getAllMessages();\r\n          if (!messages[conversationKey]) {\r\n            messages[conversationKey] = [];\r\n          }\r\n          messages[conversationKey].push(response.data);\r\n          await storageService.setItem('panty_messages', messages);\r\n          \r\n          // Update cache\r\n          this.messageCache.set(conversationKey, messages[conversationKey]);\r\n          \r\n          // Notify listeners\r\n          this.notifyMessageListeners(conversationKey, response.data);\r\n        }\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const messages = await this.getAllMessages();\r\n      \r\n      const newMessage: Message = {\r\n        id: uuidv4(),\r\n        sender: sanitizedRequest.sender,\r\n        receiver: sanitizedRequest.receiver,\r\n        content: sanitizedRequest.content,\r\n        date: new Date().toISOString(),\r\n        isRead: false,\r\n        read: false,\r\n        type: sanitizedRequest.type || 'normal',\r\n        meta: sanitizedRequest.meta,\r\n        attachments: sanitizedRequest.attachments,\r\n        threadId: conversationKey,\r\n      };\r\n\r\n      if (!messages[conversationKey]) {\r\n        messages[conversationKey] = [];\r\n      }\r\n      \r\n      messages[conversationKey].push(newMessage);\r\n      await storageService.setItem('panty_messages', messages);\r\n\r\n      // Update cache\r\n      this.messageCache.set(conversationKey, [...(this.messageCache.get(conversationKey) || []), newMessage]);\r\n\r\n      // Update notifications if needed\r\n      if (sanitizedRequest.type !== 'customRequest') {\r\n        await this.updateMessageNotifications(\r\n          sanitizedRequest.receiver, \r\n          sanitizedRequest.sender, \r\n          sanitizedRequest.content\r\n        );\r\n      }\r\n\r\n      // Notify listeners (preparation for real-time)\r\n      this.notifyMessageListeners(conversationKey, newMessage);\r\n\r\n      return {\r\n        success: true,\r\n        data: newMessage,\r\n      };\r\n    } catch (error) {\r\n      console.error('Send message error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to send message' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a custom request\r\n   */\r\n  async sendCustomRequest(\r\n    buyer: string,\r\n    seller: string,\r\n    requestData: Omit<CustomRequestData, 'id' | 'date' | 'status'>\r\n  ): Promise<ApiResponse<Message>> {\r\n    // Validate custom request data\r\n    const validation = validateSchema(messageSchemas.customRequest, {\r\n      title: requestData.title,\r\n      description: requestData.description,\r\n      price: requestData.price,\r\n    });\r\n\r\n    if (!validation.success) {\r\n      return {\r\n        success: false,\r\n        error: { message: Object.values(validation.errors || {})[0] || 'Invalid request data' },\r\n      };\r\n    }\r\n\r\n    const sanitizedData = validation.data!;\r\n\r\n    // Sanitize tags\r\n    const sanitizedTags = requestData.tags\r\n      .slice(0, 10)\r\n      .map(tag => sanitizeStrict(tag).substring(0, 30))\r\n      .filter(tag => tag.length > 0);\r\n\r\n    const request: SendMessageRequest = {\r\n      sender: buyer,\r\n      receiver: seller,\r\n      content: `📦 Custom Request: ${sanitizedData.title} - $${sanitizedData.price}`,\r\n      type: 'customRequest',\r\n      meta: {\r\n        id: uuidv4(),\r\n        title: sanitizedData.title,\r\n        price: sanitizedData.price,\r\n        tags: sanitizedTags,\r\n        message: sanitizedData.description,\r\n      },\r\n    };\r\n\r\n    return this.sendMessage(request);\r\n  }\r\n\r\n  /**\r\n   * Mark messages as read - FIXED VERSION\r\n   */\r\n  async markMessagesAsRead(\r\n    username: string,\r\n    otherParty: string\r\n  ): Promise<ApiResponse<void>> {\r\n    try {\r\n      // Validate and sanitize usernames\r\n      const sanitizedUsername = sanitizeStrict(username);\r\n      const sanitizedOtherParty = sanitizeStrict(otherParty);\r\n      \r\n      if (!sanitizedUsername || !sanitizedOtherParty || \r\n          sanitizedUsername.length > 30 || sanitizedOtherParty.length > 30) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid usernames' },\r\n        };\r\n      }\r\n\r\n      const conversationKey = this.getConversationKey(sanitizedUsername, sanitizedOtherParty);\r\n      \r\n      if (FEATURES.USE_API_MESSAGES) {\r\n        // Get messages first to get their IDs\r\n        const messages = await this.getAllMessages();\r\n        const threadMessages = messages[conversationKey] || [];\r\n        \r\n        // Get IDs of unread messages where current user is receiver\r\n        const messageIds = threadMessages\r\n          .filter(msg => msg.receiver === sanitizedUsername && !msg.isRead && !msg.read)\r\n          .map(msg => msg.id)\r\n          .filter((id): id is string => id !== undefined);\r\n        \r\n        if (messageIds.length === 0) {\r\n          return { success: true }; // No messages to mark as read\r\n        }\r\n        \r\n        // Send the messageIds array that backend expects\r\n        const response = await apiCall<void>(API_ENDPOINTS.MESSAGES.MARK_READ, {\r\n          method: 'POST',\r\n          body: JSON.stringify({ messageIds }),\r\n        });\r\n\r\n        if (response.success) {\r\n          // Update local storage after successful API call\r\n          const updatedMessages = await this.getAllMessages();\r\n          if (updatedMessages[conversationKey]) {\r\n            updatedMessages[conversationKey] = updatedMessages[conversationKey].map(msg => {\r\n              if (msg.receiver === sanitizedUsername && msg.sender === sanitizedOtherParty) {\r\n                return { ...msg, isRead: true, read: true };\r\n              }\r\n              return msg;\r\n            });\r\n            \r\n            await storageService.setItem('panty_messages', updatedMessages);\r\n            this.messageCache.set(conversationKey, updatedMessages[conversationKey]);\r\n          }\r\n          \r\n          // Clear notifications\r\n          await this.clearMessageNotifications(sanitizedUsername, sanitizedOtherParty);\r\n        }\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const messages = await this.getAllMessages();\r\n      \r\n      if (messages[conversationKey]) {\r\n        messages[conversationKey] = messages[conversationKey].map(msg => {\r\n          if (msg.receiver === sanitizedUsername && msg.sender === sanitizedOtherParty) {\r\n            return { ...msg, isRead: true, read: true };\r\n          }\r\n          return msg;\r\n        });\r\n        \r\n        await storageService.setItem('panty_messages', messages);\r\n        \r\n        // Update cache\r\n        this.messageCache.set(conversationKey, messages[conversationKey]);\r\n      }\r\n\r\n      // Clear notifications\r\n      await this.clearMessageNotifications(sanitizedUsername, sanitizedOtherParty);\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Mark messages as read error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to mark messages as read' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Block a user\r\n   */\r\n  async blockUser(request: BlockUserRequest): Promise<ApiResponse<void>> {\r\n    try {\r\n      // Validate and sanitize request\r\n      const validation = validateSchema(blockUserSchema, request);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid block request' },\r\n        };\r\n      }\r\n\r\n      const sanitizedRequest = validation.data!;\r\n\r\n      // Check rate limit\r\n      const rateLimitResult = this.rateLimiter.check(\r\n        `block_user_${sanitizedRequest.blocker}`,\r\n        { maxAttempts: 10, windowMs: 60 * 60 * 1000 } // 10 blocks per hour\r\n      );\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Too many block attempts. Please try again later.' },\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_MESSAGES) {\r\n        return await apiCall<void>(API_ENDPOINTS.MESSAGES.BLOCK_USER, {\r\n          method: 'POST',\r\n          body: JSON.stringify(sanitizedRequest),\r\n        });\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const blocked = await storageService.getItem<{ [user: string]: string[] }>('panty_blocked', {});\r\n      \r\n      if (!blocked[sanitizedRequest.blocker]) {\r\n        blocked[sanitizedRequest.blocker] = [];\r\n      }\r\n      \r\n      if (!blocked[sanitizedRequest.blocker].includes(sanitizedRequest.blocked)) {\r\n        blocked[sanitizedRequest.blocker].push(sanitizedRequest.blocked);\r\n        await storageService.setItem('panty_blocked', blocked);\r\n      }\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Block user error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to block user' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unblock a user\r\n   */\r\n  async unblockUser(request: BlockUserRequest): Promise<ApiResponse<void>> {\r\n    try {\r\n      // Validate and sanitize request\r\n      const validation = validateSchema(blockUserSchema, request);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Invalid unblock request' },\r\n        };\r\n      }\r\n\r\n      const sanitizedRequest = validation.data!;\r\n\r\n      if (FEATURES.USE_API_MESSAGES) {\r\n        return await apiCall<void>(API_ENDPOINTS.MESSAGES.UNBLOCK_USER, {\r\n          method: 'POST',\r\n          body: JSON.stringify(sanitizedRequest),\r\n        });\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const blocked = await storageService.getItem<{ [user: string]: string[] }>('panty_blocked', {});\r\n      \r\n      if (blocked[sanitizedRequest.blocker]) {\r\n        blocked[sanitizedRequest.blocker] = blocked[sanitizedRequest.blocker].filter(\r\n          u => u !== sanitizedRequest.blocked\r\n        );\r\n        await storageService.setItem('panty_blocked', blocked);\r\n      }\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Unblock user error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to unblock user' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user is blocked\r\n   */\r\n  async isBlocked(blocker: string, blocked: string): Promise<boolean> {\r\n    try {\r\n      // Sanitize usernames\r\n      const sanitizedBlocker = sanitizeStrict(blocker);\r\n      const sanitizedBlocked = sanitizeStrict(blocked);\r\n      \r\n      if (!sanitizedBlocker || !sanitizedBlocked) {\r\n        return false;\r\n      }\r\n\r\n      const blocks = await storageService.getItem<{ [user: string]: string[] }>('panty_blocked', {});\r\n      return blocks[sanitizedBlocker]?.includes(sanitizedBlocked) || false;\r\n    } catch (error) {\r\n      console.error('Check blocked error:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report a user\r\n   */\r\n  async reportUser(request: ReportUserRequest): Promise<ApiResponse<void>> {\r\n    try {\r\n      // Validate and sanitize request\r\n      const validation = validateSchema(reportUserSchema, request);\r\n      if (!validation.success) {\r\n        return {\r\n          success: false,\r\n          error: { message: Object.values(validation.errors || {})[0] || 'Invalid report' },\r\n        };\r\n      }\r\n\r\n      const sanitizedRequest = validation.data!;\r\n\r\n      // Check rate limit for reporting\r\n      const rateLimitResult = this.rateLimiter.check(\r\n        `report_user_${sanitizedRequest.reporter}`,\r\n        { maxAttempts: 5, windowMs: 24 * 60 * 60 * 1000 } // 5 reports per day\r\n      );\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: 'Too many reports. Please try again tomorrow.' },\r\n        };\r\n      }\r\n\r\n      if (FEATURES.USE_API_MESSAGES) {\r\n        return await apiCall<void>(API_ENDPOINTS.MESSAGES.REPORT, {\r\n          method: 'POST',\r\n          body: JSON.stringify(sanitizedRequest),\r\n        });\r\n      }\r\n\r\n      // LocalStorage implementation\r\n      const reports = await storageService.getItem<any[]>('panty_report_logs', []);\r\n      \r\n      const newReport = {\r\n        id: uuidv4(),\r\n        reporter: sanitizedRequest.reporter,\r\n        reportee: sanitizedRequest.reportee,\r\n        reason: sanitizedRequest.reason,\r\n        messages: sanitizedRequest.messages || [],\r\n        date: new Date().toISOString(),\r\n        processed: false,\r\n        category: sanitizedRequest.category || 'other',\r\n      };\r\n      \r\n      reports.push(newReport);\r\n      await storageService.setItem('panty_report_logs', reports);\r\n\r\n      // Mark as reported\r\n      const reported = await storageService.getItem<{ [user: string]: string[] }>('panty_reported', {});\r\n      \r\n      if (!reported[sanitizedRequest.reporter]) {\r\n        reported[sanitizedRequest.reporter] = [];\r\n      }\r\n      \r\n      if (!reported[sanitizedRequest.reporter].includes(sanitizedRequest.reportee)) {\r\n        reported[sanitizedRequest.reporter].push(sanitizedRequest.reportee);\r\n        await storageService.setItem('panty_reported', reported);\r\n      }\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Report user error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to report user' },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user has been reported\r\n   */\r\n  async hasReported(reporter: string, reportee: string): Promise<boolean> {\r\n    try {\r\n      // Sanitize usernames\r\n      const sanitizedReporter = sanitizeStrict(reporter);\r\n      const sanitizedReportee = sanitizeStrict(reportee);\r\n      \r\n      if (!sanitizedReporter || !sanitizedReportee) {\r\n        return false;\r\n      }\r\n\r\n      const reported = await storageService.getItem<{ [user: string]: string[] }>('panty_reported', {});\r\n      return reported[sanitizedReporter]?.includes(sanitizedReportee) || false;\r\n    } catch (error) {\r\n      console.error('Check reported error:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get unread message count for a user\r\n   */\r\n  async getUnreadCount(username: string): Promise<number> {\r\n    try {\r\n      // Sanitize username\r\n      const sanitizedUsername = sanitizeStrict(username);\r\n      if (!sanitizedUsername) {\r\n        return 0;\r\n      }\r\n\r\n      const threads = await this.getThreads(sanitizedUsername);\r\n      if (!threads.success || !threads.data) return 0;\r\n      \r\n      return threads.data.reduce((total, thread) => total + thread.unreadCount, 0);\r\n    } catch (error) {\r\n      console.error('Get unread count error:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get message notifications for a user\r\n   */\r\n  async getMessageNotifications(username: string): Promise<MessageNotification[]> {\r\n    try {\r\n      // Sanitize username\r\n      const sanitizedUsername = sanitizeStrict(username);\r\n      if (!sanitizedUsername) {\r\n        return [];\r\n      }\r\n\r\n      const notifications = await storageService.getItem<{ [seller: string]: MessageNotification[] }>(\r\n        'panty_message_notifications',\r\n        {}\r\n      );\r\n      return notifications[sanitizedUsername] || [];\r\n    } catch (error) {\r\n      console.error('Get message notifications error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear message notifications\r\n   */\r\n  async clearMessageNotifications(seller: string, buyer: string): Promise<void> {\r\n    try {\r\n      // Sanitize usernames\r\n      const sanitizedSeller = sanitizeStrict(seller);\r\n      const sanitizedBuyer = sanitizeStrict(buyer);\r\n      \r\n      if (!sanitizedSeller || !sanitizedBuyer) {\r\n        return;\r\n      }\r\n\r\n      const notifications = await storageService.getItem<{ [seller: string]: MessageNotification[] }>(\r\n        'panty_message_notifications',\r\n        {}\r\n      );\r\n      \r\n      if (notifications[sanitizedSeller]) {\r\n        notifications[sanitizedSeller] = notifications[sanitizedSeller].filter(\r\n          n => n.buyer !== sanitizedBuyer\r\n        );\r\n        \r\n        if (notifications[sanitizedSeller].length === 0) {\r\n          delete notifications[sanitizedSeller];\r\n        }\r\n        \r\n        await storageService.setItem('panty_message_notifications', notifications);\r\n      }\r\n    } catch (error) {\r\n      console.error('Clear message notifications error:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to message updates (preparation for WebSocket)\r\n   */\r\n  subscribeToThread(threadId: string, callback: (message: Message) => void): () => void {\r\n    // Sanitize thread ID\r\n    const sanitizedThreadId = sanitizeStrict(threadId);\r\n    if (!sanitizedThreadId) {\r\n      return () => {};\r\n    }\r\n\r\n    if (!this.messageListeners.has(sanitizedThreadId)) {\r\n      this.messageListeners.set(sanitizedThreadId, new Set());\r\n    }\r\n    \r\n    this.messageListeners.get(sanitizedThreadId)!.add(callback);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {\r\n      const listeners = this.messageListeners.get(sanitizedThreadId);\r\n      if (listeners) {\r\n        listeners.delete(callback);\r\n        if (listeners.size === 0) {\r\n          this.messageListeners.delete(sanitizedThreadId);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Upload attachment (preparation for file handling)\r\n   */\r\n  async uploadAttachment(file: File): Promise<ApiResponse<MessageAttachment>> {\r\n    try {\r\n      // Validate file\r\n      const fileValidation = securityService.validateFileUpload(file, {\r\n        maxSize: 5 * 1024 * 1024, // 5MB\r\n        allowedTypes: ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'application/pdf'],\r\n        allowedExtensions: ['jpg', 'jpeg', 'png', 'webp', 'pdf'],\r\n      });\r\n\r\n      if (!fileValidation.valid) {\r\n        return {\r\n          success: false,\r\n          error: { message: fileValidation.error || 'Invalid file' },\r\n        };\r\n      }\r\n\r\n      // Check rate limit for uploads\r\n      const rateLimitResult = this.rateLimiter.check(\r\n        'IMAGE_UPLOAD',\r\n        RATE_LIMITS.IMAGE_UPLOAD\r\n      );\r\n      if (!rateLimitResult.allowed) {\r\n        return {\r\n          success: false,\r\n          error: { message: `Upload limit exceeded. Please wait ${rateLimitResult.waitTime} seconds.` },\r\n        };\r\n      }\r\n\r\n      // For now, convert to base64 for localStorage\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const attachment: MessageAttachment = {\r\n            id: uuidv4(),\r\n            type: file.type.startsWith('image/') ? 'image' : 'file',\r\n            url: e.target?.result as string,\r\n            name: securityService.sanitizeForDisplay(file.name, { maxLength: 255 }),\r\n            size: file.size,\r\n            mimeType: file.type,\r\n          };\r\n          resolve({ success: true, data: attachment });\r\n        };\r\n        reader.onerror = () => {\r\n          reject({ success: false, error: { message: 'Failed to read file' } });\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    } catch (error) {\r\n      console.error('Upload attachment error:', error);\r\n      return {\r\n        success: false,\r\n        error: { message: 'Failed to upload attachment' },\r\n      };\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  private getConversationKey(userA: string, userB: string): string {\r\n    // Sanitize before creating key\r\n    const sanitizedUserA = sanitizeStrict(userA);\r\n    const sanitizedUserB = sanitizeStrict(userB);\r\n    return [sanitizedUserA, sanitizedUserB].sort().join('-');\r\n  }\r\n\r\n  private async getAllMessages(): Promise<{ [key: string]: Message[] }> {\r\n    const messages = await storageService.getItem<{ [key: string]: Message[] }>('panty_messages', {});\r\n    \r\n    // Sanitize all messages when loading from storage\r\n    const sanitized: { [key: string]: Message[] } = {};\r\n    for (const [key, msgs] of Object.entries(messages)) {\r\n      sanitized[key] = msgs.map(msg => ({\r\n        ...msg,\r\n        content: securityService.sanitizeForDisplay(msg.content, { \r\n          allowHtml: false,\r\n          maxLength: 1000 \r\n        }),\r\n      }));\r\n    }\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  private async updateMessageNotifications(\r\n    seller: string,\r\n    buyer: string,\r\n    content: string\r\n  ): Promise<void> {\r\n    try {\r\n      const sanitizedSeller = sanitizeStrict(seller);\r\n      const sanitizedBuyer = sanitizeStrict(buyer);\r\n      const sanitizedContent = securityService.sanitizeForDisplay(content, {\r\n        allowHtml: false,\r\n        maxLength: 50,\r\n      });\r\n\r\n      const notifications = await storageService.getItem<{ [seller: string]: MessageNotification[] }>(\r\n        'panty_message_notifications',\r\n        {}\r\n      );\r\n      \r\n      if (!notifications[sanitizedSeller]) {\r\n        notifications[sanitizedSeller] = [];\r\n      }\r\n      \r\n      const existingIndex = notifications[sanitizedSeller].findIndex(n => n.buyer === sanitizedBuyer);\r\n      \r\n      if (existingIndex >= 0) {\r\n        notifications[sanitizedSeller][existingIndex] = {\r\n          buyer: sanitizedBuyer,\r\n          messageCount: notifications[sanitizedSeller][existingIndex].messageCount + 1,\r\n          lastMessage: sanitizedContent + (content.length > 50 ? '...' : ''),\r\n          timestamp: new Date().toISOString(),\r\n        };\r\n      } else {\r\n        notifications[sanitizedSeller].push({\r\n          buyer: sanitizedBuyer,\r\n          messageCount: 1,\r\n          lastMessage: sanitizedContent + (content.length > 50 ? '...' : ''),\r\n          timestamp: new Date().toISOString(),\r\n        });\r\n      }\r\n      \r\n      await storageService.setItem('panty_message_notifications', notifications);\r\n    } catch (error) {\r\n      console.error('Update message notifications error:', error);\r\n    }\r\n  }\r\n\r\n  private async isThreadRelevantForRole(\r\n    username: string,\r\n    otherParty: string,\r\n    role: 'buyer' | 'seller'\r\n  ): Promise<boolean> {\r\n    try {\r\n      const users = await storageService.getItem<any>('panty_users', {});\r\n      const otherUser = users[otherParty];\r\n      \r\n      if (!otherUser) return true; // Include if we don't know the other user's role\r\n      \r\n      if (role === 'seller') {\r\n        // Seller sees conversations with buyers\r\n        return otherUser.role === 'buyer';\r\n      } else {\r\n        // Buyer sees conversations with sellers\r\n        return otherUser.role === 'seller' || otherUser.role === 'admin';\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking thread relevance:', error);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  private async getBlockedStatus(userA: string, userB: string): Promise<string[]> {\r\n    const blockedBy: string[] = [];\r\n    \r\n    if (await this.isBlocked(userA, userB)) {\r\n      blockedBy.push(userA);\r\n    }\r\n    if (await this.isBlocked(userB, userA)) {\r\n      blockedBy.push(userB);\r\n    }\r\n    \r\n    return blockedBy;\r\n  }\r\n\r\n  private async getThreadMetadata(threadId: string): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const metadata = await storageService.getItem<any>('thread_metadata', {});\r\n      return sanitizeObject(metadata[threadId] || {});\r\n    } catch (error) {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  private isCacheValid(updatedAt: string): boolean {\r\n    // Cache is valid for 5 minutes\r\n    const cacheTime = 5 * 60 * 1000;\r\n    return new Date().getTime() - new Date(updatedAt).getTime() < cacheTime;\r\n  }\r\n\r\n  private notifyMessageListeners(threadId: string, message: Message): void {\r\n    const listeners = this.messageListeners.get(threadId);\r\n    if (listeners) {\r\n      listeners.forEach(callback => callback(message));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepare for WebSocket connection (to be implemented with Socket.io later)\r\n   */\r\n  prepareWebSocket(): void {\r\n    // This will be implemented when integrating Socket.io\r\n    this.wsReady = false;\r\n  }\r\n\r\n  /**\r\n   * Check if WebSocket is ready\r\n   */\r\n  isWebSocketReady(): boolean {\r\n    return this.wsReady;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const messagesService = new MessagesService();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8440, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/reviews.service.ts"],"sourcesContent":["// src/services/reviews.service.ts\r\n\r\nimport { API_ENDPOINTS, buildApiUrl, apiCall, ApiResponse } from './api.config';\r\nimport { sanitizeStrict } from '@/utils/security/sanitization';\r\nimport { z } from 'zod';\r\n\r\n// Review types\r\nexport interface Review {\r\n  _id?: string;\r\n  orderId: string;\r\n  reviewer: string;\r\n  reviewee: string;\r\n  rating: number;\r\n  comment: string;\r\n  asDescribed?: boolean;\r\n  fastShipping?: boolean;\r\n  wouldBuyAgain?: boolean;\r\n  createdAt: string;\r\n  sellerResponse?: {\r\n    text: string;\r\n    date: string;\r\n  };\r\n  isFlagged?: boolean;\r\n  status?: 'pending' | 'approved' | 'rejected';\r\n}\r\n\r\nexport interface ReviewStats {\r\n  avgRating: number;\r\n  totalReviews: number;\r\n  fiveStars: number;\r\n  fourStars: number;\r\n  threeStars: number;\r\n  twoStars: number;\r\n  oneStars: number;\r\n}\r\n\r\nexport interface ReviewsResponse {\r\n  reviews: Review[];\r\n  stats: ReviewStats;\r\n  pagination: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    pages: number;\r\n  };\r\n}\r\n\r\nexport interface CreateReviewRequest {\r\n  orderId: string;\r\n  rating: number;\r\n  comment: string;\r\n  asDescribed?: boolean;\r\n  fastShipping?: boolean;\r\n  wouldBuyAgain?: boolean;\r\n}\r\n\r\nexport interface SellerResponseRequest {\r\n  response: string;\r\n}\r\n\r\nexport interface FlagReviewRequest {\r\n  reason: string;\r\n}\r\n\r\n// Validation schemas\r\nconst createReviewSchema = z.object({\r\n  orderId: z.string().min(1, 'Order ID is required'),\r\n  rating: z.number().int().min(1).max(5),\r\n  comment: z.string().min(10, 'Review must be at least 10 characters').max(500, 'Review must be less than 500 characters'),\r\n  asDescribed: z.boolean().optional(),\r\n  fastShipping: z.boolean().optional(),\r\n  wouldBuyAgain: z.boolean().optional(),\r\n});\r\n\r\nconst sellerResponseSchema = z.object({\r\n  response: z.string().min(10, 'Response must be at least 10 characters').max(500, 'Response must be less than 500 characters'),\r\n});\r\n\r\n/**\r\n * Reviews Service - Handles all review-related API operations\r\n */\r\nexport class ReviewsService {\r\n  private static instance: ReviewsService;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): ReviewsService {\r\n    if (!ReviewsService.instance) {\r\n      ReviewsService.instance = new ReviewsService();\r\n    }\r\n    return ReviewsService.instance;\r\n  }\r\n\r\n  /**\r\n   * Get reviews for a seller with pagination and stats\r\n   */\r\n  async getSellerReviews(\r\n    username: string, \r\n    page: number = 1, \r\n    limit: number = 20\r\n  ): Promise<ApiResponse<ReviewsResponse>> {\r\n    try {\r\n      console.log('[ReviewsService] Getting reviews for seller:', username);\r\n      \r\n      const sanitizedUsername = sanitizeStrict(username);\r\n      const url = buildApiUrl(API_ENDPOINTS.REVIEWS.BY_SELLER, { username: sanitizedUsername });\r\n      \r\n      const response = await apiCall<ReviewsResponse>(\r\n        `${url}?page=${page}&limit=${limit}`,\r\n        { method: 'GET' }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        // Sanitize review comments\r\n        response.data.reviews = response.data.reviews.map(review => ({\r\n          ...review,\r\n          comment: sanitizeStrict(review.comment),\r\n          sellerResponse: review.sellerResponse ? {\r\n            ...review.sellerResponse,\r\n            text: sanitizeStrict(review.sellerResponse.text)\r\n          } : undefined\r\n        }));\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('[ReviewsService] Error getting seller reviews:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: 'FETCH_ERROR',\r\n          message: 'Failed to fetch reviews'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if an order has been reviewed\r\n   */\r\n  async checkOrderReview(orderId: string): Promise<ApiResponse<{ hasReview: boolean; review: Review | null }>> {\r\n    try {\r\n      console.log('[ReviewsService] Checking review for order:', orderId);\r\n      \r\n      const url = buildApiUrl('/reviews/order/:orderId', { orderId });\r\n      const response = await apiCall<{ hasReview: boolean; review: Review | null }>(\r\n        url,\r\n        { method: 'GET' }\r\n      );\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('[ReviewsService] Error checking order review:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: 'FETCH_ERROR',\r\n          message: 'Failed to check order review'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new review\r\n   */\r\n  async createReview(request: CreateReviewRequest): Promise<ApiResponse<Review>> {\r\n    try {\r\n      console.log('[ReviewsService] Creating review:', request);\r\n      \r\n      // Validate request\r\n      const validationResult = createReviewSchema.safeParse(request);\r\n      if (!validationResult.success) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: 'VALIDATION_ERROR',\r\n            message: validationResult.error.errors[0].message\r\n          }\r\n        };\r\n      }\r\n\r\n      // Sanitize inputs\r\n      const sanitizedRequest = {\r\n        ...validationResult.data,\r\n        comment: sanitizeStrict(validationResult.data.comment)\r\n      };\r\n\r\n      const response = await apiCall<Review>(API_ENDPOINTS.REVIEWS.CREATE, {\r\n        method: 'POST',\r\n        body: JSON.stringify(sanitizedRequest)\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('[ReviewsService] Error creating review:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: 'CREATE_ERROR',\r\n          message: 'Failed to create review'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add seller response to a review\r\n   */\r\n  async addSellerResponse(reviewId: string, request: SellerResponseRequest): Promise<ApiResponse<Review>> {\r\n    try {\r\n      console.log('[ReviewsService] Adding seller response to review:', reviewId);\r\n      \r\n      // Validate request\r\n      const validationResult = sellerResponseSchema.safeParse(request);\r\n      if (!validationResult.success) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: 'VALIDATION_ERROR',\r\n            message: validationResult.error.errors[0].message\r\n          }\r\n        };\r\n      }\r\n\r\n      // Sanitize response text\r\n      const sanitizedRequest = {\r\n        response: sanitizeStrict(validationResult.data.response)\r\n      };\r\n\r\n      const url = buildApiUrl('/reviews/:reviewId/response', { reviewId });\r\n      const response = await apiCall<Review>(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify(sanitizedRequest)\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('[ReviewsService] Error adding seller response:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: 'UPDATE_ERROR',\r\n          message: 'Failed to add seller response'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flag a review for moderation\r\n   */\r\n  async flagReview(reviewId: string, reason: string): Promise<ApiResponse<{ message: string }>> {\r\n    try {\r\n      console.log('[ReviewsService] Flagging review:', reviewId);\r\n      \r\n      const sanitizedReason = sanitizeStrict(reason);\r\n      \r\n      const url = buildApiUrl('/reviews/:reviewId/flag', { reviewId });\r\n      const response = await apiCall<{ message: string }>(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ reason: sanitizedReason })\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('[ReviewsService] Error flagging review:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: 'FLAG_ERROR',\r\n          message: 'Failed to flag review'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get reviews by buyer\r\n   */\r\n  async getBuyerReviews(username: string, page: number = 1, limit: number = 20): Promise<ApiResponse<ReviewsResponse>> {\r\n    try {\r\n      console.log('[ReviewsService] Getting reviews by buyer:', username);\r\n      \r\n      const sanitizedUsername = sanitizeStrict(username);\r\n      const url = buildApiUrl('/reviews/buyer/:username', { username: sanitizedUsername });\r\n      \r\n      const response = await apiCall<ReviewsResponse>(\r\n        `${url}?page=${page}&limit=${limit}`,\r\n        { method: 'GET' }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        // Sanitize review comments\r\n        response.data.reviews = response.data.reviews.map(review => ({\r\n          ...review,\r\n          comment: sanitizeStrict(review.comment),\r\n          sellerResponse: review.sellerResponse ? {\r\n            ...review.sellerResponse,\r\n            text: sanitizeStrict(review.sellerResponse.text)\r\n          } : undefined\r\n        }));\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('[ReviewsService] Error getting buyer reviews:', error);\r\n      return {\r\n        success: false,\r\n        error: {\r\n          code: 'FETCH_ERROR',\r\n          message: 'Failed to fetch buyer reviews'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate average rating from reviews\r\n   */\r\n  calculateAverageRating(reviews: Review[]): number {\r\n    if (reviews.length === 0) return 0;\r\n    const sum = reviews.reduce((acc, review) => acc + review.rating, 0);\r\n    return Math.round((sum / reviews.length) * 10) / 10; // Round to 1 decimal\r\n  }\r\n\r\n  /**\r\n   * Get rating distribution\r\n   */\r\n  getRatingDistribution(reviews: Review[]): ReviewStats {\r\n    const stats: ReviewStats = {\r\n      avgRating: this.calculateAverageRating(reviews),\r\n      totalReviews: reviews.length,\r\n      fiveStars: 0,\r\n      fourStars: 0,\r\n      threeStars: 0,\r\n      twoStars: 0,\r\n      oneStars: 0,\r\n    };\r\n\r\n    reviews.forEach(review => {\r\n      switch (review.rating) {\r\n        case 5:\r\n          stats.fiveStars++;\r\n          break;\r\n        case 4:\r\n          stats.fourStars++;\r\n          break;\r\n        case 3:\r\n          stats.threeStars++;\r\n          break;\r\n        case 2:\r\n          stats.twoStars++;\r\n          break;\r\n        case 1:\r\n          stats.oneStars++;\r\n          break;\r\n      }\r\n    });\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const reviewsService = ReviewsService.getInstance();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8715, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/tip.service.ts"],"sourcesContent":["// src/services/tip.service.ts\r\nimport { sanitizeStrict, sanitizeCurrency } from '@/utils/security/sanitization';\r\nimport { z } from 'zod';\r\nimport { apiClient } from './api.config';\r\n\r\n// Validation schemas\r\nconst tipAmountSchema = z.number().min(1).max(500);\r\nconst tipMessageSchema = z.string().max(500).optional();\r\n\r\nexport interface TipTransaction {\r\n  id: string;\r\n  from?: string;\r\n  to?: string;\r\n  amount: number;\r\n  message?: string;\r\n  date: string;\r\n}\r\n\r\nexport interface TipStats {\r\n  totalTips: number;\r\n  totalAmount: number;\r\n  averageTip: number;\r\n  largestTip: number;\r\n  uniqueTippers: number;\r\n  recentTips: Array<{\r\n    from: string;\r\n    amount: number;\r\n    date: string;\r\n  }>;\r\n}\r\n\r\nclass TipService {\r\n  /**\r\n   * Send a tip to a seller\r\n   */\r\n  async sendTip(\r\n    recipientUsername: string, \r\n    amount: number, \r\n    message?: string\r\n  ): Promise<{ success: boolean; message: string; transactionId?: string }> {\r\n    try {\r\n      // Validate inputs\r\n      const validatedAmount = tipAmountSchema.parse(amount);\r\n      const sanitizedRecipient = sanitizeStrict(recipientUsername);\r\n      const sanitizedMessage = message ? sanitizeStrict(message) : undefined;\r\n      \r\n      if (sanitizedMessage) {\r\n        tipMessageSchema.parse(sanitizedMessage);\r\n      }\r\n\r\n      // Use the API client to make the request to the backend\r\n      const response = await apiClient.call<any>(\r\n        '/tips/send',\r\n        {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            amount: validatedAmount,\r\n            recipientUsername: sanitizedRecipient,\r\n            message: sanitizedMessage\r\n          })\r\n        }\r\n      );\r\n\r\n      if (response.success) {\r\n        return {\r\n          success: true,\r\n          message: response.data?.message || `Successfully sent $${validatedAmount.toFixed(2)} tip`,\r\n          transactionId: response.data?.transaction?.id\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          message: response.error?.message || \r\n                   (typeof response.error === 'string' ? response.error : 'Failed to send tip')\r\n        };\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('[TipService] Error sending tip:', error);\r\n      \r\n      if (error instanceof z.ZodError) {\r\n        return {\r\n          success: false,\r\n          message: 'Invalid tip amount or message'\r\n        };\r\n      }\r\n      \r\n      return {\r\n        success: false,\r\n        message: 'Failed to send tip. Please try again.'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get tips received by a seller\r\n   */\r\n  async getReceivedTips(\r\n    username?: string,\r\n    options?: {\r\n      startDate?: Date;\r\n      endDate?: Date;\r\n      limit?: number;\r\n    }\r\n  ): Promise<{ tips: TipTransaction[]; total: number; count: number }> {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (username) {\r\n        params.append('username', sanitizeStrict(username));\r\n      }\r\n      \r\n      if (options?.startDate) {\r\n        params.append('startDate', options.startDate.toISOString());\r\n      }\r\n      \r\n      if (options?.endDate) {\r\n        params.append('endDate', options.endDate.toISOString());\r\n      }\r\n      \r\n      if (options?.limit) {\r\n        params.append('limit', Math.min(options.limit, 100).toString());\r\n      }\r\n\r\n      const response = await apiClient.call<any>(\r\n        `/tips/received?${params}`,\r\n        { method: 'GET' }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        return response.data.data || { tips: [], total: 0, count: 0 };\r\n      }\r\n\r\n      return { tips: [], total: 0, count: 0 };\r\n\r\n    } catch (error) {\r\n      console.error('[TipService] Error fetching received tips:', error);\r\n      return { tips: [], total: 0, count: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get tips sent by a buyer\r\n   */\r\n  async getSentTips(\r\n    options?: {\r\n      startDate?: Date;\r\n      endDate?: Date;\r\n      limit?: number;\r\n    }\r\n  ): Promise<{ tips: TipTransaction[]; total: number; count: number }> {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (options?.startDate) {\r\n        params.append('startDate', options.startDate.toISOString());\r\n      }\r\n      \r\n      if (options?.endDate) {\r\n        params.append('endDate', options.endDate.toISOString());\r\n      }\r\n      \r\n      if (options?.limit) {\r\n        params.append('limit', Math.min(options.limit, 100).toString());\r\n      }\r\n\r\n      const response = await apiClient.call<any>(\r\n        `/tips/sent?${params}`,\r\n        { method: 'GET' }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        return response.data.data || { tips: [], total: 0, count: 0 };\r\n      }\r\n\r\n      return { tips: [], total: 0, count: 0 };\r\n\r\n    } catch (error) {\r\n      console.error('[TipService] Error fetching sent tips:', error);\r\n      return { tips: [], total: 0, count: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get tip statistics for a seller\r\n   */\r\n  async getTipStats(username: string): Promise<TipStats | null> {\r\n    try {\r\n      const sanitizedUsername = sanitizeStrict(username);\r\n      \r\n      const response = await apiClient.call<any>(\r\n        `/tips/stats/${sanitizedUsername}`,\r\n        { method: 'GET' }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        return response.data.data;\r\n      }\r\n\r\n      return null;\r\n\r\n    } catch (error) {\r\n      console.error('[TipService] Error fetching tip stats:', error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport const tipService = new TipService();"],"names":[],"mappings":"AAAA,8BAA8B;;;;AAC9B;AACA;AACA;AAAA;;;;AAEA,qBAAqB;AACrB,MAAM,kBAAkB,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AAC9C,MAAM,mBAAmB,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,QAAQ;AAwBrD,MAAM;IACJ;;GAEC,GACD,MAAM,QACJ,iBAAyB,EACzB,MAAc,EACd,OAAgB,EACwD;QACxE,IAAI;YACF,kBAAkB;YAClB,MAAM,kBAAkB,gBAAgB,KAAK,CAAC;YAC9C,MAAM,qBAAqB,CAAA,GAAA,wIAAA,CAAA,iBAAc,AAAD,EAAE;YAC1C,MAAM,mBAAmB,UAAU,CAAA,GAAA,wIAAA,CAAA,iBAAc,AAAD,EAAE,WAAW;YAE7D,IAAI,kBAAkB;gBACpB,iBAAiB,KAAK,CAAC;YACzB;YAEA,wDAAwD;YACxD,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,cACA;gBACE,QAAQ;gBACR,MAAM,KAAK,SAAS,CAAC;oBACnB,QAAQ;oBACR,mBAAmB;oBACnB,SAAS;gBACX;YACF;YAGF,IAAI,SAAS,OAAO,EAAE;gBACpB,OAAO;oBACL,SAAS;oBACT,SAAS,SAAS,IAAI,EAAE,WAAW,CAAC,mBAAmB,EAAE,gBAAgB,OAAO,CAAC,GAAG,IAAI,CAAC;oBACzF,eAAe,SAAS,IAAI,EAAE,aAAa;gBAC7C;YACF,OAAO;gBACL,OAAO;oBACL,SAAS;oBACT,SAAS,SAAS,KAAK,EAAE,WAChB,CAAC,OAAO,SAAS,KAAK,KAAK,WAAW,SAAS,KAAK,GAAG,oBAAoB;gBACtF;YACF;QAEF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;YAEjD,IAAI,iBAAiB,kKAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;gBAC/B,OAAO;oBACL,SAAS;oBACT,SAAS;gBACX;YACF;YAEA,OAAO;gBACL,SAAS;gBACT,SAAS;YACX;QACF;IACF;IAEA;;GAEC,GACD,MAAM,gBACJ,QAAiB,EACjB,OAIC,EACkE;QACnE,IAAI;YACF,MAAM,SAAS,IAAI;YAEnB,IAAI,UAAU;gBACZ,OAAO,MAAM,CAAC,YAAY,CAAA,GAAA,wIAAA,CAAA,iBAAc,AAAD,EAAE;YAC3C;YAEA,IAAI,SAAS,WAAW;gBACtB,OAAO,MAAM,CAAC,aAAa,QAAQ,SAAS,CAAC,WAAW;YAC1D;YAEA,IAAI,SAAS,SAAS;gBACpB,OAAO,MAAM,CAAC,WAAW,QAAQ,OAAO,CAAC,WAAW;YACtD;YAEA,IAAI,SAAS,OAAO;gBAClB,OAAO,MAAM,CAAC,SAAS,KAAK,GAAG,CAAC,QAAQ,KAAK,EAAE,KAAK,QAAQ;YAC9D;YAEA,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,eAAe,EAAE,QAAQ,EAC1B;gBAAE,QAAQ;YAAM;YAGlB,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,OAAO,SAAS,IAAI,CAAC,IAAI,IAAI;oBAAE,MAAM,EAAE;oBAAE,OAAO;oBAAG,OAAO;gBAAE;YAC9D;YAEA,OAAO;gBAAE,MAAM,EAAE;gBAAE,OAAO;gBAAG,OAAO;YAAE;QAExC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8CAA8C;YAC5D,OAAO;gBAAE,MAAM,EAAE;gBAAE,OAAO;gBAAG,OAAO;YAAE;QACxC;IACF;IAEA;;GAEC,GACD,MAAM,YACJ,OAIC,EACkE;QACnE,IAAI;YACF,MAAM,SAAS,IAAI;YAEnB,IAAI,SAAS,WAAW;gBACtB,OAAO,MAAM,CAAC,aAAa,QAAQ,SAAS,CAAC,WAAW;YAC1D;YAEA,IAAI,SAAS,SAAS;gBACpB,OAAO,MAAM,CAAC,WAAW,QAAQ,OAAO,CAAC,WAAW;YACtD;YAEA,IAAI,SAAS,OAAO;gBAClB,OAAO,MAAM,CAAC,SAAS,KAAK,GAAG,CAAC,QAAQ,KAAK,EAAE,KAAK,QAAQ;YAC9D;YAEA,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,WAAW,EAAE,QAAQ,EACtB;gBAAE,QAAQ;YAAM;YAGlB,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,OAAO,SAAS,IAAI,CAAC,IAAI,IAAI;oBAAE,MAAM,EAAE;oBAAE,OAAO;oBAAG,OAAO;gBAAE;YAC9D;YAEA,OAAO;gBAAE,MAAM,EAAE;gBAAE,OAAO;gBAAG,OAAO;YAAE;QAExC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0CAA0C;YACxD,OAAO;gBAAE,MAAM,EAAE;gBAAE,OAAO;gBAAG,OAAO;YAAE;QACxC;IACF;IAEA;;GAEC,GACD,MAAM,YAAY,QAAgB,EAA4B;QAC5D,IAAI;YACF,MAAM,oBAAoB,CAAA,GAAA,wIAAA,CAAA,iBAAc,AAAD,EAAE;YAEzC,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,YAAY,EAAE,mBAAmB,EAClC;gBAAE,QAAQ;YAAM;YAGlB,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,OAAO,SAAS,IAAI,CAAC,IAAI;YAC3B;YAEA,OAAO;QAET,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0CAA0C;YACxD,OAAO;QACT;IACF;AACF;AAEO,MAAM,aAAa,IAAI","debugId":null}},
    {"offset": {"line": 8878, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/app-initializer.ts"],"sourcesContent":["// src/services/app-initializer.ts\r\n\r\nimport { authService, storageService } from '@/services';\r\nimport { runOrdersMigration } from '@/utils/ordersMigration';\r\nimport { validateConfiguration, getAllConfig, isDevelopment } from '@/config/environment';\r\nimport { sanitizeStrict, sanitizeObject } from '@/utils/security/sanitization';\r\nimport { securityService } from './security.service';\r\nimport { getRateLimiter, RATE_LIMITS } from '@/utils/security/rate-limiter';\r\n\r\nexport interface InitializationResult {\r\n  success: boolean;\r\n  errors: string[];\r\n  warnings: string[];\r\n}\r\n\r\nexport class AppInitializer {\r\n  private static instance: AppInitializer;\r\n  private initialized = false;\r\n  private initializationPromise: Promise<InitializationResult> | null = null;\r\n  private readonly MAX_INIT_ATTEMPTS = 3;\r\n  private initAttempts = 0;\r\n  private rateLimiter = getRateLimiter();\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): AppInitializer {\r\n    if (!AppInitializer.instance) {\r\n      AppInitializer.instance = new AppInitializer();\r\n    }\r\n    return AppInitializer.instance;\r\n  }\r\n\r\n  /**\r\n   * Initialize the application with security checks\r\n   */\r\n  async initialize(): Promise<InitializationResult> {\r\n    // Check rate limit for initialization\r\n    const rateLimitCheck = this.rateLimiter.check('APP_INIT', {\r\n      maxAttempts: 5,\r\n      windowMs: 5 * 60 * 1000 // 5 minutes\r\n    });\r\n\r\n    if (!rateLimitCheck.allowed) {\r\n      return {\r\n        success: false,\r\n        errors: [`Initialization rate limit exceeded. Please wait ${rateLimitCheck.waitTime} seconds.`],\r\n        warnings: []\r\n      };\r\n    }\r\n\r\n    // If already initializing, return the existing promise\r\n    if (this.initializationPromise) {\r\n      return this.initializationPromise;\r\n    }\r\n\r\n    // If already initialized, return success\r\n    if (this.initialized) {\r\n      return { success: true, errors: [], warnings: [] };\r\n    }\r\n\r\n    // Check max attempts\r\n    if (this.initAttempts >= this.MAX_INIT_ATTEMPTS) {\r\n      return {\r\n        success: false,\r\n        errors: ['Maximum initialization attempts exceeded'],\r\n        warnings: []\r\n      };\r\n    }\r\n\r\n    this.initAttempts++;\r\n\r\n    // Start initialization\r\n    this.initializationPromise = this.performInitialization();\r\n    const result = await this.initializationPromise;\r\n    \r\n    if (result.success) {\r\n      this.initialized = true;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private async performInitialization(): Promise<InitializationResult> {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n\r\n    try {\r\n      console.log('[AppInitializer] Starting application initialization...');\r\n\r\n      // 0. Security checks first\r\n      try {\r\n        await this.performSecurityChecks();\r\n      } catch (error) {\r\n        errors.push(`Security check failed: ${this.sanitizeError(error)}`);\r\n        return { success: false, errors, warnings }; // Critical - stop initialization\r\n      }\r\n\r\n      // 1. Initialize CSRF protection\r\n      try {\r\n        console.log('[AppInitializer] Initializing CSRF protection...');\r\n        securityService.generateCSRFToken();\r\n      } catch (error) {\r\n        errors.push(`CSRF initialization failed: ${this.sanitizeError(error)}`);\r\n      }\r\n\r\n      // 2. Validate environment configuration\r\n      try {\r\n        console.log('[AppInitializer] Validating environment configuration...');\r\n        const validation = validateConfiguration();\r\n        if (!validation.valid) {\r\n          validation.errors.forEach(error => warnings.push(`Configuration: ${sanitizeStrict(error)}`));\r\n        }\r\n        \r\n        // Log configuration in development (sanitized)\r\n        if (isDevelopment()) {\r\n          const config = getAllConfig();\r\n          console.log('[AppInitializer] Environment configuration:', this.sanitizeConfig(config));\r\n        }\r\n      } catch (error) {\r\n        warnings.push(`Configuration validation warning: ${this.sanitizeError(error)}`);\r\n      }\r\n\r\n      // 3. Initialize storage service with security\r\n      try {\r\n        console.log('[AppInitializer] Initializing storage service...');\r\n        await this.initializeStorage();\r\n      } catch (error) {\r\n        errors.push(`Storage initialization failed: ${this.sanitizeError(error)}`);\r\n      }\r\n\r\n      // 4. Backend API is now the primary data source\r\n      console.log('[AppInitializer] Using backend API for all data operations');\r\n\r\n      // 5. Initialize auth service\r\n      try {\r\n        console.log('[AppInitializer] Initializing auth service...');\r\n        // Auth service initializes on first use\r\n      } catch (error) {\r\n        errors.push(`Auth initialization failed: ${this.sanitizeError(error)}`);\r\n      }\r\n\r\n      // 6. REMOVED: Wallet service no longer needs initialization\r\n      // The wallet service now makes direct API calls and doesn't need initialization\r\n      console.log('[AppInitializer] Wallet service will fetch data from API on demand');\r\n\r\n      // 7. Clean up corrupted local data before migration\r\n      try {\r\n        console.log('[AppInitializer] Cleaning up corrupted data...');\r\n        await this.cleanupCorruptedData();\r\n      } catch (error) {\r\n        warnings.push(`Data cleanup warning: ${this.sanitizeError(error)}`);\r\n      }\r\n\r\n      // 8. Run orders migration with validation\r\n      try {\r\n        console.log('[AppInitializer] Running orders migration...');\r\n        await this.runSecureMigration();\r\n      } catch (error) {\r\n        warnings.push(`Orders migration warning: ${this.sanitizeError(error)}`);\r\n      }\r\n\r\n      // 9. Perform data integrity checks\r\n      try {\r\n        console.log('[AppInitializer] Checking data integrity...');\r\n        await this.checkDataIntegrity();\r\n      } catch (error) {\r\n        warnings.push(`Data integrity check warning: ${this.sanitizeError(error)}`);\r\n      }\r\n\r\n      // 10. Clean up old data securely\r\n      try {\r\n        console.log('[AppInitializer] Cleaning up old data...');\r\n        await this.cleanupOldData();\r\n      } catch (error) {\r\n        warnings.push(`Cleanup warning: ${this.sanitizeError(error)}`);\r\n      }\r\n\r\n      // Log results\r\n      if (errors.length > 0) {\r\n        console.error('[AppInitializer] Initialization errors:', errors);\r\n      }\r\n      if (warnings.length > 0) {\r\n        console.warn('[AppInitializer] Initialization warnings:', warnings);\r\n      }\r\n\r\n      console.log('[AppInitializer] Initialization complete');\r\n\r\n      return {\r\n        success: errors.length === 0,\r\n        errors,\r\n        warnings,\r\n      };\r\n    } catch (error) {\r\n      console.error('[AppInitializer] Fatal initialization error:', error);\r\n      errors.push(`Fatal error: ${this.sanitizeError(error)}`);\r\n      return {\r\n        success: false,\r\n        errors,\r\n        warnings,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform initial security checks\r\n   */\r\n  private async performSecurityChecks(): Promise<void> {\r\n    // Check for secure context (HTTPS in production)\r\n    if (typeof window !== 'undefined') {\r\n      const isLocalhost = window.location.hostname === 'localhost' || \r\n                         window.location.hostname === '127.0.0.1' ||\r\n                         window.location.hostname.startsWith('192.168.') ||\r\n                         window.location.hostname.startsWith('10.');\r\n      \r\n      // Only enforce HTTPS if not in development AND not on localhost\r\n      if (window.location.protocol === 'http:' && !isDevelopment() && !isLocalhost) {\r\n        throw new Error('Application must be served over HTTPS in production');\r\n      }\r\n\r\n      // Check for critical browser features\r\n      if (!window.crypto || !window.crypto.getRandomValues) {\r\n        throw new Error('Web Crypto API not available');\r\n      }\r\n\r\n      // Check for Content Security Policy\r\n      const cspMeta = document.querySelector('meta[http-equiv=\"Content-Security-Policy\"]');\r\n      if (!cspMeta && !isDevelopment() && !isLocalhost) {\r\n        console.warn('[AppInitializer] Content Security Policy not found');\r\n      }\r\n\r\n      // Check for secure cookies support\r\n      if (!navigator.cookieEnabled) {\r\n        console.warn('[AppInitializer] Cookies are disabled - some features may not work');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize storage with security checks\r\n   */\r\n  private async initializeStorage(): Promise<void> {\r\n    // Check if localStorage is available\r\n    if (typeof window === 'undefined' || !window.localStorage) {\r\n      throw new Error('localStorage is not available');\r\n    }\r\n\r\n    // Test storage access with quota check\r\n    const testKey = '__storage_test__';\r\n    const testValue = 'x'.repeat(1024); // 1KB test\r\n    \r\n    try {\r\n      localStorage.setItem(testKey, testValue);\r\n      const retrieved = localStorage.getItem(testKey);\r\n      if (retrieved !== testValue) {\r\n        throw new Error('Storage integrity check failed');\r\n      }\r\n      localStorage.removeItem(testKey);\r\n    } catch (error) {\r\n      if (error instanceof Error && error.name === 'QuotaExceededError') {\r\n        throw new Error('Storage quota exceeded');\r\n      }\r\n      throw new Error('localStorage is not accessible');\r\n    }\r\n\r\n    // Check for storage tampering\r\n    try {\r\n      const integrityCheck = await storageService.getItem<string | null>('__integrity_check__', null);\r\n      if (integrityCheck && !this.validateIntegrityCheck(integrityCheck)) {\r\n        console.warn('[AppInitializer] Storage integrity check failed - possible tampering');\r\n      }\r\n    } catch (error) {\r\n      console.warn('[AppInitializer] Could not verify storage integrity');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate storage integrity check\r\n   */\r\n  private validateIntegrityCheck(check: string): boolean {\r\n    try {\r\n      // Simple validation - in production, use cryptographic signatures\r\n      return typeof check === 'string' && check.length === 64;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up corrupted wallet data\r\n   */\r\n  private async cleanupCorruptedData(): Promise<void> {\r\n    const keysToCheck = [\r\n      'wallet_buyers',\r\n      'wallet_sellers',\r\n      'wallet_admin',\r\n      'wallet_orders',\r\n    ];\r\n\r\n    for (const key of keysToCheck) {\r\n      try {\r\n        const rawValue = localStorage.getItem(key);\r\n        \r\n        // Check for corrupted data patterns\r\n        if (rawValue && (rawValue.includes('xxxxxxxxxx') || rawValue === 'undefined')) {\r\n          console.warn(`[AppInitializer] Removing corrupted data for ${key}`);\r\n          \r\n          // Set to appropriate default based on key type\r\n          if (key === 'wallet_admin') {\r\n            await storageService.setItem(key, '0');\r\n          } else if (key === 'wallet_orders') {\r\n            await storageService.setItem(key, []);\r\n          } else {\r\n            await storageService.setItem(key, {});\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(`[AppInitializer] Error cleaning ${key}:`, error);\r\n      }\r\n    }\r\n\r\n    // Fix wallet_admin format specifically\r\n    try {\r\n      const adminBalance = await storageService.getItem('wallet_admin', null);\r\n      \r\n      // If it's already a valid number string, we're good\r\n      if (adminBalance !== null && !isNaN(parseFloat(adminBalance))) {\r\n        return;\r\n      }\r\n      \r\n      // Check enhanced format\r\n      const enhancedBalance = await storageService.getItem('wallet_admin_enhanced', null);\r\n      if (enhancedBalance !== null && !isNaN(parseInt(enhancedBalance))) {\r\n        // Convert from cents to dollars and save as string\r\n        const balanceInDollars = parseInt(enhancedBalance) / 100;\r\n        await storageService.setItem('wallet_admin', balanceInDollars.toString());\r\n        return;\r\n      }\r\n      \r\n      // Default to 0 if no valid balance found\r\n      console.warn('[AppInitializer] Setting admin balance to default 0');\r\n      await storageService.setItem('wallet_admin', '0');\r\n    } catch (error) {\r\n      console.error('[AppInitializer] Error fixing admin balance:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run migration with data validation\r\n   */\r\n  private async runSecureMigration(): Promise<void> {\r\n    // Validate migration data before running\r\n    const orderData = await storageService.getItem<any>('wallet_orders', null);\r\n    if (orderData) {\r\n      // Enhanced validation using security service\r\n      const contentCheck = securityService.checkContentSecurity(JSON.stringify(orderData));\r\n      if (!contentCheck.safe) {\r\n        throw new Error(`Unsafe order data detected: ${contentCheck.issues.join(', ')}`);\r\n      }\r\n\r\n      // Basic structure validation\r\n      if (typeof orderData !== 'object' || Array.isArray(orderData)) {\r\n        throw new Error('Invalid order data structure');\r\n      }\r\n\r\n      // Check data size to prevent DoS\r\n      const dataSize = JSON.stringify(orderData).length;\r\n      if (dataSize > 10 * 1024 * 1024) { // 10MB limit\r\n        throw new Error('Order data exceeds size limit');\r\n      }\r\n    }\r\n    \r\n    await runOrdersMigration();\r\n  }\r\n\r\n  /**\r\n   * Check data integrity with security validation\r\n   */\r\n  private async checkDataIntegrity(): Promise<void> {\r\n    // Check for critical data\r\n    const criticalKeys = [\r\n      'wallet_buyers',\r\n      'wallet_sellers',\r\n      'wallet_admin',\r\n      'wallet_orders',\r\n    ];\r\n\r\n    // No longer skip for mock mode since we're not using mocks\r\n    \r\n    for (const key of criticalKeys) {\r\n      try {\r\n        const data = await storageService.getItem(key, null);\r\n        if (data === null) {\r\n          console.warn(`[AppInitializer] Missing critical data: ${sanitizeStrict(key)}`);\r\n        } else {\r\n          // Special handling for wallet_admin which can be a string (legacy) or number\r\n          if (key === 'wallet_admin') {\r\n            // Accept string, number, or enhanced format\r\n            if (typeof data !== 'string' && typeof data !== 'number') {\r\n              console.error(`[AppInitializer] Invalid data structure for ${sanitizeStrict(key)}`);\r\n            }\r\n          } else if (typeof data !== 'object') {\r\n            // Other keys should be objects\r\n            console.error(`[AppInitializer] Invalid data structure for ${sanitizeStrict(key)}`);\r\n          } else {\r\n            // Check for data corruption using security service\r\n            const sanitized = securityService.sanitizeForAPI(data as Record<string, any>);\r\n            if (Object.keys(sanitized).length === 0 && Object.keys(data as any).length > 0) {\r\n              console.error(`[AppInitializer] Possible data corruption in ${sanitizeStrict(key)}`);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(`[AppInitializer] Error checking ${sanitizeStrict(key)}:`, this.sanitizeError(error));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up old data with secure deletion\r\n   */\r\n  private async cleanupOldData(): Promise<void> {\r\n    // Define keys that should be removed (deprecated)\r\n    const deprecatedKeys = [\r\n      'old_wallet_data',\r\n      'temp_listings',\r\n      '__test_data__',\r\n      // Add mock-related keys to cleanup\r\n      'mock_api_state',\r\n      'mock_api_requests',\r\n      'mock_api_responses',\r\n    ];\r\n\r\n    // Validate each key before removal\r\n    const safeDeprecatedKeys = deprecatedKeys\r\n      .filter(key => typeof key === 'string' && key.length < 100)\r\n      .map(key => sanitizeStrict(key));\r\n\r\n    for (const key of safeDeprecatedKeys) {\r\n      try {\r\n        await storageService.removeItem(key);\r\n      } catch (error) {\r\n        console.warn(`[AppInitializer] Failed to remove deprecated key ${key}:`, error);\r\n      }\r\n    }\r\n\r\n    // Clean up old session data (older than 30 days)\r\n    try {\r\n      const allKeys = await storageService.getKeys('session_');\r\n      const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);\r\n\r\n      for (const key of allKeys.slice(0, 100)) { // Limit to prevent DoS\r\n        const sessionData = await storageService.getItem<any>(key, null);\r\n        if (sessionData && typeof sessionData === 'object' && \r\n            'timestamp' in sessionData && typeof sessionData.timestamp === 'number') {\r\n          if (sessionData.timestamp < thirtyDaysAgo) {\r\n            await storageService.removeItem(key);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn('[AppInitializer] Session cleanup error:', error);\r\n    }\r\n\r\n    // Clean up expired auth tokens\r\n    try {\r\n      interface AuthData {\r\n        expiresAt: string | number;\r\n        [key: string]: any;\r\n      }\r\n      \r\n      const authData = await storageService.getItem<AuthData | null>('auth_data', null);\r\n      if (authData && authData.expiresAt) {\r\n        const expiresAt = new Date(authData.expiresAt).getTime();\r\n        if (!isNaN(expiresAt) && expiresAt < Date.now()) {\r\n          await storageService.removeItem('auth_data');\r\n          await storageService.removeItem('auth_token');\r\n          console.log('[AppInitializer] Cleaned up expired auth tokens');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn('[AppInitializer] Auth cleanup error:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sanitize error messages for logging\r\n   */\r\n  private sanitizeError(error: unknown): string {\r\n    if (error instanceof Error) {\r\n      return sanitizeStrict(error.message.substring(0, 200)); // Limit length\r\n    }\r\n    return 'Unknown error';\r\n  }\r\n\r\n  /**\r\n   * Sanitize configuration object for logging\r\n   */\r\n  private sanitizeConfig(config: any): any {\r\n    return securityService.sanitizeForAPI(config);\r\n  }\r\n\r\n  /**\r\n   * Reset the initialization state\r\n   * Useful for testing or forcing re-initialization\r\n   */\r\n  reset(): void {\r\n    if (this.initialized && !isDevelopment()) {\r\n      console.warn('[AppInitializer] Reset called in production environment');\r\n      // Rate limit resets in production\r\n      const resetCheck = this.rateLimiter.check('APP_RESET', {\r\n        maxAttempts: 3,\r\n        windowMs: 60 * 60 * 1000 // 1 hour\r\n      });\r\n      if (!resetCheck.allowed) {\r\n        throw new Error('Reset rate limit exceeded');\r\n      }\r\n    }\r\n    this.initialized = false;\r\n    this.initializationPromise = null;\r\n    this.initAttempts = 0;\r\n  }\r\n\r\n  /**\r\n   * Check if the app is initialized\r\n   */\r\n  isInitialized(): boolean {\r\n    return this.initialized;\r\n  }\r\n\r\n  /**\r\n   * Get initialization status with details\r\n   */\r\n  getStatus(): {\r\n    initialized: boolean;\r\n    mockApiEnabled: boolean;\r\n    mockScenario?: string;\r\n    attempts: number;\r\n  } {\r\n    // Always return mock as disabled\r\n    return {\r\n      initialized: this.initialized,\r\n      mockApiEnabled: false,\r\n      mockScenario: undefined,\r\n      attempts: this.initAttempts,\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const appInitializer = AppInitializer.getInstance();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9335, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/index.ts"],"sourcesContent":["// src/services/index.ts\r\n\r\n/**\r\n * Central service exports\r\n * Import services from here throughout the application\r\n */\r\n\r\n// Storage service - foundation for all data persistence\r\nexport { storageService } from './storage.service';\r\n\r\n// Auth service - authentication and authorization\r\nexport { authService } from './auth.service';\r\n\r\n// Users service - user management and profiles\r\nexport { usersService } from './users.service';\r\n\r\n// Ban service - ban management\r\nexport { banService } from './ban.service';\r\n\r\n// Reports service - report management\r\nexport { reportsService } from './reports.service';\r\n\r\n// Wallet service - financial operations\r\nexport { walletService } from './wallet.service';\r\n\r\n// Listings service - marketplace listings\r\nexport { listingsService } from './listings.service';\r\n\r\n// Orders service - order management\r\nexport { ordersService } from './orders.service';\r\n\r\n// Messages service - messaging functionality\r\nexport { messagesService } from './messages.service';\r\n\r\n// Reviews service - review management\r\nexport { reviewsService } from './reviews.service';\r\n\r\n// Tip service - tipping functionality\r\nexport { tipService } from './tip.service';\r\n\r\n// Security service - validation, sanitization, and security features\r\nexport { securityService, sanitize } from './security.service';\r\n\r\n// App initializer - application startup\r\nexport { appInitializer } from './app-initializer';\r\n\r\n// Re-export validation schemas for easy access\r\nexport * as validationSchemas from '@/utils/validation/schemas';\r\n\r\n// Re-export security utilities\r\nexport { getRateLimiter, RATE_LIMITS } from '@/utils/security/rate-limiter';\r\nexport { CSRFTokenManager } from '@/utils/security/validation';\r\n\r\n// Re-export types that actually exist\r\nexport type { \r\n  ApiResponse, \r\n  ApiError\r\n} from './api.config';\r\n\r\nexport type {\r\n  CreateListingRequest,\r\n  UpdateListingRequest,\r\n  ListingSearchParams,\r\n  ListingViewUpdate,\r\n  BulkUpdateRequest,\r\n  PopularTag\r\n} from './listings.service';\r\n\r\nexport type {\r\n  CreateOrderRequest,\r\n  UpdateOrderStatusRequest,\r\n  OrderSearchParams,\r\n  DeliveryAddress\r\n} from './orders.service';\r\n\r\nexport type {\r\n  LoginRequest,\r\n  SignupRequest,\r\n  AuthResponse\r\n} from './auth.service';\r\n\r\nexport type {\r\n  Transaction,\r\n  WithdrawalRequest\r\n} from './wallet.service';\r\n\r\nexport type {\r\n  UserProfile,\r\n  UserSearchParams,\r\n  VerificationUpdateRequest,\r\n  BanRequest\r\n} from './users.service';\r\n\r\n// Messages service types\r\nexport type { \r\n  Message, \r\n  MessageThread, \r\n  SendMessageRequest, \r\n  BlockUserRequest, \r\n  ReportUserRequest,\r\n  MessageNotification,\r\n  CustomRequestData,\r\n  MessageAttachment\r\n} from './messages.service';\r\n\r\n// Reviews service types\r\nexport type {\r\n  Review,\r\n  ReviewStats,\r\n  ReviewsResponse,\r\n  CreateReviewRequest,\r\n  SellerResponseRequest,\r\n  FlagReviewRequest\r\n} from './reviews.service';\r\n\r\n// Ban service types\r\nexport type {\r\n  BanData,\r\n  BanResponse\r\n} from './ban.service';\r\n\r\n// Reports service types\r\nexport type {\r\n  SubmitReportData,\r\n  ProcessReportData,\r\n  ReportResponse\r\n} from './reports.service';\r\n\r\n// Export order types from WalletContext\r\nexport type { Order, CustomRequestPurchase, DepositLog } from '@/context/WalletContext';\r\n\r\n// Export feature flags for conditional logic\r\nexport { FEATURES } from './api.config';"],"names":[],"mappings":"AAAA,wBAAwB;AAExB;;;CAGC,GAED,wDAAwD;;AACxD;AAEA,kDAAkD;AAClD;AAEA,+CAA+C;AAC/C;AAEA,+BAA+B;AAC/B;AAEA,sCAAsC;AACtC;AAEA,wCAAwC;AACxC;AAEA,0CAA0C;AAC1C;AAEA,oCAAoC;AACpC;AAEA,6CAA6C;AAC7C;AAEA,sCAAsC;AACtC;AAEA,sCAAsC;AACtC;AAEA,qEAAqE;AACrE;AAEA,wCAAwC;AACxC;AAEA,+CAA+C;AAC/C;AAEA,+BAA+B;AAC/B;AACA;AAgFA,6CAA6C;AAC7C","debugId":null}},
    {"offset": {"line": 9417, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/websocket.service.ts"],"sourcesContent":["// src/services/websocket.service.ts\r\n\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { \r\n  WebSocketEvent, \r\n  WebSocketState, \r\n  WebSocketMessage, \r\n  WebSocketOptions, \r\n  WebSocketHandler,\r\n  WebSocketError \r\n} from '@/types/websocket';\r\n\r\nclass WebSocketService {\r\n  private state: WebSocketState = WebSocketState.DISCONNECTED;\r\n  private options: WebSocketOptions;\r\n  private handlers: Map<WebSocketEvent | string, Set<WebSocketHandler>> = new Map();\r\n  private socket: Socket | null = null;\r\n  private reconnectTimer: NodeJS.Timeout | null = null;\r\n  private reconnectAttempts = 0;\r\n\r\n  constructor(options: Partial<WebSocketOptions> = {}) {\r\n    this.options = {\r\n      url: options.url || '',\r\n      autoConnect: options.autoConnect ?? true,\r\n      reconnect: options.reconnect ?? true,\r\n      reconnectAttempts: options.reconnectAttempts ?? 5,\r\n      reconnectDelay: options.reconnectDelay ?? 3000,\r\n      auth: options.auth || {}\r\n    };\r\n\r\n    if (this.options.autoConnect) {\r\n      this.connect();\r\n    }\r\n  }\r\n\r\n  // Connect to WebSocket server\r\n  connect(): void {\r\n    if (this.state === WebSocketState.CONNECTED || this.state === WebSocketState.CONNECTING) {\r\n      return;\r\n    }\r\n\r\n    console.log('[WebSocket] Connecting to:', this.options.url);\r\n    this.setState(WebSocketState.CONNECTING);\r\n\r\n    // Create Socket.IO connection\r\n    this.socket = io(this.options.url, {\r\n      auth: this.options.auth,\r\n      transports: ['websocket', 'polling'],\r\n      reconnection: false, // We'll handle reconnection manually\r\n    });\r\n\r\n    // Set up Socket.IO event listeners\r\n    this.socket.on('connect', () => {\r\n      console.log('[WebSocket] Connected with ID:', this.socket?.id);\r\n      this.setState(WebSocketState.CONNECTED);\r\n      this.reconnectAttempts = 0;\r\n      this.emit(WebSocketEvent.CONNECT, { connected: true, id: this.socket?.id });\r\n    });\r\n\r\n    this.socket.on('disconnect', (reason: string) => {\r\n      console.log('[WebSocket] Disconnected:', reason);\r\n      this.setState(WebSocketState.DISCONNECTED);\r\n      this.emit(WebSocketEvent.DISCONNECT, { connected: false, reason });\r\n      \r\n      // Attempt reconnection if enabled and not a manual disconnect\r\n      if (this.options.reconnect && reason !== 'io client disconnect') {\r\n        this.attemptReconnect();\r\n      }\r\n    });\r\n\r\n    this.socket.on('connect_error', (error: any) => {\r\n      console.error('[WebSocket] Connection error:', error.message);\r\n      this.setState(WebSocketState.ERROR);\r\n      this.emit(WebSocketEvent.ERROR, { \r\n        message: error.message,\r\n        type: error.type || 'connection_error'\r\n      } as WebSocketError);\r\n    });\r\n\r\n    // Listen for custom events from backend\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  // Set up listeners for all custom events\r\n  private setupEventListeners(): void {\r\n    if (!this.socket) return;\r\n\r\n    // Connection confirmation (custom event from your backend)\r\n    this.socket.on('connected', (data: any) => {\r\n      console.log('[WebSocket] Connection confirmed:', data);\r\n    });\r\n\r\n    // Message events\r\n    this.socket.on('message:new', (data: any) => {\r\n      this.emit(WebSocketEvent.MESSAGE_NEW, data);\r\n      this.emit('message:new', data);\r\n    });\r\n\r\n    this.socket.on('message:typing', (data: any) => {\r\n      this.emit(WebSocketEvent.MESSAGE_TYPING, data);\r\n      this.emit('message:typing', data);\r\n    });\r\n\r\n    this.socket.on('message:read', (data: any) => {\r\n      this.emit(WebSocketEvent.MESSAGE_READ, data);\r\n      this.emit('message:read', data);\r\n    });\r\n\r\n    // Order events\r\n    this.socket.on('order:new', (data: any) => {\r\n      this.emit(WebSocketEvent.ORDER_NEW, data);\r\n      this.emit('order:new', data);\r\n    });\r\n    \r\n    this.socket.on('order:created', (data: any) => {\r\n      this.emit(WebSocketEvent.ORDER_NEW, data);\r\n      this.emit('order:created', data);\r\n    });\r\n\r\n    this.socket.on('order:status_change', (data: any) => {\r\n      this.emit(WebSocketEvent.ORDER_STATUS_CHANGE, data);\r\n      this.emit('order:status_change', data);\r\n    });\r\n\r\n    // Wallet events\r\n    this.socket.on('wallet:balance_update', (data: any) => {\r\n      this.emit(WebSocketEvent.WALLET_BALANCE_UPDATE, data);\r\n      this.emit('wallet:balance_update', data);\r\n    });\r\n\r\n    this.socket.on('wallet:transaction', (data: any) => {\r\n      this.emit(WebSocketEvent.WALLET_TRANSACTION, data);\r\n      this.emit('wallet:transaction', data);\r\n    });\r\n\r\n    // Auction events\r\n    this.socket.on('auction:bid', (data: any) => {\r\n      this.emit(WebSocketEvent.AUCTION_BID, data);\r\n      this.emit('auction:bid', data);\r\n    });\r\n\r\n    this.socket.on('auction:outbid', (data: any) => {\r\n      this.emit(WebSocketEvent.AUCTION_OUTBID, data);\r\n      this.emit('auction:outbid', data);\r\n    });\r\n\r\n    this.socket.on('auction:ended', (data: any) => {\r\n      this.emit(WebSocketEvent.AUCTION_ENDED, data);\r\n      this.emit('auction:ended', data);\r\n    });\r\n\r\n    // FIXED: User status events - handle all three event types properly\r\n    this.socket.on('user:online', (data: any) => {\r\n      console.log('[WebSocket] Processing user:online event:', data);\r\n      this.emit(WebSocketEvent.USER_ONLINE, data);\r\n      this.emit('user:online', data);\r\n    });\r\n    \r\n    this.socket.on('user:offline', (data: any) => {\r\n      console.log('[WebSocket] Processing user:offline event:', data);\r\n      this.emit(WebSocketEvent.USER_OFFLINE, data);\r\n      this.emit('user:offline', data);\r\n    });\r\n    \r\n    this.socket.on('user:status', (data: any) => {\r\n      console.log('[WebSocket] Processing user:status event:', data);\r\n      this.emit('user:status', data);\r\n      \r\n      // Also emit as online/offline based on the status\r\n      if (data.isOnline) {\r\n        this.emit(WebSocketEvent.USER_ONLINE, data);\r\n        this.emit('user:online', data);\r\n      } else {\r\n        this.emit(WebSocketEvent.USER_OFFLINE, data);\r\n        this.emit('user:offline', data);\r\n      }\r\n    });\r\n\r\n    // Notification events\r\n    this.socket.on('notification:new', (data: any) => {\r\n      this.emit(WebSocketEvent.NOTIFICATION_NEW, data);\r\n      this.emit('notification:new', data);\r\n    });\r\n\r\n    // Subscription events\r\n    this.socket.on('subscription:new', (data: any) => {\r\n      this.emit(WebSocketEvent.SUBSCRIPTION_NEW, data);\r\n      this.emit('subscription:new', data);\r\n    });\r\n\r\n    this.socket.on('subscription:cancelled', (data: any) => {\r\n      this.emit(WebSocketEvent.SUBSCRIPTION_CANCELLED, data);\r\n      this.emit('subscription:cancelled', data);\r\n    });\r\n\r\n    // Listing events\r\n    this.socket.on('listing:new', (data: any) => {\r\n      this.emit(WebSocketEvent.LISTING_NEW, data);\r\n      this.emit('listing:new', data);\r\n    });\r\n\r\n    this.socket.on('listing:sold', (data: any) => {\r\n      this.emit(WebSocketEvent.LISTING_SOLD, data);\r\n      this.emit('listing:sold', data);\r\n    });\r\n    \r\n    // Thread events\r\n    this.socket.on('thread:user_viewing', (data: any) => {\r\n      this.emit('thread:user_viewing', data);\r\n    });\r\n    \r\n    // Users online list\r\n    this.socket.on('users:online_list', (data: any) => {\r\n      this.emit('users:online_list', data);\r\n    });\r\n\r\n    // Generic event listener for debugging\r\n    this.socket.onAny((eventName: string, ...args: any[]) => {\r\n      console.log('[WebSocket] Received event:', eventName, args);\r\n    });\r\n  }\r\n\r\n  // Disconnect from WebSocket server\r\n  disconnect(): void {\r\n    console.log('[WebSocket] Disconnecting...');\r\n    \r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer);\r\n      this.reconnectTimer = null;\r\n    }\r\n\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n\r\n    this.setState(WebSocketState.DISCONNECTED);\r\n  }\r\n\r\n  // Subscribe to WebSocket events (fixed to accept string events too)\r\n  on<T = any>(event: WebSocketEvent | string, handler: WebSocketHandler<T>): () => void {\r\n    if (!this.handlers.has(event)) {\r\n      this.handlers.set(event, new Set());\r\n    }\r\n\r\n    this.handlers.get(event)!.add(handler);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      const handlers = this.handlers.get(event);\r\n      if (handlers) {\r\n        handlers.delete(handler);\r\n        if (handlers.size === 0) {\r\n          this.handlers.delete(event);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  // Emit event to all handlers (fixed to accept string events too)\r\n  private emit(event: WebSocketEvent | string, data: any): void {\r\n    const handlers = this.handlers.get(event);\r\n    if (handlers) {\r\n      handlers.forEach(handler => {\r\n        try {\r\n          handler(data);\r\n        } catch (error) {\r\n          console.error(`[WebSocket] Error in handler for ${event}:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Send message through WebSocket\r\n  send(event: string, data: any): void {\r\n    if (!this.socket || this.state !== WebSocketState.CONNECTED) {\r\n      console.warn('[WebSocket] Not connected, cannot send:', event);\r\n      return;\r\n    }\r\n\r\n    // Send through Socket.IO\r\n    this.socket.emit(event, data);\r\n    console.log('[WebSocket] Sent event:', event, data);\r\n  }\r\n\r\n  // Get current connection state\r\n  getState(): WebSocketState {\r\n    return this.state;\r\n  }\r\n\r\n  // Check if connected\r\n  isConnected(): boolean {\r\n    return this.state === WebSocketState.CONNECTED;\r\n  }\r\n\r\n  // Set connection state\r\n  private setState(newState: WebSocketState): void {\r\n    this.state = newState;\r\n    console.log(`[WebSocket] State changed to: ${newState}`);\r\n  }\r\n\r\n  // Attempt to reconnect\r\n  private attemptReconnect(): void {\r\n    if (!this.options.reconnect || this.reconnectAttempts >= this.options.reconnectAttempts!) {\r\n      console.error('[WebSocket] Max reconnection attempts reached');\r\n      this.setState(WebSocketState.ERROR);\r\n      this.emit(WebSocketEvent.ERROR, { \r\n        message: 'Max reconnection attempts reached' \r\n      } as WebSocketError);\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n    this.setState(WebSocketState.RECONNECTING);\r\n\r\n    console.log(`[WebSocket] Reconnecting... (attempt ${this.reconnectAttempts})`);\r\n\r\n    this.reconnectTimer = setTimeout(() => {\r\n      this.connect();\r\n    }, this.options.reconnectDelay);\r\n  }\r\n\r\n  // Clean up resources\r\n  destroy(): void {\r\n    this.disconnect();\r\n    this.handlers.clear();\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nlet instance: WebSocketService | null = null;\r\n\r\nexport const createWebSocketService = (options: Partial<WebSocketOptions>): WebSocketService => {\r\n  if (!instance) {\r\n    instance = new WebSocketService(options);\r\n  }\r\n  return instance;\r\n};\r\n\r\nexport const getWebSocketService = (): WebSocketService | null => {\r\n  return instance;\r\n};\r\n\r\nexport const destroyWebSocketService = (): void => {\r\n  if (instance) {\r\n    instance.destroy();\r\n    instance = null;\r\n  }\r\n};\r\n\r\nexport default WebSocketService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9723, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/favorites.service.ts"],"sourcesContent":["// src/services/favorites.service.ts\r\nimport { apiCall, FEATURES } from './api.config';\r\nimport { storageService } from './storage.service';\r\nimport { FavoriteSeller } from '@/context/FavoritesContext';\r\nimport { ApiResponse, ApiError } from './api.config';\r\n\r\nexport interface FavoritesApiResponse {\r\n  success: boolean;\r\n  data?: FavoriteSeller[];\r\n  error?: ApiError;\r\n  meta?: { total: number };\r\n}\r\n\r\nclass FavoritesService {\r\n  private readonly STORAGE_KEY_PREFIX = 'favorites_';\r\n\r\n  async getFavorites(username: string): Promise<FavoritesApiResponse> {\r\n    try {\r\n      if (FEATURES.USE_API_USERS) {\r\n        const response = await apiCall<FavoriteSeller[]>('/favorites');\r\n        return {\r\n          success: response.success,\r\n          data: response.data,\r\n          error: response.error,\r\n          meta: response.meta as { total: number } | undefined\r\n        };\r\n      }\r\n\r\n      // LocalStorage fallback\r\n      const storageKey = `${this.STORAGE_KEY_PREFIX}${username}`;\r\n      const favorites = await storageService.getItem<FavoriteSeller[]>(storageKey, []);\r\n      \r\n      return {\r\n        success: true,\r\n        data: favorites,\r\n        meta: { total: favorites.length }\r\n      };\r\n    } catch (error) {\r\n      console.error('Get favorites error:', error);\r\n      return {\r\n        success: false,\r\n        error: { \r\n          code: 'FETCH_ERROR', \r\n          message: 'Failed to get favorites' \r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  async checkFavorite(sellerId: string): Promise<{ success: boolean; isFavorited: boolean }> {\r\n    try {\r\n      if (FEATURES.USE_API_USERS) {\r\n        const response = await apiCall<{ isFavorited: boolean }>(`/favorites/check/${sellerId}`);\r\n        return {\r\n          success: response.success,\r\n          isFavorited: response.data?.isFavorited || false\r\n        };\r\n      }\r\n\r\n      // LocalStorage fallback handled by context\r\n      return { success: true, isFavorited: false };\r\n    } catch (error) {\r\n      console.error('Check favorite error:', error);\r\n      return { success: false, isFavorited: false };\r\n    }\r\n  }\r\n\r\n  async addFavorite(favorite: Omit<FavoriteSeller, 'addedAt'>): Promise<ApiResponse<FavoriteSeller>> {\r\n    try {\r\n      if (FEATURES.USE_API_USERS) {\r\n        const response = await apiCall<FavoriteSeller>('/favorites', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            sellerId: favorite.sellerId,\r\n            sellerUsername: favorite.sellerUsername,\r\n            profilePicture: favorite.profilePicture,\r\n            tier: favorite.tier,\r\n            isVerified: favorite.isVerified\r\n          })\r\n        });\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage fallback handled by context\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Add favorite error:', error);\r\n      return {\r\n        success: false,\r\n        error: { \r\n          code: 'ADD_ERROR', \r\n          message: 'Failed to add favorite' \r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  async removeFavorite(sellerId: string): Promise<ApiResponse<void>> {\r\n    try {\r\n      if (FEATURES.USE_API_USERS) {\r\n        const response = await apiCall<void>(`/favorites/${sellerId}`, {\r\n          method: 'DELETE'\r\n        });\r\n\r\n        return response;\r\n      }\r\n\r\n      // LocalStorage fallback handled by context\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Remove favorite error:', error);\r\n      return {\r\n        success: false,\r\n        error: { \r\n          code: 'REMOVE_ERROR', \r\n          message: 'Failed to remove favorite' \r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  async getFavoritesStats(username: string): Promise<ApiResponse<any>> {\r\n    try {\r\n      if (FEATURES.USE_API_USERS) {\r\n        return await apiCall('/favorites/stats');\r\n      }\r\n\r\n      // LocalStorage stats\r\n      const storageKey = `${this.STORAGE_KEY_PREFIX}${username}`;\r\n      const favorites = await storageService.getItem<FavoriteSeller[]>(storageKey, []);\r\n      \r\n      const byTier = favorites.reduce((acc, fav) => {\r\n        const tier = fav.tier || 'Unknown';\r\n        acc[tier] = (acc[tier] || 0) + 1;\r\n        return acc;\r\n      }, {} as Record<string, number>);\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          total: favorites.length,\r\n          byTier: Object.entries(byTier).map(([tier, count]) => ({ _id: tier, count })),\r\n          recentlyAdded: favorites.slice(0, 5)\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Get favorites stats error:', error);\r\n      return { \r\n        success: false,\r\n        error: {\r\n          code: 'STATS_ERROR',\r\n          message: 'Failed to get favorites stats'\r\n        }\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const favoritesService = new FavoritesService();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9882, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/gerom/OneDrive/Documents/pantypost/src/services/notification.service.ts"],"sourcesContent":["// src/services/notification.service.ts\r\nimport { apiClient } from './api.config';\r\nimport { storageService } from './storage.service';\r\nimport { securityService, sanitize } from './security.service';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport type { \r\n  Notification, \r\n  NotificationResponse, \r\n  NotificationPaginationResponse \r\n} from '@/types/notification';\r\n\r\nclass NotificationService {\r\n  private static instance: NotificationService;\r\n  private cachedNotifications: Map<string, { data: Notification[]; timestamp: number }> = new Map();\r\n  private cacheTimeout = 30000; // 30 seconds cache\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): NotificationService {\r\n    if (!NotificationService.instance) {\r\n      NotificationService.instance = new NotificationService();\r\n    }\r\n    return NotificationService.instance;\r\n  }\r\n\r\n  // Get active notifications\r\n  async getActiveNotifications(limit: number = 50): Promise<NotificationResponse> {\r\n    try {\r\n      const cacheKey = `active_${limit}`;\r\n      const cached = this.getCachedNotifications(cacheKey);\r\n      if (cached) {\r\n        return { success: true, data: cached };\r\n      }\r\n\r\n      const response = await apiClient.call<Notification[]>(\r\n        `/notifications/active?limit=${limit}`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        const sanitizedNotifications = this.sanitizeNotifications(response.data);\r\n        this.setCachedNotifications(cacheKey, sanitizedNotifications);\r\n        \r\n        // Store in local storage for offline access\r\n        await storageService.setItem('active_notifications', sanitizedNotifications);\r\n        \r\n        return { success: true, data: sanitizedNotifications };\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error fetching active notifications:', error);\r\n      \r\n      // Try to return cached data on error\r\n      const cached = await storageService.getItem<Notification[]>('active_notifications', []);\r\n      return { success: true, data: cached };\r\n    }\r\n  }\r\n\r\n  // Get cleared notifications\r\n  async getClearedNotifications(limit: number = 50): Promise<NotificationResponse> {\r\n    try {\r\n      const cacheKey = `cleared_${limit}`;\r\n      const cached = this.getCachedNotifications(cacheKey);\r\n      if (cached) {\r\n        return { success: true, data: cached };\r\n      }\r\n\r\n      const response = await apiClient.call<Notification[]>(\r\n        `/notifications/cleared?limit=${limit}`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        const sanitizedNotifications = this.sanitizeNotifications(response.data);\r\n        this.setCachedNotifications(cacheKey, sanitizedNotifications);\r\n        \r\n        // Store in local storage\r\n        await storageService.setItem('cleared_notifications', sanitizedNotifications);\r\n        \r\n        return { success: true, data: sanitizedNotifications };\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error fetching cleared notifications:', error);\r\n      \r\n      // Try to return cached data on error\r\n      const cached = await storageService.getItem<Notification[]>('cleared_notifications', []);\r\n      return { success: true, data: cached };\r\n    }\r\n  }\r\n\r\n  // Get all notifications with pagination\r\n  async getAllNotifications(page: number = 1, limit: number = 100): Promise<NotificationPaginationResponse> {\r\n    try {\r\n      const response = await apiClient.call<any>(\r\n        `/notifications/all?page=${page}&limit=${limit}`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        const sanitizedData = {\r\n          ...response.data,\r\n          notifications: this.sanitizeNotifications(response.data.notifications || [])\r\n        };\r\n        \r\n        return { success: true, data: sanitizedData };\r\n      }\r\n\r\n      return response as NotificationPaginationResponse;\r\n    } catch (error) {\r\n      console.error('Error fetching all notifications:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Failed to fetch notifications'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get unread count\r\n  async getUnreadCount(): Promise<number> {\r\n    try {\r\n      const response = await apiClient.call<{ count: number }>(\r\n        `/notifications/unread-count`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        return response.data.count || 0;\r\n      }\r\n\r\n      return 0;\r\n    } catch (error) {\r\n      console.error('Error fetching unread count:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Mark notification as read\r\n  async markAsRead(notificationId: string): Promise<NotificationResponse> {\r\n    try {\r\n      const sanitizedId = sanitize.strict(notificationId);\r\n      \r\n      const response = await apiClient.call<Notification>(\r\n        `/notifications/${sanitizedId}/read`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'PATCH',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success) {\r\n        this.invalidateCache();\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Failed to mark notification as read'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Mark all notifications as read\r\n  async markAllAsRead(): Promise<NotificationResponse> {\r\n    try {\r\n      const response = await apiClient.call<any>(\r\n        `/notifications/read-all`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'PATCH',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success) {\r\n        this.invalidateCache();\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error marking all as read:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Failed to mark all notifications as read'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Clear notification\r\n  async clearNotification(notificationId: string): Promise<NotificationResponse> {\r\n    try {\r\n      const sanitizedId = sanitize.strict(notificationId);\r\n      \r\n      const response = await apiClient.call<Notification>(\r\n        `/notifications/${sanitizedId}/clear`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'PATCH',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success) {\r\n        this.invalidateCache();\r\n        \r\n        // Update local storage\r\n        const active = await storageService.getItem<Notification[]>('active_notifications', []);\r\n        const updated = active.filter(n => (n._id || n.id) !== sanitizedId);\r\n        await storageService.setItem('active_notifications', updated);\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error clearing notification:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Failed to clear notification'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Clear all notifications\r\n  async clearAll(): Promise<NotificationResponse> {\r\n    try {\r\n      const response = await apiClient.call<any>(\r\n        `/notifications/clear-all`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'PATCH',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success) {\r\n        this.invalidateCache();\r\n        await storageService.removeItem('active_notifications');\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error clearing all notifications:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Failed to clear all notifications'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Restore notification\r\n  async restoreNotification(notificationId: string): Promise<NotificationResponse> {\r\n    try {\r\n      const sanitizedId = sanitize.strict(notificationId);\r\n      \r\n      const response = await apiClient.call<Notification>(\r\n        `/notifications/${sanitizedId}/restore`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'PATCH',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success) {\r\n        this.invalidateCache();\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error restoring notification:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Failed to restore notification'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete notification\r\n  async deleteNotification(notificationId: string): Promise<NotificationResponse> {\r\n    try {\r\n      const sanitizedId = sanitize.strict(notificationId);\r\n      \r\n      const response = await apiClient.call<any>(\r\n        `/notifications/${sanitizedId}`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success) {\r\n        this.invalidateCache();\r\n        \r\n        // Update local storage\r\n        const cleared = await storageService.getItem<Notification[]>('cleared_notifications', []);\r\n        const updated = cleared.filter(n => (n._id || n.id) !== sanitizedId);\r\n        await storageService.setItem('cleared_notifications', updated);\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error deleting notification:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Failed to delete notification'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete all cleared notifications\r\n  async deleteAllCleared(): Promise<NotificationResponse> {\r\n    try {\r\n      const response = await apiClient.call<any>(\r\n        `/notifications/cleared/all`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success) {\r\n        this.invalidateCache();\r\n        await storageService.removeItem('cleared_notifications');\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error deleting cleared notifications:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Failed to delete cleared notifications'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get notifications by type\r\n  async getNotificationsByType(type: string, limit: number = 50): Promise<NotificationResponse> {\r\n    try {\r\n      const sanitizedType = sanitize.strict(type);\r\n      \r\n      const response = await apiClient.call<Notification[]>(\r\n        `/notifications/type/${sanitizedType}?limit=${limit}`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        const sanitizedNotifications = this.sanitizeNotifications(response.data);\r\n        return { success: true, data: sanitizedNotifications };\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error fetching notifications by type:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Failed to fetch notifications'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Search notifications\r\n  async searchNotifications(params: {\r\n    q?: string;\r\n    type?: string;\r\n    startDate?: string;\r\n    endDate?: string;\r\n    limit?: number;\r\n  }): Promise<NotificationResponse> {\r\n    try {\r\n      const sanitizedParams = {\r\n        q: params.q ? sanitize.strict(params.q) : undefined,\r\n        type: params.type ? sanitize.strict(params.type) : undefined,\r\n        startDate: params.startDate,\r\n        endDate: params.endDate,\r\n        limit: params.limit || 50\r\n      };\r\n\r\n      const queryString = new URLSearchParams(\r\n        Object.entries(sanitizedParams).filter(([_, v]) => v !== undefined) as [string, string][]\r\n      ).toString();\r\n\r\n      const response = await apiClient.call<Notification[]>(\r\n        `/notifications/search?${queryString}`, // Fixed: removed /api prefix\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        const sanitizedNotifications = this.sanitizeNotifications(response.data);\r\n        return { success: true, data: sanitizedNotifications };\r\n      }\r\n\r\n      return response as NotificationResponse;\r\n    } catch (error) {\r\n      console.error('Error searching notifications:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Failed to search notifications'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  private sanitizeNotifications(notifications: Notification[]): Notification[] {\r\n    return notifications.map(n => ({\r\n      ...n,\r\n      id: n._id || n.id,\r\n      title: sanitize.strict(n.title),\r\n      message: sanitize.strict(n.message),\r\n      recipient: sanitize.username(n.recipient)\r\n    }));\r\n  }\r\n\r\n  private getCachedNotifications(key: string): Notification[] | null {\r\n    const cached = this.cachedNotifications.get(key);\r\n    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {\r\n      return cached.data;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private setCachedNotifications(key: string, data: Notification[]): void {\r\n    this.cachedNotifications.set(key, {\r\n      data,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  private invalidateCache(): void {\r\n    this.cachedNotifications.clear();\r\n  }\r\n\r\n  // Create local notification (for legacy support)\r\n  async createLocalNotification(recipient: string, message: string, type: string = 'system'): Promise<void> {\r\n    try {\r\n      const notifications = await storageService.getItem<Record<string, Notification[]>>('local_notifications', {});\r\n      \r\n      const newNotification: Notification = {\r\n        id: `local_${Date.now()}_${Math.random()}`,\r\n        recipient: sanitize.username(recipient),\r\n        type: type as any,\r\n        title: 'Notification',\r\n        message: sanitize.strict(message),\r\n        read: false,\r\n        cleared: false,\r\n        createdAt: new Date().toISOString(),\r\n        priority: 'normal'\r\n      };\r\n\r\n      if (!notifications[recipient]) {\r\n        notifications[recipient] = [];\r\n      }\r\n\r\n      notifications[recipient].unshift(newNotification);\r\n      \r\n      // Keep only last 100 notifications per user\r\n      notifications[recipient] = notifications[recipient].slice(0, 100);\r\n      \r\n      await storageService.setItem('local_notifications', notifications);\r\n      \r\n      // Fire event for UI updates\r\n      if (typeof window !== 'undefined') {\r\n        window.dispatchEvent(new CustomEvent('notification:new', {\r\n          detail: newNotification\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating local notification:', error);\r\n    }\r\n  }\r\n\r\n  // Sync local notifications with backend\r\n  async syncNotifications(): Promise<void> {\r\n    try {\r\n      // Get remote notifications\r\n      const remoteResponse = await this.getActiveNotifications(100);\r\n      if (!remoteResponse.success || !remoteResponse.data) return;\r\n\r\n      const remoteNotifications = Array.isArray(remoteResponse.data) ? remoteResponse.data : [];\r\n\r\n      // Get local notifications\r\n      const localNotifications = await storageService.getItem<Record<string, Notification[]>>('local_notifications', {});\r\n      \r\n      // Merge and deduplicate\r\n      // This is a simplified sync - in production you'd want more sophisticated conflict resolution\r\n      const merged: Record<string, Notification[]> = {};\r\n      \r\n      // Add remote notifications\r\n      remoteNotifications.forEach(n => {\r\n        if (!merged[n.recipient]) {\r\n          merged[n.recipient] = [];\r\n        }\r\n        merged[n.recipient].push(n);\r\n      });\r\n\r\n      // Add local notifications that don't exist remotely\r\n      Object.entries(localNotifications).forEach(([recipient, notifications]) => {\r\n        if (!merged[recipient]) {\r\n          merged[recipient] = [];\r\n        }\r\n        \r\n        notifications.forEach(localNotif => {\r\n          if (localNotif.id.startsWith('local_')) {\r\n            // This is a local-only notification, keep it\r\n            merged[recipient].push(localNotif);\r\n          }\r\n        });\r\n      });\r\n\r\n      // Sort by date and limit\r\n      Object.keys(merged).forEach(recipient => {\r\n        merged[recipient] = merged[recipient]\r\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\r\n          .slice(0, 100);\r\n      });\r\n\r\n      await storageService.setItem('local_notifications', merged);\r\n    } catch (error) {\r\n      console.error('Error syncing notifications:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const notificationService = NotificationService.getInstance();\r\nexport type { Notification, NotificationResponse, NotificationPaginationResponse };"],"names":[],"mappings":"AAAA,uCAAuC;;;;AACvC;AAAA;AACA;AACA;AAAA;;;;AAQA,MAAM;IACJ,OAAe,SAA8B;IACrC,sBAAgF,IAAI,MAAM;IAC1F,eAAe,MAAM;IAE7B,aAAsB,CAAC;IAEvB,OAAO,cAAmC;QACxC,IAAI,CAAC,oBAAoB,QAAQ,EAAE;YACjC,oBAAoB,QAAQ,GAAG,IAAI;QACrC;QACA,OAAO,oBAAoB,QAAQ;IACrC;IAEA,2BAA2B;IAC3B,MAAM,uBAAuB,QAAgB,EAAE,EAAiC;QAC9E,IAAI;YACF,MAAM,WAAW,CAAC,OAAO,EAAE,OAAO;YAClC,MAAM,SAAS,IAAI,CAAC,sBAAsB,CAAC;YAC3C,IAAI,QAAQ;gBACV,OAAO;oBAAE,SAAS;oBAAM,MAAM;gBAAO;YACvC;YAEA,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,4BAA4B,EAAE,OAAO,EACtC;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,MAAM,yBAAyB,IAAI,CAAC,qBAAqB,CAAC,SAAS,IAAI;gBACvE,IAAI,CAAC,sBAAsB,CAAC,UAAU;gBAEtC,4CAA4C;gBAC5C,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,wBAAwB;gBAErD,OAAO;oBAAE,SAAS;oBAAM,MAAM;gBAAuB;YACvD;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wCAAwC;YAEtD,qCAAqC;YACrC,MAAM,SAAS,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAiB,wBAAwB,EAAE;YACtF,OAAO;gBAAE,SAAS;gBAAM,MAAM;YAAO;QACvC;IACF;IAEA,4BAA4B;IAC5B,MAAM,wBAAwB,QAAgB,EAAE,EAAiC;QAC/E,IAAI;YACF,MAAM,WAAW,CAAC,QAAQ,EAAE,OAAO;YACnC,MAAM,SAAS,IAAI,CAAC,sBAAsB,CAAC;YAC3C,IAAI,QAAQ;gBACV,OAAO;oBAAE,SAAS;oBAAM,MAAM;gBAAO;YACvC;YAEA,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,6BAA6B,EAAE,OAAO,EACvC;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,MAAM,yBAAyB,IAAI,CAAC,qBAAqB,CAAC,SAAS,IAAI;gBACvE,IAAI,CAAC,sBAAsB,CAAC,UAAU;gBAEtC,yBAAyB;gBACzB,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,yBAAyB;gBAEtD,OAAO;oBAAE,SAAS;oBAAM,MAAM;gBAAuB;YACvD;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yCAAyC;YAEvD,qCAAqC;YACrC,MAAM,SAAS,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAiB,yBAAyB,EAAE;YACvF,OAAO;gBAAE,SAAS;gBAAM,MAAM;YAAO;QACvC;IACF;IAEA,wCAAwC;IACxC,MAAM,oBAAoB,OAAe,CAAC,EAAE,QAAgB,GAAG,EAA2C;QACxG,IAAI;YACF,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,wBAAwB,EAAE,KAAK,OAAO,EAAE,OAAO,EAChD;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,MAAM,gBAAgB;oBACpB,GAAG,SAAS,IAAI;oBAChB,eAAe,IAAI,CAAC,qBAAqB,CAAC,SAAS,IAAI,CAAC,aAAa,IAAI,EAAE;gBAC7E;gBAEA,OAAO;oBAAE,SAAS;oBAAM,MAAM;gBAAc;YAC9C;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qCAAqC;YACnD,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,mBAAmB;IACnB,MAAM,iBAAkC;QACtC,IAAI;YACF,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,2BAA2B,CAAC,EAC7B;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,OAAO,SAAS,IAAI,CAAC,KAAK,IAAI;YAChC;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO;QACT;IACF;IAEA,4BAA4B;IAC5B,MAAM,WAAW,cAAsB,EAAiC;QACtE,IAAI;YACF,MAAM,cAAc,sJAAA,CAAA,WAAQ,CAAC,MAAM,CAAC;YAEpC,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,eAAe,EAAE,YAAY,KAAK,CAAC,EACpC;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,EAAE;gBACpB,IAAI,CAAC,eAAe;YACtB;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,uCAAuC;YACrD,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,iCAAiC;IACjC,MAAM,gBAA+C;QACnD,IAAI;YACF,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,uBAAuB,CAAC,EACzB;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,EAAE;gBACpB,IAAI,CAAC,eAAe;YACtB;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,qBAAqB;IACrB,MAAM,kBAAkB,cAAsB,EAAiC;QAC7E,IAAI;YACF,MAAM,cAAc,sJAAA,CAAA,WAAQ,CAAC,MAAM,CAAC;YAEpC,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,eAAe,EAAE,YAAY,MAAM,CAAC,EACrC;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,EAAE;gBACpB,IAAI,CAAC,eAAe;gBAEpB,uBAAuB;gBACvB,MAAM,SAAS,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAiB,wBAAwB,EAAE;gBACtF,MAAM,UAAU,OAAO,MAAM,CAAC,CAAA,IAAK,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,MAAM;gBACvD,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,wBAAwB;YACvD;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,0BAA0B;IAC1B,MAAM,WAA0C;QAC9C,IAAI;YACF,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,wBAAwB,CAAC,EAC1B;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,EAAE;gBACpB,IAAI,CAAC,eAAe;gBACpB,MAAM,qIAAA,CAAA,iBAAc,CAAC,UAAU,CAAC;YAClC;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qCAAqC;YACnD,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,uBAAuB;IACvB,MAAM,oBAAoB,cAAsB,EAAiC;QAC/E,IAAI;YACF,MAAM,cAAc,sJAAA,CAAA,WAAQ,CAAC,MAAM,CAAC;YAEpC,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,eAAe,EAAE,YAAY,QAAQ,CAAC,EACvC;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,EAAE;gBACpB,IAAI,CAAC,eAAe;YACtB;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,sBAAsB;IACtB,MAAM,mBAAmB,cAAsB,EAAiC;QAC9E,IAAI;YACF,MAAM,cAAc,sJAAA,CAAA,WAAQ,CAAC,MAAM,CAAC;YAEpC,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,eAAe,EAAE,aAAa,EAC/B;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,EAAE;gBACpB,IAAI,CAAC,eAAe;gBAEpB,uBAAuB;gBACvB,MAAM,UAAU,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAiB,yBAAyB,EAAE;gBACxF,MAAM,UAAU,QAAQ,MAAM,CAAC,CAAA,IAAK,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,MAAM;gBACxD,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,yBAAyB;YACxD;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,mCAAmC;IACnC,MAAM,mBAAkD;QACtD,IAAI;YACF,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,0BAA0B,CAAC,EAC5B;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,EAAE;gBACpB,IAAI,CAAC,eAAe;gBACpB,MAAM,qIAAA,CAAA,iBAAc,CAAC,UAAU,CAAC;YAClC;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yCAAyC;YACvD,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,4BAA4B;IAC5B,MAAM,uBAAuB,IAAY,EAAE,QAAgB,EAAE,EAAiC;QAC5F,IAAI;YACF,MAAM,gBAAgB,sJAAA,CAAA,WAAQ,CAAC,MAAM,CAAC;YAEtC,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,oBAAoB,EAAE,cAAc,OAAO,EAAE,OAAO,EACrD;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,MAAM,yBAAyB,IAAI,CAAC,qBAAqB,CAAC,SAAS,IAAI;gBACvE,OAAO;oBAAE,SAAS;oBAAM,MAAM;gBAAuB;YACvD;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yCAAyC;YACvD,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,uBAAuB;IACvB,MAAM,oBAAoB,MAMzB,EAAiC;QAChC,IAAI;YACF,MAAM,kBAAkB;gBACtB,GAAG,OAAO,CAAC,GAAG,sJAAA,CAAA,WAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI;gBAC1C,MAAM,OAAO,IAAI,GAAG,sJAAA,CAAA,WAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,IAAI;gBACnD,WAAW,OAAO,SAAS;gBAC3B,SAAS,OAAO,OAAO;gBACvB,OAAO,OAAO,KAAK,IAAI;YACzB;YAEA,MAAM,cAAc,IAAI,gBACtB,OAAO,OAAO,CAAC,iBAAiB,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,GAAK,MAAM,YACzD,QAAQ;YAEV,MAAM,WAAW,MAAM,gJAAA,CAAA,YAAS,CAAC,IAAI,CACnC,CAAC,sBAAsB,EAAE,aAAa,EACtC;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;YAGF,IAAI,SAAS,OAAO,IAAI,SAAS,IAAI,EAAE;gBACrC,MAAM,yBAAyB,IAAI,CAAC,qBAAqB,CAAC,SAAS,IAAI;gBACvE,OAAO;oBAAE,SAAS;oBAAM,MAAM;gBAAuB;YACvD;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kCAAkC;YAChD,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,iBAAiB;IACT,sBAAsB,aAA6B,EAAkB;QAC3E,OAAO,cAAc,GAAG,CAAC,CAAA,IAAK,CAAC;gBAC7B,GAAG,CAAC;gBACJ,IAAI,EAAE,GAAG,IAAI,EAAE,EAAE;gBACjB,OAAO,sJAAA,CAAA,WAAQ,CAAC,MAAM,CAAC,EAAE,KAAK;gBAC9B,SAAS,sJAAA,CAAA,WAAQ,CAAC,MAAM,CAAC,EAAE,OAAO;gBAClC,WAAW,sJAAA,CAAA,WAAQ,CAAC,QAAQ,CAAC,EAAE,SAAS;YAC1C,CAAC;IACH;IAEQ,uBAAuB,GAAW,EAAyB;QACjE,MAAM,SAAS,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC;QAC5C,IAAI,UAAU,KAAK,GAAG,KAAK,OAAO,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE;YAC/D,OAAO,OAAO,IAAI;QACpB;QACA,OAAO;IACT;IAEQ,uBAAuB,GAAW,EAAE,IAAoB,EAAQ;QACtE,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK;YAChC;YACA,WAAW,KAAK,GAAG;QACrB;IACF;IAEQ,kBAAwB;QAC9B,IAAI,CAAC,mBAAmB,CAAC,KAAK;IAChC;IAEA,iDAAiD;IACjD,MAAM,wBAAwB,SAAiB,EAAE,OAAe,EAAE,OAAe,QAAQ,EAAiB;QACxG,IAAI;YACF,MAAM,gBAAgB,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAiC,uBAAuB,CAAC;YAE3G,MAAM,kBAAgC;gBACpC,IAAI,CAAC,MAAM,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,IAAI;gBAC1C,WAAW,sJAAA,CAAA,WAAQ,CAAC,QAAQ,CAAC;gBAC7B,MAAM;gBACN,OAAO;gBACP,SAAS,sJAAA,CAAA,WAAQ,CAAC,MAAM,CAAC;gBACzB,MAAM;gBACN,SAAS;gBACT,WAAW,IAAI,OAAO,WAAW;gBACjC,UAAU;YACZ;YAEA,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE;gBAC7B,aAAa,CAAC,UAAU,GAAG,EAAE;YAC/B;YAEA,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC;YAEjC,4CAA4C;YAC5C,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG;YAE7D,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,uBAAuB;YAEpD,4BAA4B;YAC5B;;QAKF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,sCAAsC;QACtD;IACF;IAEA,wCAAwC;IACxC,MAAM,oBAAmC;QACvC,IAAI;YACF,2BAA2B;YAC3B,MAAM,iBAAiB,MAAM,IAAI,CAAC,sBAAsB,CAAC;YACzD,IAAI,CAAC,eAAe,OAAO,IAAI,CAAC,eAAe,IAAI,EAAE;YAErD,MAAM,sBAAsB,MAAM,OAAO,CAAC,eAAe,IAAI,IAAI,eAAe,IAAI,GAAG,EAAE;YAEzF,0BAA0B;YAC1B,MAAM,qBAAqB,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAiC,uBAAuB,CAAC;YAEhH,wBAAwB;YACxB,8FAA8F;YAC9F,MAAM,SAAyC,CAAC;YAEhD,2BAA2B;YAC3B,oBAAoB,OAAO,CAAC,CAAA;gBAC1B,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,CAAC,EAAE;oBACxB,MAAM,CAAC,EAAE,SAAS,CAAC,GAAG,EAAE;gBAC1B;gBACA,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC;YAC3B;YAEA,oDAAoD;YACpD,OAAO,OAAO,CAAC,oBAAoB,OAAO,CAAC,CAAC,CAAC,WAAW,cAAc;gBACpE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;oBACtB,MAAM,CAAC,UAAU,GAAG,EAAE;gBACxB;gBAEA,cAAc,OAAO,CAAC,CAAA;oBACpB,IAAI,WAAW,EAAE,CAAC,UAAU,CAAC,WAAW;wBACtC,6CAA6C;wBAC7C,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;oBACzB;gBACF;YACF;YAEA,yBAAyB;YACzB,OAAO,IAAI,CAAC,QAAQ,OAAO,CAAC,CAAA;gBAC1B,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAClC,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,IAC9E,KAAK,CAAC,GAAG;YACd;YAEA,MAAM,qIAAA,CAAA,iBAAc,CAAC,OAAO,CAAC,uBAAuB;QACtD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gCAAgC;QAChD;IACF;AACF;AAGO,MAAM,sBAAsB,oBAAoB,WAAW","debugId":null}}]
}